<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具 on ukeate的笔记</title>
    <link>https://ukeate.com/categories/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on ukeate的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 Jan 2025 08:50:36 -0700</lastBuildDate>
    <atom:link href="https://ukeate.com/categories/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>工具</title>
      <link>https://ukeate.com/docs/tool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/tool/</guid>
      <description>&lt;h1 id=&#34;采用&#34;&gt;&#xA;  采用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%87%87%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;趋向&#34;&gt;&#xA;  趋向&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b6%8b%e5%90%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;本地(app) -&amp;gt; 线上(browser)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;工具&#34;&gt;&#xA;  工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;资讯&#xA;    课：腾讯视频&#xA;    搜索: DEVONagent, WolframAlpha&#xA;    渠道: pages, 知网, 博客, 知乎, 慕课, 网易公开课, 微信/qq, outlook&#xA;    发散查找: 百度指数, DEVONSphere&#xA;存储&#xA;    文件管理: DEVONthink, SiteSucker, FEFileExplorer, Documents&#xA;    网盘: icloud, oneDrive x 2, 坚果云, 百度网盘, 阿里网盘&#xA;效率&#xA;    浏览器: SwitchyOmega, tampermonkey, downthemall, fireshot, pushBullet, firefoxFocus, Alook&#xA;    设备同步: synergy, pushbullet, sharemouse&#xA;    人机: alfred, divvy, unclutter, workspaces, yoink, xscope, hazeOver, microSnitch&#xA;    监视: istatistica, wifiExplorer&#xA;    图: Flameshot&#xA;    短链: shortMenu&#xA;    远程：OpenVPN, Shadowrocket, TeamViewer, 向日葵, ToDesk, AnyDesk, Google远程桌面, Termius, 腾讯会议，钉钉&#xA;    语言：欧路词典&#xA;制品&#xA;    架构图: Visio, WPS, Office, OmniGraffle, PlantUML, Graphviz, VisualParadigm &#xA;    甘特图: OmniPlan, GanttProject, MicrosoftProject&#xA;    表: Excel, Xmind, MindNode, Ithoughts, Scapple&#xA;    大纲: Drafts, Workflowy, 幕布&#xA;    字: LaTeX, iAWriter&#xA;    数学: MathStudio, PocketCAS,&#xA;    画: Procreator, Realistic, MentalCanvas, ExplainEverything&#xA;    代码: Jetbrains, VIM, Spacemacs, VsCode, Code[iPad], WorkingCopy[iPad]&#xA;    表达式: Expressions &#xA;    图片: touchRetouch, auroraHDR, lensFlare, reflectStudio, superDenoising, Logoist, polarrPhoto, priimeStyles, tonality, QRFactory, Faceu, 美图秀秀&#xA;    音频: permute3&#xA;    视频: quickTime, gifox, gif brewery, gif maker, Hype3&#xA;    3d: RealityComposer, Aurora3DMaker, 3dScanner, JigSpace, MagicPlan&#xA;笔记&#xA;    信息: Notion, hugobook, Goodnotes, Notability, Prodrafts, OneNote[oneDrive]&#xA;    双链: LogSeq, Obsidian, Roam&#xA;    图: MarginNote, LiquidText, ThinkSpace&#xA;    GTD：Fantastical2, Trello, MicrosoftToDo, Things3&#xA;    记账: DayOne, 支付宝, MoneyPro, FamilyTree&#xA;    代码: Snipaste, Cacher[github], lepton[github], dash, snippetsLap, textastic&#xA;休闲: &#xA;    iPad: Chameleon, Frax, CoStudy&#xA;    Mac: noizio, relaxMelodiesSeasions, earth3D&#xA;政务财务&#xA;    APP: 个人所得税, 微店, 贝壳, 住这儿, 热力集团, 网上国网&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;依赖&#34;&gt;&#xA;  依赖&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%be%9d%e8%b5%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;系统: &#xA;    文件: tree, unrar, unzip, 7z, diff, du&#xA;    系统: ntfs-3g, os-prober, network-manager, wireless-tools, systemctl, service&#xA;    包: yaourt, yay, pkgfile, snap&#xA;        wps-office, ttf-wps-fonts&#xA;    界面: awesome, i3-wm, arandr, xscreensaver, tmux, synergy, ibus, synaptics, pepper-flash, virtualbox&#xA;    网络: chromium, firefox, thunderbird&#xA;ops:&#xA;    shell: ^z, bg, fg, jobs, nohup, expect, &#xA;    系统: sysdig, sysstat包(sar, sadf, mpstat, iostat, pidstat), ifconfig, top, htop, ps, df&#xA;    网络: wireshark, netstat, ss, ping, telnet, iptables, wget, git, openssh, nc, nmap, nslookup&#xA;    vpn: openvpn, shadowsocks, polipo, v2ray&#xA;    vm: docker, docker-compose&#xA;        db: mysql, mariadb, postgresql, redis, mongodb, cassandra, neo4j&#xA;            elasticsearch, elasticsearch-head, elasticsearch-analysis-hanlp, elasticsearch-ik, elasticsearch-pinyin&#xA;        mq: nsq, rabbitmq,  kafka,&#xA;        容器: nginx, nginx-php&#xA;        监控: zipkin, &#xA;        应用: dokuwiki, tiddlywiki, wordpress, &#xA;    服务: vsftpd, filezilla&#xA;    分布式: ansible&#xA;程序:&#xA;    基本: make, cmake, g++, gcc, lua, ruby,&#xA;    java: openjdk8, jdk8, jdk12, maven, tomcat&#xA;    go: go1.9.3, go1.12.6, go1.13.5, probobuf, protoc&#xA;    python: python2.7, python3.8, pip2, pip3&#xA;    php: php-cgi, php-fpm&#xA;    js: node, mvn, babel-cli&#xA;    分析: flame-graph&#xA;媒体: dia, convert, import, alsamixer, mplayer&#xA;ide: vscode, sublime, emacs, vim &#xA;    jetbrains: webstorm, goland, intellijIdea, phpstorm, pycharm, mps, android studio&#xA;    eclipse: eclipse-inst, eclipse-birt, eclipse-jee-neon&#xA;数据库: datagrip, neoclipse, robo3t, studio-3t&#xA;测试: postman&#xA;工作: snapcast, mosquitto, sox, snapcastrd, websockify&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;系统&#34;&gt;&#xA;  系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;windows&#34;&gt;&#xA;  windows&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#windows&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 方案&#xA;    附件 -&amp;gt; 系统工具 -&amp;gt; 字符映射表 -&amp;gt; 新宋体 中查看汉字的unicode编码&#xA;&#xA;    远程协助&#xA;            端口：3389&#xA;        1.系统属性 远程&#xA;        2.附件：远程连接&#xA;                # xp:单用户，远程操作时原用户无法操作&#xA;&#xA;    chm 不显示内容&#xA;            右键 -&amp;gt; 常规 -&amp;gt; 解锁&#xA;&#xA;# 命令&#xA;    route print&#xA;    route delete&#xA;    route add 0.0.0.0 mask 0.0.0.0 10.0.2.2&#xA;    nstsc   # 运程桌面&#xA;# cmd&#xA;    CMD 属性&#xA;            cmd /c dir 是执行完dir命令后关闭命令窗口。&#xA;            cmd /k dir 是执行完dir命令后不关闭命令窗口。&#xA;            cmd /c start dir 会打开一个新窗口后执行dir指令，原窗口会关闭。&#xA;            cmd /k start dir 会打开一个新窗口后执行dir指令，原窗口不会关闭。&#xA;&#xA;    语法命令&#xA;            | findstr asdf                        # 相当于grep&#xA;&#xA;    CMD命令&#xA;            1. gpedit.msc-----组策略&#xA;            2. sndrec32-------录音机&#xA;            3. Nslookup-------IP地址侦测器&#xA;            4. explorer-------打开资源管理器&#xA;            5. logoff---------注销命令&#xA;            6. tsshutdn-------60秒倒计时关机命令&#xA;            7. lusrmgr.msc----本机用户和组&#xA;            8. services.msc---本地服务设置&#xA;            9. oobe/msoobe /a----检查XP是否激活&#xA;            10. notepad--------打开记事本&#xA;            11. cleanmgr-------垃圾整理&#xA;            12. net start messenger----开始信使服务(或其它服务)&#xA;            13. compmgmt.msc---计算机管理&#xA;            14. net stop messenger-----停止信使服务(或其它服务)&#xA;            15. conf-----------启动netmeeting&#xA;            16. dvdplay--------DVD播放器&#xA;            17. charmap--------启动字符映射表&#xA;            18. diskmgmt.msc---磁盘管理实用程序&#xA;            19. calc-----------启动计算器&#xA;            20. dfrg.msc-------磁盘碎片整理程序&#xA;            21. chkdsk.exe-----Chkdsk磁盘检查&#xA;            22. devmgmt.msc--- 设备管理器&#xA;            23. regsvr32 /u *.dll----停止dll文件运行&#xA;            24. drwtsn32------ 系统医生&#xA;            25. rononce -p ----15秒关机&#xA;            26. dxdiag---------检查DirectX信息&#xA;            27. regedt32-------注册表编辑器&#xA;            28. Msconfig.exe---系统配置实用程序&#xA;            29. rsop.msc-------组策略结果集&#xA;            30. mem.exe--------显示内存使用情况&#xA;            31. regedit.exe----注册表&#xA;            32. winchat--------XP自带局域网聊天&#xA;            33. progman--------程序管理器&#xA;            34. winmsd---------系统信息&#xA;            35. perfmon.msc----计算机性能监测程序&#xA;            36. winver---------检查Windows版本&#xA;            37. sfc /scannow-----扫描错误并复原&#xA;            38. taskmgr-----任务管理器（2000／xp／2003&#xA;            39. winver---------检查Windows版本&#xA;            40. wmimgmt.msc----打开windows管理体系结构(WMI)&#xA;            41. wupdmgr--------windows更新程序&#xA;            42. wscript--------windows脚本宿主设置&#xA;            43. write----------写字板&#xA;            44. winmsd---------系统信息&#xA;            45. wiaacmgr-------扫描仪和照相机向导&#xA;            46. winchat--------XP自带局域网聊天&#xA;            47. mem.exe--------显示内存使用情况&#xA;            48. Msconfig.exe---系统配置实用程序&#xA;            49. mplayer2-------简易widnows media player&#xA;            50. mspaint--------画图板&#xA;            51. mstsc----------远程桌面连接&#xA;            52. mplayer2-------媒体播放机&#xA;            53. magnify--------放大镜实用程序&#xA;            54. mmc------------打开控制台&#xA;            55. mobsync--------同步命令&#xA;            56. dxdiag---------检查DirectX信息&#xA;            57. drwtsn32------ 系统医生&#xA;            58. devmgmt.msc--- 设备管理器&#xA;            59. dfrg.msc-------磁盘碎片整理程序&#xA;            60. diskmgmt.msc---磁盘管理实用程序&#xA;            61. dcomcnfg-------打开系统组件服务&#xA;            62. ddeshare-------打开DDE共享设置&#xA;            63. dvdplay--------DVD播放器&#xA;            64. net stop messenger-----停止信使服务&#xA;            65. net start messenger----开始信使服务&#xA;            66. notepad--------打开记事本&#xA;            67. nslookup-------网络管理的工具向导&#xA;            68. ntbackup-------系统备份和还原&#xA;            69. narrator-------屏幕“讲述人”&#xA;            70. ntmsmgr.msc----移动存储管理器&#xA;            71. ntmsoprq.msc---移动存储管理员操作请求&#xA;            72. netstat -an----(TC)命令检查接口&#xA;            73. syncapp--------创建一个公文包&#xA;            74. sysedit--------系统配置编辑器&#xA;            75. sigverif-------文件签名验证程序&#xA;            76. sndrec32-------录音机&#xA;            77. shrpubw--------创建共享文件夹&#xA;            78. secpol.msc-----本地安全策略&#xA;            79. syskey---------系统加密，一旦加密就不能解开，保护windows xp系统的双重密码&#xA;            80. services.msc---本地服务设置&#xA;            81. Sndvol32-------音量控制程序&#xA;            82. sfc.exe--------系统文件检查器&#xA;            83. sfc /scannow---windows文件保护&#xA;            84. tsshutdn-------60秒倒计时关机命令&#xA;            84. tsshutdn-------60秒倒计时关机命令&#xA;            85. tourstart------xp简介（安装完成后出现的漫游xp程序）&#xA;            86. taskmgr--------任务管理器&#xA;            87. eventvwr-------事件查看器&#xA;            88. eudcedit-------造字程序&#xA;            89. explorer-------打开资源管理器&#xA;            90. packager-------对象包装程序&#xA;            91. perfmon.msc----计算机性能监测程序&#xA;            92. progman--------程序管理器&#xA;            93. regedit.exe----注册表&#xA;            94. rsop.msc-------组策略结果集&#xA;            95. regedt32-------注册表编辑器&#xA;            96. rononce -p ----15秒关机&#xA;            97. regsvr32 /u *.dll----停止dll文件运行&#xA;            98. regsvr32 /u zipfldr.dll------取消ZIP支持&#xA;            99. cmd.exe--------CMD命令提示符&#xA;            100. chkdsk.exe-----Chkdsk磁盘检查&#xA;            101. certmgr.msc----证书管理实用程序&#xA;            102. calc-----------启动计算器&#xA;            103. charmap--------启动字符映射表&#xA;            104. cliconfg-------SQL SERVER 客户端网络实用程序&#xA;            105. Clipbrd--------剪贴板查看器&#xA;            106. conf-----------启动netmeeting&#xA;            107. compmgmt.msc---计算机管理&#xA;            108. cleanmgr-------垃圾整理&#xA;            109. ciadv.msc------索引服务程序&#xA;            110. osk------------打开屏幕键盘&#xA;            111. odbcad32-------ODBC数据源管理器&#xA;            112. oobe/msoobe /a----检查XP是否激活&#xA;            113. lusrmgr.msc----本机用户和组&#xA;            114. logoff---------注销命令&#xA;            115. iexpress-------木马捆绑工具，系统自带&#xA;            116. Nslookup-------IP地址侦测器&#xA;            117. fsmgmt.msc-----共享文件夹管理器&#xA;            118. utilman--------辅助工具管理器&#xA;            119. gpedit.msc-----组策略&#xA;            120. explorer-------打开资源管理器&#xA;            其它&#xA;                    arp -a                # 显示当前局域网ip与物理地址&#xA;                    net view        # 显示局域网用户&#xA;                    nbtstat                # 详细局域网用户&#xA;                    sfc /scannow                # windows 文件检查器（修复系统）&#xA;                    shutdonw                        # 关机等一系列指令&#xA;# 注册表&#xA;    使用UTC时间(兼容linux)&#xA;            cmd&amp;gt; Reg add HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1&#xA;# 工具&#xA;    端口映射器&#xA;            远程vpn代理到ssh&#xA;    everything&#xA;            文件快速搜索工具&#xA;            远程访问电脑文件的服务器&#xA;    花生壳&#xA;            动态域名软件，已申请域名，ip经常变换时使用&#xA;    xmanager&#xA;            ssh工具&#xA;    端口映射&#xA;            portmap&#xA;    xshell&#xA;    secureCRT&#xA;    Xmanager                # 可运行图形界面如vnc&#xA;    teamViewer                # 可图形界面&#xA;    cmder          # windows命令行工具&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;网络&#34;&gt;&#xA;  网络&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%bb%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;teamviewer&#34;&gt;&#xA;  teamviewer&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#teamviewer&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 远程桌面&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;wireshark&#34;&gt;&#xA;  wireshark&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#wireshark&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 抓包&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;charlet&#34;&gt;&#xA;  charlet&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#charlet&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 抓包&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;mitmproxy&#34;&gt;&#xA;  mitmproxy&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mitmproxy&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 抓包&#xA;命令&#xA;    mitmdump&#xA;    mitmproxy&#xA;    mitmweb&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;burp-suite&#34;&gt;&#xA;  Burp Suite&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#burp-suite&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 抓包&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;fiddler&#34;&gt;&#xA;  fiddler&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#fiddler&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 抓包&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;whistle&#34;&gt;&#xA;  whistle&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#whistle&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 抓包&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;tcpdump&#34;&gt;&#xA;  tcpdump&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tcpdump&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 抓包&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;anyproxy&#34;&gt;&#xA;  anyproxy&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#anyproxy&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 代理http/https&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;proxychains&#34;&gt;&#xA;  proxychains&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#proxychains&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 代理&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;chrome&#34;&gt;&#xA;  chrome&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chrome&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    webkit: chrome firefox safari的内核，来源于kde的khtml与kjs&#xA;快捷键&#xA;    ctrl + f5 无缓存刷新&#xA;    f12 调试模式&#xA;调试模式&#xA;    js调试&#xA;        sources-&amp;gt; js文件打断点调试&#xA;                # “{}”按钮是格式化代码，右边按钮单步调试，依次为执行， 跳过进入方法，进入方法，跳出方法，开启／停止调试，暂停&#xA;        //# sourceURL=base.js&#xA;    console&#xA;        可以查看js常量，如THREE.VERSION&#xA;设置页&#xA;    about:about                                 # 进入查看所有设置页&#xA;    chrome:extensions&#xA;    chrome:flags                                # 可以开启硬件加速解码&#xA;集成抓包工具&#xA;    chrome://net-internals/#events&#xA;    chrome://net-export 导出文件,netlog-viewer.appspot.com分析&#xA;插件&#xA;    ARC Welder  # android模拟器&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;firefox&#34;&gt;&#xA;  firefox&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#firefox&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;代理设置&#xA;    “编辑”→“首选项”→“高级”→“网络”→“设置”→“手动配置代理”&#xA;mozvr&#xA;    介绍&#xA;        mozilla vr 虚拟现实&#xA;        购买Oculus Rift头盔来看它的网页&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数据分析&#34;&gt;&#xA;  数据分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;paraview&#34;&gt;&#xA;  paraview&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#paraview&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 数据可视化&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;finreport&#34;&gt;&#xA;  finreport&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#finreport&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 数据可视化&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;设计&#34;&gt;&#xA;  设计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;sketch&#34;&gt;&#xA;  sketch&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sketch&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# mac下轻量ui设计工具&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;rose&#34;&gt;&#xA;  rose&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rose&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;    # ibm uml工具&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;开发&#34;&gt;&#xA;  开发&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%80%e5%8f%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;vim&#34;&gt;&#xA;  vim&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#vim&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sublime&#34;&gt;&#xA;  sublime&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sublime&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;功能&#xA;    显示风格好&#xA;    缩略图&#xA;    热加载(不改变原文件)&#xA;    插件&#xA;    多文件夹查找&#xA;    多视窗&#xA;    命令模糊搜索下拉菜单&#xA;    柜形选择&#xA;    V8插件，js运行控制台&#xA;    js校验&#xA;    vi 操作设置&#xA;    修改配色方案&#xA;快捷键&#xA;    批量修改&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;idle&#34;&gt;&#xA;  idle&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#idle&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# python tkinter开发的python ide&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;lighttable&#34;&gt;&#xA;  lighttable&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lighttable&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# clojure&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;hbuilder&#34;&gt;&#xA;  hbuilder&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hbuilder&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;    # h5&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;komodo-edit&#34;&gt;&#xA;  komodo edit&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#komodo-edit&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 免费跨平台，多pl&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;vscode&#34;&gt;&#xA;  vscode&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#vscode&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;source-insight&#34;&gt;&#xA;  source insight&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#source-insight&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;gerrit&#34;&gt;&#xA;  gerrit&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gerrit&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;    # 查看代码&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;keil&#34;&gt;&#xA;  keil&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#keil&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 嵌入式&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;客户端&#34;&gt;&#xA;  客户端&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%a2%e6%88%b7%e7%ab%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;datastudio&#34;&gt;&#xA;  datastudio&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#datastudio&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;    # ibm数据库连接工具&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;plsql&#34;&gt;&#xA;  plsql&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#plsql&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;oracle-sql-developer&#34;&gt;&#xA;  oracle sql developer&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#oracle-sql-developer&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;navicat&#34;&gt;&#xA;  navicat&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#navicat&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;    # ios的数据库操作gui&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;robo3t&#34;&gt;&#xA;  robo3t&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#robo3t&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 原robomongo, 免费&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;studio3t&#34;&gt;&#xA;  studio3t&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#studio3t&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# mongodb, 收费&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;字体&#34;&gt;&#xA;  字体&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%97%e4%bd%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;中文等宽&#xA;    Sarasa Mono SC&#xA;        https://github.com/be5invis/Sarasa-Gothic&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Eclipse</title>
      <link>https://ukeate.com/docs/tool/develop/eclipse/</link>
      <pubDate>Thu, 11 Oct 2018 18:33:08 +0800</pubDate>
      <guid>https://ukeate.com/docs/tool/develop/eclipse/</guid>
      <description>&lt;h1 id=&#34;方案&#34;&gt;&#xA;  方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;user library发布&#xA;        项目右键 -&amp;gt; properties -&amp;gt; Deployment Assembly -&amp;gt; add -&amp;gt; javaBuild Path Entries中选择发布包&#xA;tomcat设置发布到外部&#xA;        new server -&amp;gt; 直接finish&#xA;        右键server -&amp;gt; open        &#xA;                修改server location -&amp;gt; use Tomcat installation&#xA;                修改server location -&amp;gt; deploy path为webapps&#xA;                修改TimeOuts -&amp;gt;所有时间为1200&#xA;java版本&#xA;        window -&amp;gt; preferences -&amp;gt; java -&amp;gt; compiler&#xA;        window -&amp;gt; preferences -&amp;gt; java -&amp;gt; installed JREs&#xA;编码&#xA;        general -&amp;gt; workspace&#xA;                Text file encoding&#xA;        general -&amp;gt; content types&#xA;                Text -&amp;gt; java source file &#xA;                        defalt encoding输入UTF-8并点击update&#xA;快捷键&#xA;        general -&amp;gt; editors -&amp;gt; keys&#xA;                content assist                # 代码提示&#xA;                word comletion                # 代码补全&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;插件&#34;&gt;&#xA;  插件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%92%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;market place&#xA;        http://www.eclipse.org/mpc/&#xA;        在线网页&#xA;                http://www.eclipse.org/mpc/archive.php&#xA;        在线安装(luna)&#xA;                http://download.eclipse.org/mpc/releases/1.3.0/&#xA;        yum&#xA;                eclipse-mpc&#xA;subclipse&#xA;        yum&#xA;                eclipse-subclipse&#xA;jdt java8 support&#xA;        help -&amp;gt; market place -&amp;gt; find: java 8&#xA;                java 8 support for eclipse &#xA;        在线安装(kepler)&#xA;                http://download.eclipse.org/eclipse/updates/4.3-P-builds/&#xA;                网站&#xA;                        http://wiki.eclipse.org/JDT/Eclipse_Java_8_Support_For_Kepler&#xA;m2e&#xA;        在线&#xA;                http://download.eclipse.org/technology/m2e/releases &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;mvn项目&#34;&gt;&#xA;  mvn项目&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mvn%e9%a1%b9%e7%9b%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;创建web 项目&#xA;        maven project &#xA;                catalog: internal&#xA;                filter:webapp&#xA;                        org.apache.maven.archetypes&#xA;        项目右键 - new -&amp;gt; source folder&#xA;                src/main/java&#xA;                src/main/resources&#xA;                src/test/java&#xA;                src/test/resources&#xA;                        # 可以在navigator中创建, 再:&#xA;                        ## 项目右键 -&amp;gt; buildpath -&amp;gt; configure... -&amp;gt; source -&amp;gt; add folder添加以上4个source folder&#xA;        修改 configure build path -&amp;gt; source 中2个source folder中的output folder&#xA;                src/main/java                target/classes&#xA;                src/main/resources        target/classes&#xA;                src/test/java                target/test-classes&#xA;                src/test/resources        target/test-classes&#xA;        修改 configure build path -&amp;gt; libraries -&amp;gt; jre system library -&amp;gt; edit&#xA;        右键 -&amp;gt; properties -&amp;gt;java compiler -&amp;gt; 1.8&#xA;        &#xA;&#xA;        项目右键 -&amp;gt; run as -&amp;gt; maven install                #下载依赖包&#xA;        右键 -&amp;gt; properties -&amp;gt; project facets -&amp;gt; convert to faceted from&#xA;                选中 dynamic web module&#xA;                选中 java&#xA;                右边选择runtime&#xA;                下面further configuration available&#xA;                        content directory: src/main/webapp&#xA;                        勾选generate web.xml&#xA;        右键 -&amp;gt; properties -&amp;gt; deployment assembly中配置文件发布路径&#xA;                去掉test的目录&#xA;                添加发布包maven dependencies&#xA;方案&#xA;    修改项目名&#xA;            o-&amp;gt; 修改project名&#xA;            o-&amp;gt; 修改包名与test包名&#xA;            o-&amp;gt; 修改配置文件, 类中的常量, (workspace配置文件[maven项目没有这些文件])                # ctrl + h 全局搜索(替换)&#xA;            o-&amp;gt; mvn clean&#xA;            o-&amp;gt; mvn install&#xA;            o-&amp;gt; preferences -&amp;gt; web project settings -&amp;gt; context root中修改项目名称&#xA;    集成spring&#xA;        pom.xml中添加spring依赖&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;myeclipse&#34;&gt;&#xA;  myEclipse&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#myeclipse&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;假错误（problem view中删掉）&#xA;&#xA;目录结构&#xA;        /Common/中存储的是jar包与配置&#xA;                plugins/存放插件&#xA;                features/存放外观&#xA;        /MyEclipse 10/中&#xA;                dropins/配置自定义插件&#xA;&#xA;调整format一行最大字符数        Java — Code Style — Formatter — Active profile — Edit — Line Wrapping — Maximum line width&#xA;修改，自定义alt + / 模板        包括@anthor 等等        Java — Editor — Templates&#xA;修改编码:window --&amp;gt; General --&amp;gt; Workspace&#xA;                Myeclipse --&amp;gt; files and editors&#xA;忽略校验:右键 --&amp;gt; myeclipse --&amp;gt; exclude from validation&#xA;package Explor 中可以go into  和 up 缩小和扩大显示范围&#xA;&#xA;鼠标右键 --&amp;gt;Run As --&amp;gt; Run Configuration --&amp;gt; Arguments --&amp;gt; Program Arguments 设置运行传入的参数 &#xA;&#xA;new 中可以生成测试文件&#xA;&#xA;window --&amp;gt; preferences --&amp;gt; MyEclipse --&amp;gt; validation --&amp;gt; disableAll 取消验证&#xA;&#xA;Package Explorer中什么也不显示（进入了已经关闭的包时） --&amp;gt; navigator --&amp;gt; open project&#xA;                                                                                        或者{workspaces}\.metadata\.plugins\org.eclipse.ui.workbench\workbench.xml文件中&#xA;                                                                                        搜索&amp;lt;input factoryID=&amp;quot;org.eclipse.ui.internal.model.ResourceFactory&amp;quot;，把path的值改为&amp;quot;/&amp;quot;&#xA;        其它原因：window --&amp;gt; reset perspective&#xA;                        Package Explorer 上的倒三角中：deselect working set&#xA;struts2配置myeclipse编写xml文件时的提示&#xA;        ## 约束文件的相对路径：struts-2.3.15.1\src\core\src\main\resources\struts2.0.dtd&#xA;        ## xml文件中声明的url：http://struts.apache.org/dtds/struts-2.0.dtd&#xA;        ## myeclipse中：window        --&amp;gt; Preferences --&amp;gt; MyEclipse --&amp;gt; XML --&amp;gt; XML Catalog --&amp;gt; XML Catalog Entries 选中User Specified Entries --&amp;gt; 点击add&#xA;        ## Location中关联源码路径,Key Type 选择 URI,Key中写xml文件中声明的url &#xA;改变Package Explorer Vier中包的为分层显示方式：&#xA;        Package Explorer 视窗中 --&amp;gt; 点击倒三角 --&amp;gt; Package Presentation --&amp;gt; hierarchical ：&#xA;        &#xA;导入war文件：&#xA;        新建webPorject --&amp;gt; File===》import==》General中选择Archive File --&amp;gt; Form archive file中选择要导入的项目.war -&amp;gt; 导入&#xA;&#xA;ctrl + shift + t 关联源码快捷键&#xA;                                                &#xA;设置字体：eclipse preference--&amp;gt;Colors and Fonts--&amp;gt;basic--&amp;gt;Text Font--&amp;gt;edit&#xA;&#xA;导入dtd/xsd约束文件:window -&amp;gt; preferences -&amp;gt; XmlCatalog -&amp;gt; add&#xA;        dtd直接导入文件就可以了,xsd要在添加时key的选项中补上文件名&#xA;        &#xA;自定义jar包library目录&#xA;        项目 右键:building path -&amp;gt; addLiber-&amp;gt;user liber配置userLibery右键:building path -&amp;gt; addLiber-&amp;gt;user liber配置userLibery&#xA;                只是作了外部的引用,workspace中没有包，但是别人导入时会搜索同名的userLibery自动进行配置&#xA;改javaee版本    &#xA;        1.修改项目中的javaee包&#xA;        2.项目工程目录/settings/org.eclipse.wst.common.project.facet.core.xml/中修改javaee版本&#xA;&#xA;在线安装svn&#xA;        Help -&amp;gt; install from site(Myeclipse2013) -&amp;gt; add -&amp;gt; url=http://subclipse.tigris.org/update_1.6.x&#xA;        不选择 Subclipse -&amp;gt; Subclipse Integration for Mylyn 3.x , 其它全选&#xA;&#xA;在线安装mylyn&#xA;        同上，url(Myeclipse2013):http://download.eclipse.org/mylyn/snapshots/weekly&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;插件-1&#34;&gt;&#xA;  插件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%92%e4%bb%b6-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;myeclipse 2013 安装svn&#xA;        help -&amp;gt; Install from Site -&amp;gt;add&#xA;                name : Svn&#xA;                Location : http://subclipse.tigris.org/update_1.6.x&#xA;                        或&#xA;                        http://subclipse.tigris.org/update&#xA;        下一步&#xA;                不要选择Subclipse选项下的Subclipse Integration for Mylyn 3.x(Optional)&#xA;        一直下一步&#xA;&#xA;本地安装svn插件&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;快捷键&#34;&gt;&#xA;  快捷键&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e6%8d%b7%e9%94%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;alt /&#xA;ctrl shift f&#xA;    # 代码格式化&#xA;alt enter&#xA;    # 补全提示&#xA;f3&#xA;    # 跳转到声明&#xA;f2 显示类或方法的全限定名&#xA;ctrl + h 多文件搜索        &#xA;alt shift s&#xA;alt shift z :surround with &#xA;ctrl /&#xA;ctrl shift /&#xA;F5 F6 F7&#xA;ctrl alt 上下&#xA;alt 上下&#xA;alt shift x j ：运行&#xA;ctrl 1 显示错误红线的处理方法&#xA;ctrl t 显示继承关系&#xA;ctrl 左右 跳过单词&#xA;ctrl 上下滚屏&#xA;ctrl l 定位&#xA;输入时直接点分号就可以跳到最后&#xA;ctrl alt / 写过内容补全&#xA;字符串最后敲回车可以自动加入 + &#39;\n&#39; &amp;quot;&amp;quot;&#xA;ctrl shift T  openType 查找类关系&#xA;ctrl shift R  查找资源文件&#xA;alt shift A 矩形操作&#xA;alt 左右 返回代码上一层，进入代码下一层&#xA;ctrl o 获得outline&#xA;// TODO 标签&#xA;alt + shift + R 重构中的重命名&#xA;ctrl + shift + o 全局导包&#xA;ctrl + shift + m 局部导包&#xA;ctrl + shift + X  改为大写&#xA;ctrl + shift + g  查看方法被谁调用&#xA;ctrl + shift + h  输入类名，查看类继承关系&#xA;命令补全：syso main        alt + /&#xA;代码抽取:        alt + shift + M&#xA;代码自动生成get set                alt + shift +s&#xA;代码自动生成 — 重写equals hashCode  alt + shift + s&#xA;    &#xA;&#xA;Ctrl+1 快速修复(最经典的快捷键,就不用多说了)&#xA;Ctrl+D: 删除当前行 &#xA;Ctrl+Alt+↓ 复制当前行到下一行(复制增加)&#xA;Ctrl+Alt+↑ 复制当前行到上一行(复制增加)&#xA;Alt+↓ 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)&#xA;Alt+↑ 当前行和上面一行交互位置(同上)&#xA;Alt+← 前一个编辑的页面&#xA;Alt+→ 下一个编辑的页面(当然是针对上面那条来说了)&#xA;Alt+Enter 显示当前选择资源(工程,or 文件 or文件)的属性&#xA;Shift+Enter 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)&#xA;Shift+Ctrl+Enter 在当前行插入空行(原理同上条)&#xA;Ctrl+Q 定位到最后编辑的地方&#xA;Ctrl+L 定位在某行 (对于程序超过100的人就有福音了)&#xA;Ctrl+M 最大化当前的Edit或View (再按则反之)&#xA;Ctrl+/ 注释当前行,再按则取消注释&#xA;Ctrl+O 快速显示 OutLine&#xA;Ctrl+T 快速显示当前类的继承结构&#xA;Ctrl+W 关闭当前Editer&#xA;Ctrl+K 参照选中的Word快速定位到下一个&#xA;Ctrl+E 快速显示当前Editer的下拉列表(如果当前页面没有显示的用黑体表示)&#xA;Ctrl+/(小键盘) 折叠当前类中的所有代码&#xA;Ctrl+×(小键盘) 展开当前类中的所有代码&#xA;Ctrl+Space 代码助手完成一些代码的插入(但一般和输入法有冲突,可以修改输入法的热键,也可以暂用&#xA;&#xA;Alt+/来代替)&#xA;Ctrl+Shift+E 显示管理当前打开的所有的View的管理器(可以选择关闭,激活等操作)&#xA;Ctrl+J 正向增量查找(按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没&#xA;&#xA;有,则在stutes line中显示没有找到了,查一个单词时,特别实用,这个功能Idea两年前就有了)&#xA;Ctrl+Shift+J 反向增量查找(和上条相同,只不过是从后往前查)&#xA;Ctrl+Shift+F4 关闭所有打开的Editer&#xA;Ctrl+Shift+X 把当前选中的文本全部变味小写&#xA;Ctrl+Shift+Y 把当前选中的文本全部变为小写&#xA;Ctrl+Shift+F 格式化当前代码&#xA;Ctrl+Shift+P 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到前面,则反&#xA;&#xA;之)&#xA;下面的快捷键是重构里面常用的,本人就自己喜欢且常用的整理一下(注:一般重构的快捷键都是Alt+Shift&#xA;&#xA;开头的了)&#xA;Alt+Shift+R 重命名 (是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力&#xA;&#xA;)&#xA;Alt+Shift+M 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用)&#xA;Alt+Shift+C 修改函数结构(比较实用,有N个函数调用了这个方法,修改一次搞定)&#xA;Alt+Shift+L 抽取本地变量( 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候)&#xA;Alt+Shift+F 把Class中的local变量变为field变量 (比较实用的功能)&#xA;Alt+Shift+I 合并变量(可能这样说有点不妥Inline)&#xA;Alt+Shift+V 移动函数和变量(不怎么常用)&#xA;Alt+Shift+Z 重构的后悔药(Undo)&#xA;编辑&#xA;作用域 功能 快捷键 &#xA;全局 查找并替换 Ctrl+F &#xA;文本编辑器 查找上一个 Ctrl+Shift+K &#xA;文本编辑器 查找下一个 Ctrl+K &#xA;全局 撤销 Ctrl+Z &#xA;全局 复制 Ctrl+C &#xA;全局 恢复上一个选择 Alt+Shift+↓ &#xA;全局 剪切 Ctrl+X &#xA;全局 快速修正 Ctrl1+1 &#xA;全局 内容辅助 Alt+/ &#xA;全局 全部选中 Ctrl+A &#xA;全局 删除 Delete &#xA;全局 上下文信息 Alt+？&#xA;Alt+Shift+?&#xA;Ctrl+Shift+Space &#xA;java编辑器 显示工具提示描述 F2&#xA;java编辑器 选择封装元素 Alt+Shift+↑&#xA;java编辑器 选择上一个元素 Alt+Shift+←&#xA;java编辑器 选择下一个元素 Alt+Shift+→&#xA;文本编辑器 增量查找 Ctrl+J &#xA;文本编辑器 增量逆向查找 Ctrl+Shift+J &#xA;全局 粘贴 Ctrl+V &#xA;全局 重做 Ctrl+Y &#xA;&#xA;查看&#xA;作用域 功能 快捷键 &#xA;全局 放大 Ctrl+= &#xA;全局 缩小 Ctrl+- &#xA;&#xA;窗口&#xA;作用域 功能 快捷键 &#xA;全局 激活编辑器 F12 &#xA;全局 切换编辑器 Ctrl+Shift+W &#xA;全局 上一个编辑器 Ctrl+Shift+F6 &#xA;全局 上一个视图 Ctrl+Shift+F7 &#xA;全局 上一个透视图 Ctrl+Shift+F8 &#xA;全局 下一个编辑器 Ctrl+F6 &#xA;全局 下一个视图 Ctrl+F7 &#xA;全局 下一个透视图 Ctrl+F8 &#xA;文本编辑器 显示标尺上下文菜单 Ctrl+W &#xA;全局 显示视图菜单 Ctrl+F10 &#xA;全局 显示系统菜单 Alt+- &#xA;&#xA;导航&#xA;作用域 功能 快捷键 &#xA;ｊａｖａ编辑器 打开结构 Ctrl+F3 &#xA;全局 打开类型 Ctrl+Shift+T &#xA;全局 打开类型层次结构 F4 &#xA;全局 打开外部ｊａｖａdoc Shift+F2&#xA;全局 打开资源 Ctrl+Shift+R &#xA;全局 后退历史记录 Alt+← &#xA;全局 前进历史记录 Alt+→ &#xA;全局 上一个 Ctrl+, &#xA;全局 下一个 Ctrl+. &#xA;ｊａｖａ编辑器 显示大纲 Ctrl+O &#xA;全局 在层次结构中打开类型 Ctrl+Shift+H &#xA;全局 转至匹配的括号 Ctrl+Shift+P &#xA;全局 转至上一个编辑位置 Ctrl+Q &#xA;ｊａｖａ编辑器 转至上一个成员 Ctrl+Shift+↑ &#xA;ｊａｖａ编辑器 转至下一个成员 Ctrl+Shift+↓ &#xA;文本编辑器 转至行 Ctrl+L &#xA;&#xA;搜索&#xA;作用域 功能 快捷键 &#xA;全局 出现在文件中 Ctrl+Shift+U &#xA;全局 打开搜索对话框 Ctrl+H &#xA;全局 工作区中的声明 Ctrl+G &#xA;全局 工作区中的引用 Ctrl+Shift+G &#xA;&#xA;文本编辑&#xA;作用域 功能 快捷键 &#xA;文本编辑器 改写切换 Insert &#xA;文本编辑器 上滚行 Ctrl+↑ &#xA;文本编辑器 下滚行 Ctrl+↓ &#xA;&#xA;文件&#xA;作用域 功能 快捷键 &#xA;全局 保存 Ctrl+X &#xA;Ctrl+S &#xA;全局 打印 Ctrl+P &#xA;全局 关闭 Ctrl+F4 &#xA;全局 全部保存 Ctrl+Shift+S &#xA;全局 全部关闭 Ctrl+Shift+F4 &#xA;全局 属性 Alt+Enter &#xA;全局 新建 Ctrl+N &#xA;&#xA;项目&#xA;作用域 功能 快捷键 &#xA;全局 全部构建 Ctrl+B &#xA;&#xA;源代码&#xA;作用域 功能 快捷键 &#xA;java编辑器 格式化 Ctrl+Shift+F&#xA;java编辑器 取消注释 Ctrl+\&#xA;java编辑器 注释 Ctrl+/&#xA;java编辑器 添加导入 Ctrl+Shift+M&#xA;java编辑器 组织导入 Ctrl+Shift+O&#xA;java编辑器 使用try/catch块来包围 未设置，太常用了，所以在这里列出,建议自己设置。&#xA;也可以使用Ctrl+1自动修正。 &#xA;&#xA;运行&#xA;作用域 功能 快捷键 &#xA;全局 单步返回 F7 &#xA;全局 单步跳过 F6 &#xA;全局 单步跳入 F5 &#xA;全局 单步跳入选择 Ctrl+F5 &#xA;全局 调试上次启动 F11 &#xA;全局 继续 F8 &#xA;全局 使用过滤器单步执行 Shift+F5 &#xA;全局 添加/去除断点 Ctrl+Shift+B &#xA;全局 显示 Ctrl+D &#xA;全局 运行上次启动 Ctrl+F11 &#xA;全局 运行至行 Ctrl+R &#xA;全局 执行 Ctrl+U &#xA;&#xA;重构&#xA;作用域 功能 快捷键 &#xA;全局 撤销重构 Alt+Shift+Z &#xA;全局 抽取方法 Alt+Shift+M &#xA;全局 抽取局部变量 Alt+Shift+L &#xA;全局 内联 Alt+Shift+I &#xA;全局 移动 Alt+Shift+V &#xA;全局 重命名 Alt+Shift+R &#xA;全局 重做 Alt+Shift+Y &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;jrebel&#34;&gt;&#xA;  jrebel&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jrebel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;        热加载&#xA;使用:&#xA;        myeclipse根目录下配置自定义 插件&#xA;        window -&amp;gt; preferences -&amp;gt; JRebel中关联jar包，设定自动部署时间&#xA;    window -&amp;gt; preferences -&amp;gt; services -&amp;gt; tomcat -&amp;gt; tomcat6(可以配置是否启用jrebel和打印jrebel的日志)-&amp;gt;jdk 加上资源分配参数与tomcat要加载的jar包:&#xA;                        -noverify -javaagent:D:\(修改为自己的目录)\jrebel.jar -Xmx512M -Xms512M -XX:MaxPermSize=1024m&#xA;        项目右键jrebel生成reble.xml,其中配置rebel要管理的项目在tomcat中的路径&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>运维</title>
      <link>https://ukeate.com/docs/tool/ops/</link>
      <pubDate>Wed, 10 Oct 2018 17:33:07 +0800</pubDate>
      <guid>https://ukeate.com/docs/tool/ops/</guid>
      <description>&lt;h1 id=&#34;持续集成cicd&#34;&gt;&#xA;  持续集成(CI/CD)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8c%81%e7%bb%ad%e9%9b%86%e6%88%90cicd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Continuous Integration(持续集成), Continuous Delivery(持续部署)&#xA;Jenkins&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;容器&#34;&gt;&#xA;  容器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%b9%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker&#xA;containerd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;虚拟化&#34;&gt;&#xA;  虚拟化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%99%9a%e6%8b%9f%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;vagrant&#xA;    # 自动化虚拟机配置&#xA;parallels desktop&#xA;    # 苹果&#xA;xen&#xA;gnome boxes&#xA;hyper-v&#xA;    # 微软&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;kvm&#34;&gt;&#xA;  KVM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kvm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    kernel-based virtual machine, 使用linux自身的调度器进行管理,所以代码较少&#xA;        # 又叫qemu-system或qemu-kvm&#xA;    虚拟化需要硬件支持(如 intel VT技术或AMD V技术)，是基于硬件的完全虚拟化&#xA;原理&#xA;    包含一个可加载的内核模块kvm.ko, 由于集成在linux内核中，比其他虚拟机软件高效&#xA;使用&#xA;    检查系统是否支持硬件虚拟化&#xA;        egrep &#39;(vmx|svm)&#39; --color=always /proc/cpuinfo&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;vmware&#34;&gt;&#xA;  VMware&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#vmware&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;安装&#xA;    安装后会创建两个虚拟网卡&#xA;设置&#xA;    edit -&amp;gt; preferences -&amp;gt; Hot Keys 设置退出快捷键&#xA;网络连接方式&#xA;    1.vm9自带的virtual network editor中选择桥接到有线网卡&#xA;    2.vm -&amp;gt; setting -&amp;gt; network adapter选项设置&#xA;        bridged（桥接）:与主机平等，可以设置为同一个网段相互访问&#xA;        nat:通过虚拟网卡连接主机，共享网络&#xA;        host-only:单机模式&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;virtualbox&#34;&gt;&#xA;  VirtualBox&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#virtualbox&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;网络连接&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;NAT&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Bridged Adapter&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Internal&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Host-only Adapter&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;虚拟机-&amp;gt;主机&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;默认不能，需设置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;主机-&amp;gt;虚拟机&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;默认不能，需设置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;虚拟机-&amp;gt;其他主机&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;默认不能，需设置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;其他主机-&amp;gt;虚拟机&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;默认不能，需设置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;虚拟机间&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;同网络可以&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;方案&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;linux安装增强iso&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;iso位置&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;/usr/share/virtualbox&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;编译环境&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;kernel-devel&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;gcc&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;pre&gt;&lt;code&gt;    共享剪切板与拖拽文件&#xA;        虚拟机启动后devices下设置&#xA;    共享文件夹&#xA;        linux下挂载&#xA;            mount -t vboxsf 共享名 /mnt/share&#xA;        windows下挂载&#xA;            我的电脑 右键 映射网络驱动器&#xA;    clone&#xA;        clone 时选择更新mac,并在虚拟机中网络连接设置中重写mac与ip&#xA;        配置主机间ssh免登录，远程ssh与所有主机免登录&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;paas&#34;&gt;&#xA;  PaaS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#paas&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;OpenStack&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;devops&#34;&gt;&#xA;  DevOps&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#devops&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;自动化运维&#34;&gt;&#xA;  自动化运维&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e5%8c%96%e8%bf%90%e7%bb%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;tty.js&#xA;    # 浏览器运行命令&#xA;jenkins&#xA;    # java实现的持续集成工具&#xA;saltstack&#xA;    # 部署, 自动化运维&#xA;puppet&#xA;    # 自动化运维&#xA;selenium&#xA;    # 自动化运维&#xA;chef&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;ansible&#34;&gt;&#xA;  Ansible&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ansible&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# python实现的自动化部署工具&#xA;模式&#xA;    ad-hoc              # 批量命令&#xA;    playbook            # 任务编排，执行yml文件&#xA;安装&#xA;    pip install ansible&#xA;配置&#xA;    优先级&#xA;        export ANSIBLE_CONFIG=/etc/ansible.cfg&#xA;        ~/.ansible.cfg&#xA;        /etc/ansible.cfg&#xA;    ansible.cfg&#xA;        inventory = /etc/ansible/hosts&#xA;        library = /usr/share/ansible&#xA;        forks = 5&#xA;        sudo_user = root&#xA;        remote_port = 22&#xA;        host_key_checking = False&#xA;        timeout = 60&#xA;        log_path = /var/log/ansible.log&#xA;    hosts&#xA;        [mysql_test]&#xA;        192.168.0.1&#xA;        192.168.0.2&#xA;命令&#xA;    ansible&#xA;        通配符&#xA;            10.1.1.113&#xA;            &#39;*&#39;&#xA;            all&#xA;        -m&#xA;            command                     # 执行命令&#xA;                -a &#39;uptime&#39;&#xA;            file                        # 操作文件&#xA;                -a &amp;quot;dest=/tmp/t.sh mode=755 owner=root group=root&amp;quot;                  # 改属性&#xA;                -a &amp;quot;src=https://ukeate.com/etc/resolv.conf dest=/tmp/resolv.conf state=link&amp;quot;          # 软链接&#xA;                -a &amp;quot;path=/tmp/resolv.conf state=absent&amp;quot;                             # 删除软连接&#xA;            copy&#xA;                -a &amp;quot;src=https://ukeate.com/a.cfg dest=/tmp/a.cfg owner=root group=root mode=0644&amp;quot;&#xA;            cron                        # 定时任务&#xA;                -a &#39;name=&amp;quot;custom job&amp;quot; minute=*/3 hour=* day=* month=* weekday=* job=&amp;quot;/usr/sbin/ntpdate 172.16.254.139&amp;quot;&#39;&#xA;            group                       # 操作组&#xA;                -a &#39;gid=2017 name=a&#39;    # 创建组&#xA;            user                        # 操作用户&#xA;                -a &#39;name=aaa groups=aaa state=present&#39;          # 创建用户&#xA;                -a &#39;name=aaa groups=aaa remove=yes&#39;             # 删除用户&#xA;            yum&#xA;                -a &amp;quot;state=present name=httpd&amp;quot;&#xA;            service&#xA;                -a &#39;name=httpd state=started enabled=yes&#39;       # 开机启动&#xA;            ping&#xA;            script&#xA;                -a &#39;/root/test.sh&#39;&#xA;            shell&#xA;                -a &#39;ps aux|grep zabbix&#39;&#xA;            raw                         # 同shell&#xA;            get_url&#xA;                -a &#39;url=http://10.1.1.116/a.ico dest=/tmp&#39;      # 下载&#xA;            synchronize&#xA;                -a &#39;src=https://ukeate.com/root/a dest=/tmp/ compress=yes&#39;        # 推送&#xA;&#xA;        o-&amp;gt; 例子&#xA;        ansible &#39;*&#39; -m command -a &#39;uptime&#39;&#xA;    ansible-doc         # 文档&#xA;    ansible-galaxy      # 上传/下载模块&#xA;    ansible-playbook    # 任务编排&#xA;    ansible-pull        # 拉配置&#xA;    ansible-vault       # 文件加密&#xA;    ansible-console     # REPL&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;资源管理&#34;&gt;&#xA;  资源管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b5%84%e6%ba%90%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;文档管理&#34;&gt;&#xA;  文档管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%87%e6%a1%a3%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Confluence&#xA;Git Wiki&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;版本&#34;&gt;&#xA;  版本&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%89%88%e6%9c%ac&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;mercurial&#xA;    # 简称hg，分布式版本控制系统，比git好&#xA;clearQuest&#xA;    # IBM Rational提供的缺陷及变更管理工具。它对软件缺陷或功能特性等任务记录提供跟踪管理。提供了查询定制和多种图表报表。&#xA;clearcase&#xA;    # 配置管理的工具，只是SCM管理工具其中的一种。是RATIONAL公司开发的配置管理工具&#xA;spm&#xA;    # 构建sea.js项目&#xA;bower&#xA;    # 构建前端&#xA;redmine&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;gradle&#34;&gt;&#xA;  Gradle&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gradle&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    基于dsl(Groovy)声明项目自动化构建&#xA;环境&#xA;命令&#xA;    gradle&#xA;        -q                                      # --quiet, 只显示error&#xA;        init&#xA;            --type pom                          # 转换maven项目&#xA;        wrapper                                 # 生成可独立运行的打包脚本gradlew和gradlew.bat&#xA;配置&#xA;    build.gradle&#xA;        task hello {&#xA;            doLast {&#xA;                println &#39;Hello world!&#39;&#xA;            }&#xA;        }&#xA;        task hello &amp;lt;&amp;lt; {&#xA;            println &#39;Hello world!&#39;&#xA;        }&#xA;&#xA;        buildscript{}&#xA;        allprojects{}&#xA;        subprojects{}&#xA;&#xA;&#xA;    settings.gradle&#xA;        rootProject.name = &#39;choice-scm&#39;&#xA;        include &#39;choice-scm-dao&#39;&#xA;&#xA;&#xA;    gradle.properties&#xA;        org.gradle.parallel=true                # 开启并行编译&#xA;        org.gradle.daemon=true                  # 守护线程，在第一次编译时开线程并保持&#xA;        org.gradle.configureondemand=true       # 用新的孵化模式，加快编译&#xA;        org.gradle.caching=true                 # 启用缓存&#xA;        org.gradle.warning.mode=none            # 屏蔽warning&#xA;        org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;git&#34;&gt;&#xA;  Git&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#git&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;目录结构&#xA;    .git&#xA;        branches&#xA;        config  # 存放版本库git地址&#xA;规定&#xA;    HEAD&#xA;        # HEAD的版本号, HEAD^^ 表示HEAD之前两个的版本, HEAD~n 表示之前n个版本&#xA;    buffered stage branch head&#xA;        # buffered表示当前修改所在的版本，stage是buffered中文件add之后到的版本，branch是stage commit后到的分支(版本)，head是远程仓库的最新版本&#xA;工作流程&#xA;    fork + pull / merge request 更新代码&#xA;    commit message, pr messsage 提交说明&#xA;        pr是功能展示，前面加&amp;quot;WIP:&amp;quot;&#xA;    user.name, user.email用公司的&#xA;    pr必需有人review, assign到人, 推动review&#xA;    pr不要大&#xA;命令&#xA;    git [command] --help&#xA;    git help submodule&#xA;    设置&#xA;        config&#xA;            --global http.proxy &#39;http://127.0.0.1:8123&#39;&#xA;    仓库&#xA;        clone&#xA;        checkout                    # 切换到分支。检出原有文件替换&#xA;            -b                      # 创建并切换到分支&#xA;        branch                      # 创建并切换到分支&#xA;            -r                      # 指定操作远程分支&#xA;                -r origin/dev&#xA;            -a                      # 本地远程所有分支&#xA;            dev ef71                # 从ef71创建分支dev&#xA;            dev&#xA;            -d dev                  # 删除&#xA;            -D dev                  # 强制删除&#xA;        remote&#xA;            remove origin&#xA;            show                    # 显示仓库&#xA;            prune origin            # 删除远程没有而本地缓存的远程分支&#xA;            add origin git@bitbucket.org:outrun/www2.git&#xA;                    # 设置仓库&#xA;            set-url origin git@github.com:outrun/jeky&#xA;                    # 设置仓库url&#xA;        fetch                       # pull加merge&#xA;        pull origin master&#xA;            --allow-unrelated-histories&#xA;                # 本地有已存文件时，强行pull并检查冲突&#xA;        merge dev                   # 合并dev到当前分支&#xA;            --squash dev-bak        # dev-bak改动写到stash&#xA;        push origin master&#xA;            -u origin master        # 设定git push 默认参数&#xA;            origin :dev&#xA;                # origin +dev:dev&#xA;                # 强制替换掉原来版本&#xA;        commit                      # stage 提交到branch&#xA;            -a                      # 提交删改，忽略增加&#xA;            -m                      # 注释&#xA;            --amend                 # 合并到上次commit&#xA;        revert&#xA;            git commit -am &#39;revert&#39;&#xA;            git revert revertid1 取消上次revert&#xA;                # ideaIDE操作 - local history - revert&#xA;            示例&#xA;                revert  -m 1 ea1    # 舍弃最近一次commit&#xA;        rebase master               # 相当于当前改动代码之前merge master&#xA;        reset&#xA;            --hard ea1              # 回退&#xA;        stash                       # 暂存buffered&#xA;            list                    # 显示stash&#xA;            drop                    # 删除暂存&#xA;            pop                     # 恢复并删除暂存&#xA;            apply stash@{0}         # 恢复暂存&#xA;        tag&#xA;            -a tag1                 # 添加tag1&#xA;            -m &#39;a&#39;                  # 注释&#xA;            -d tag1                 # 删除tag1&#xA;            示例&#xA;                git tag -a v1.0.1  -m &#39;a&#39; e67&#xA;        show tag1                   # 查看tag1的信息&#xA;    文件&#xA;        add&#xA;            -A                      # 递归&#xA;        mv a b                      # 重命名&#xA;        rm                          # buffered和stage中都删除&#xA;            --cached                # 只删除git stage中文件, 不实际删 &#xA;        log                         # HEAD到指定版本号之前的log&#xA;            --oneline               # 每个记录显示一行&#xA;            --stat                  # 文件名差异&#xA;            -p                      # 细节差异&#xA;            -2                      # 文件最近2次差异&#xA;        reflog                      # 包括reset前的版本号&#xA;        diff master dev             # 对比分支差异，可指定到文件。默认对比buffered和stage的差异&#xA;            --cached                # 对比stage和branch的差异&#xA;        ls-files&#xA;            -u                      # 显示冲突文件&#xA;            -s                      # 显示标记为冲突已解决的文件&#xA;            --stage                 # stage中的文件&#xA;        submodule&#xA;            init                    # 初始化本地配置文件&#xA;            update&#xA;                --init --recursive  # 同步项目中的submodule&#xA;设置&#xA;    .gitignore&#xA;&#xA;    .git/config&#xA;&#xA;    ~/.gitconfig&#xA;        [commit]&#xA;        template=/t.txt&#xA;            # 每次commit会打开模板&#xA;    代理&#xA;        git config --global https.proxy http://127.0.0.1:1080&#xA;        git config --global https.proxy https://127.0.0.1:1080&#xA;        git config --global http.proxy &#39;socks5://127.0.0.1:1080&#39; &#xA;        git config --global https.proxy &#39;socks5://127.0.0.1:1080&#39;&#xA;&#xA;        git config --global --unset http.proxy&#xA;        git config --global --unset https.proxy&#xA;子模块&#xA;    .gitmodules&#xA;        [submodule &amp;quot;a&amp;quot;]&#xA;            path = a&#xA;            url = ssh://a.git&#xA;    git submodule update --init --recursive  &#xA;方案&#xA;    回退commit&#xA;        git reset --hard ea1&#xA;            # 进行回退&#xA;        git push -f&#xA;            # 强制提交&#xA;        git clean -xdf&#xA;            # 一般配合git reset使用, 清除已有的改动&#xA;    补充commit&#xA;        git commit --amend&#xA;        git push origin +a:a&#xA;    合并commit&#xA;        git rebase -i cf7e875   # 合并Head到cf7e875 commit&#xA;        修改rebase记录&#xA;            pick xxxx&#xA;            s yyyy&#xA;            s zzzz&#xA;        git status              # 查看冲突&#xA;        git add .               # 解决冲突提交&#xA;        git rebase --continue&#xA;        修改commit记录&#xA;    远程回退&#xA;        git revert id&#xA;    忽略文件&#xA;        git add 逆操作&#xA;            git rm --cached a&#xA;        远程保留，忽略本地&#xA;            git update-index --assume-unchanged a&#xA;            恢复 git update-index --no-assume-unchanged a&#xA;        远程删除，忽略本地&#xA;            git rm --cached a&#xA;            恢复 git add -A a&#xA;        远程不论，忽略本地&#xA;            .gitignore&#xA;    删本地分支&#xA;        git branch -D test&#xA;    删除远程分支&#xA;        git push origin --delete test&#xA;        或&#xA;            git branch -r -d origin/test&#xA;            git push origin :test&#xA;    恢复历史版本文件&#xA;        git reset ba5798aff7778c95252b9e01e924dddb5811bcd7 courseModel.js&#xA;        git checkout -- courseModel.js&#xA;        git push origin +master:master                # 提交回退版本到远程&#xA;    查看修改的内容&#xA;        git show&#xA;            # 与上个commit 比较&#xA;        git whatchanged&#xA;        git log --stat --date=relative&#xA;    删除历史&#xA;        git filter-branch --force --index-filter &#39;git rm -r --cached --ignore-unmatch .idea&#39; --prune-empty --tag-name-filter cat -- --all&#xA;        git push origin main --force&#xA;        rm -rf .git/refs/original/&#xA;        git reflog expire --expire=now --all&#xA;        git gc --prune=now&#xA;        git gc --aggressive --prune=now&#xA;    合并commit历史&#xA;        git branch test-bak&#xA;        git reset --hard ea1&#xA;        git merge --squash test-bak&#xA;        git push origin test -f&#xA;        git branch -D test-bak&#xA;    打tag&#xA;        git tag                     # git tag -l &#39;v1.*&#39; 通配查找&#xA;        git tag -a v1.0 -m &amp;quot;a&amp;quot;      # git tag -a v1.0 ba1 给commit打标签&#xA;        git tag -a v1.0 -m &amp;quot;a&amp;quot; ea1  # 指定commit&#xA;        git show v1.0&#xA;        git checkout v1.0&#xA;        git push origin v1.0        # git push origin -tags 将本地所有标签提交&#xA;        git tag -d v1.0&#xA;        git push origin --delete tag v1.0 &#xA;            # git push origin :refs/tags/v1.0c&#xA;    查tag的commit&#xA;        git show 1.4.1&#xA;        git log --pretty=oneline 1.4.0 1.4.1&#xA;    fork跨网站git&#xA;        git remote add upstream git@github.com:xuyuadmin/xxljob.git&#xA;        git fetch upstream&#xA;        git merge upstream/master --allow-unrelated-histories&#xA;    文件损坏错误error object file is empty&#xA;        find .git/objects/ -type f -empty | xargs rm&#xA;        git fetch -p&#xA;        git fsck --full&#xA;    统计某人代码&#xA;        git log --author=&amp;quot;$(git config --get user.name)&amp;quot; --pretty=tformat: --numstat | gawk &#39;{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf &amp;quot;added lines: %s removed lines : %s total lines: %s\n&amp;quot;,add,subs,loc }&#39; -&#xA;    统计所有人代码&#xA;        git log --format=&#39;%aN&#39; | sort -u | while read name; do echo -en &amp;quot;$name\t&amp;quot;; git log --author=&amp;quot;$name&amp;quot; --pretty=tformat: --numstat | awk &#39;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &amp;quot;added lines: %s, removed lines: %s, total lines: %s\n&amp;quot;, add, subs, loc }&#39; -; done&#xA;    共添加或修改行数&#xA;        git log --stat|perl -ne &#39;END { print $c } $c += $1 if /(\d+) insertions/&#39;&#xA;    pr&#xA;        介绍&#xA;            fork与pull request&#xA;&#xA;        fork后本地&#xA;            git clone git@github.com:chenduo/auth.git&#xA;            git remote add upstream git@github.com:Meiqia/auth.git&#xA;            git merge upstream/main &#xA;            git push origin main&#xA;        本地合并更新&#xA;            git checkout master&#xA;            git fetch upstream&#xA;                # fetch远程仓库&#xA;            git rebase upstream/master&#xA;                # 合并远程master&#xA;            git push&#xA;            git checkout branch1&#xA;            git rebase master&#xA;        pr追加&#xA;            git commit --amend&#xA;                # 更新本地的本次commit,不产生新的commit&#xA;            git push origin +branch1:branch1&#xA;                # 使用本地的commit覆盖远程分支的有问题的commit&#xA;        处理pr&#xA;            git fetch origin&#xA;            git checkout -b pr1 origin/pr1&#xA;            git checkout master&#xA;            git merge --no-ff pr1&#xA;            git reset --hard&#xA;            git revert -m 1 ea1&#xA;                # 舍弃pr&#xA;            git commit -am &#39;revert&#39;&#xA;            git revert revertid1 取消上次revert&#xA;                # intellji - local history - revert&#xA;            git push origin master&#xA;    开发&#xA;        提交&#xA;            git pull eoecn dev&#xA;                # 等于git fetch加git merge&#xA;            git diff&#xA;                # buffer与HEAD的差异(不包括新建文件)&#xA;            git add -A .&#xA;                # 添加到stage&#xA;            git status&#xA;                # stage与HEAD的差异&#xA;            git diff --cached/--stage&#xA;                # stage与HEAD的详细差异&#xA;            git diff HEAD&#xA;                # buffer, stage与HEAD的详细差异&#xA;            git commit -am &#39;a&#39;&#xA;            git push origin dev&#xA;            网站上点pull request&#xA;    代码审查&#xA;        git blame -L 60,60 [filename]&#xA;        git blame -L 60,60 --reverse 5534e1b4b..HEAD [filename]      &#xA;            # 版本范围内某行代码提交记录&#xA;        git show [commit id]&#xA;&#xA;github&#xA;    ssh -T git@github.com&#xA;        # 检查github ssh是否设置成功&#xA;插件&#xA;    octotree    # 树形显示&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;svn&#34;&gt;&#xA;  SVN&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#svn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;linux下移植的版本控制器&#xA;默认端口: 3690&#xA;## 目录结构&#xA;    conf:配置文件&#xA;    db:数据库&#xA;    hooks:勾子（自定义功能）&#xA;    locks:文件锁&#xA;## 命令&#xA;### 服务器&#xA;    svn --version&#xA;    svnadmin create c:\svn        # 创建仓库&#xA;                                        ## hooks勾子 locks锁 conf db&#xA;    svnserve -h&#xA;    svnserve -d -r c:\svn      # 启动服务(-d是后台运行，windows不支持，需要创建服务)&#xA;                                            ## --listen-port 3691 指定监听端口&#xA;    windows 下注册服务&#xA;                    sc create 服务名 binPath= &amp;quot;d:/suversion/bin/svnserve --service -r c:\svn&amp;quot; displayName= &amp;quot;显示名&amp;quot;&#xA;                        # 注意双引号前面要有空格&#xA;                    sc delete 服务名&#xA;&#xA;    使用多个仓库&#xA;            svnadmin create d:\svn2 创建仓库以后&#xA;            svnserve -d -r d:\svn2 --listen-port 3691        配置用另一个服务端口启动该仓库        # svn默认启动端口是3690&#xA;            svn://192.168.10.3:3691        来访问该仓库&#xA;#### 客户端&#xA;    添加项目&#xA;            svn add test/&#xA;            svn ci -m &amp;quot;first&amp;quot;                # svn commit -m &amp;quot;fisrt&amp;quot;&#xA;                                            ## ci是checkin&#xA;    检出&#xA;            svn checkout svn://192.168.0.2/framework&#xA;    显示所有分支(目录)&#xA;            svn ls svn://192.168.0.2/fr --verbose&#xA;    创建分支&#xA;            svn copy svn://192.168.0.2/repo/trunk/ svn://192.168.0.2/repo/branches/try-sth -m &#39;make branch try-sth&#39;&#xA;                    # 注意trunk后面要有/&#xA;    更换本地分支&#xA;            svn switch svn://192.168.0.2/repo/branches/try-sth&#xA;## 配置&#xA;    conf/svnserve.conf&#xA;            anon-access = read                # 匿名用户权限&#xA;            auth-access = write                # 登录用户权限&#xA;                                    # write权限包括read权限&#xA;                                    ＃ none没有验证无权限(匿名权限)&#xA;            password-db = passwd        # 加载conf/passwd文件（中的用户帐户）&#xA;            authz-db = authz                        ＃开启权限控制&#xA;                    同目录authz文件中配置权限&#xA;                    [/]                               # 对根目录设置权限&#xA;                    * = r                            # 所有人都可读&#xA;                    outrun = rw                # 配置所有版本库只读，outrun可读可写&#xA;                    @admin = rw                # @组名    对组进行引用&#xA;            realm = aa&#xA;                                    # 认证域名称, 本svn路径为 svn://192.168.0.2/aa&#xA;    conf/authz&#xA;&#xA;    conf/passwd&#xA;            [groups]&#xA;                    admin = outrun&#xA;    例子&#xA;        authz&#xA;                [groups]&#xA;                admin = a1, a2&#xA;                [/]&#xA;                @admin = rw&#xA;                a3 = rw&#xA;                * = r&#xA;        passwd&#xA;                [users]&#xA;                a1 = 123&#xA;                a2 = 123&#xA;                a3 = 123&#xA;        svnserve.conf&#xA;                [general]&#xA;                anon-access = none&#xA;                auth-access = write&#xA;                password-db = passwd&#xA;                authz-db = authz&#xA;                realm = trunk&#xA;                force-username-case = none&#xA;## 工具&#xA;    tortoiseSVN&#xA;        下载&#xA;                    右键 svn checkout 选择版本 下载 (show log 查看日志)&#xA;&#xA;            上传&#xA;                    第一次提交 右键 tor.../import&#xA;                    svn://192.168.10.188     # 输入用户名、密码登录&#xA;                    第二次提交 右键 commit&#xA;            还原&#xA;                    右键 tor.../Revert 还原其中的文件&#xA;            多人&#xA;                    右键 svn update ,更新另一个人提交的文件内容&#xA;            新建文件的提交&#xA;                    tor../add 或 commit的时候选择该文件&#xA;                    tor./Repo-browser，浏览仓库&#xA;            加锁文件    # 只有自己在不提交更改的前提下才可以解锁&#xA;            tor../get lock      # 不会改变版本&#xA;                    tor../release lock  # 解锁,但是新下载的工程不可以再解锁，如果删除原工程则无法解锁&#xA;            冲突&#xA;                    当前版本已经有人修改后commit的话提示版本已经过时&#xA;                    update:下载所有版本，右键 tor../edit conflicts -&amp;gt; mark as resolved确定解决&#xA;                    # 避免冲突：减少公共修改时间，重写前更新&#xA;            使用经验&#xA;                    TortoiseSVN -&amp;gt; Setting -&amp;gt; Saved Data 可以清空自动登录&#xA;&#xA;    svn的myeclipse插件：&#xA;                    # eclipse6中不能用，eclipse7每次报错，能用，eclipse8报错一次，能用 eclipse10不报错&#xA;            1.复制插件文件夹features与plugins到/myeclipse 10/dropins/文件夹中&#xA;            2.创建目录/myeclipse 10/my_plugin/svn/&#xA;                            复制插件文件夹features与plugins到/myeclipse 10/my_plugin/svn/文件夹中&#xA;                            /myeclipse 10/dropins/添加svn.link文件 ，内容为:path=my_plugin\\svn                # 这里写相对路径&#xA;            3.使用：重启myeclipse,弹出确认窗口（也可以从window -&amp;gt; show view中找到svn的视图）&#xA;                    项目：右键-&amp;gt;share project 上传项目到svn(bug 第一次只上传空文件夹,再右键Team/提交 时上传项目文件)&#xA;                            再右键就可以对该项目进行一系列的操作了&#xA;                    导入项目：file -&amp;gt; import -&amp;gt; svn&#xA;&#xA;    rapidsvn&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;ant&#34;&gt;&#xA;  Ant&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ant&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;功能&#xA;    js压缩&#xA;    自动发布&#xA;build.xml&#xA;    示例&#xA;    &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&#xA;    &amp;lt;project default=&amp;quot;execute&amp;quot;&amp;gt;&#xA;            &amp;lt;target name=&amp;quot;compile&amp;quot;&amp;gt;&#xA;                    &amp;lt;javac destdir=&amp;quot;.&amp;quot; srcdir=&amp;quot;.&amp;quot;/&amp;gt;&#xA;            &amp;lt;/target&amp;gt;&#xA;&#xA;            &amp;lt;target name=&amp;quot;execute&amp;quot; depends=&amp;quot;compile&amp;quot;&amp;gt;&#xA;                    &amp;lt;java classpath=&amp;quot;.&amp;quot; classname=&amp;quot;HelloWorld&amp;quot;/&amp;gt;&#xA;            &amp;lt;/target&amp;gt;&#xA;    &amp;lt;/project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;maven&#34;&gt;&#xA;  Maven&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#maven&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;仓库&#xA;    mvnrepository.com&#xA;依赖范围&#xA;    compile     # 默认,对编译、测试、运行有效&#xA;    test        # 对测试有效&#xA;    runtime     # 对测试和运行有效&#xA;    provided    # 编译和测试有效&#xA;    system      # 本地仓库&#xA;    import&#xA;源&#xA;    阿里云maven: https://maven.aliyun.com/mvn/view&#xA;mvn                                         # 相当于mvn compile&#xA;    全局&#xA;        -version                            # 版本&#xA;        -e                                  # 错误详情&#xA;        help:describe                       # help插件的describe&#xA;            -Dplugin=help                   # 显示help插件的详情&#xA;            -Dfull                          # 显示完整参数&#xA;        help:effective-pom                  # 显示默认设置&#xA;    生成&#xA;        archetype:create                    # 创建java项目&#xA;            -DgroupId=com.outrun&#xA;            -DartifactId=erp&#xA;            -Dversion=0.0.1-SNAPSHOT&#xA;            -DarchetypeArtifactId=maven-archetype-webapp                            # 指定模板为webapp&#xA;        archetype:generate                  # 向导创建项目&#xA;        site                                # 产生html文档&#xA;        source:jar                          # 源码打包&#xA;        generate-sources                    # 生成源码, 如xdoclet&#xA;        eclipse:eclipse                     # 生成或转化成eclipse工程&#xA;        eclipse:clean                       # 清除eclipse设置&#xA;        idea:idea                           # 生成idea项目&#xA;        install                             # compile, package后， 保存到本地仓库&#xA;            -X                              # 显示依赖&#xA;            -Dmaven.test.skip=true          # 跳过测试&#xA;            -rf 模块名                       # 从指定模块从新开始&#xA;    执行&#xA;        validate                            # 项目验证&#xA;        verify                              # 验证包&#xA;        compile                             # 编译&#xA;            exec:java                       # 编译完成后，执行java main方法&#xA;        test-compile                        # 编译测试代码&#xA;        test                                # 运行测试&#xA;            -skipping                       # 跳过&#xA;                compile                     # 不编译&#xA;                test-compile                # 不编译测试&#xA;        integration-test                    # 集成测试&#xA;        package                             # 打包&#xA;            -Dmaven.test.skip=true          # 跳过单元测试，不编译&#xA;            -DskipTests                     # 跳过单元测试，编译&#xA;        clean                               # 清除编译&#xA;            install-U                       # 强制更新&#xA;            package                         # 编译成jar包&#xA;        deploy                              # install后, 上传&#xA;        jar:jar                             # 打jar包&#xA;    插件&#xA;        jetty:run                           # 引入jetty-plugin后, 运行jetty&#xA;        tomcat:run&#xA;    分析&#xA;        dependency:list                     # 列出依赖&#xA;        dependency:tree                     # 列出依赖树&#xA;        dependency:analyze                  # 依赖分析, 未使用的做标记&#xA;        dependency:resolve                  # 列出已解决的依赖&#xA;        dependency:sources                  # 下载源码&#xA;        dependency:copy-dependencies        # 得到jar包&#xA;常用&#xA;    分析包依赖&#xA;        mvn dependency:tree -Dverbose -Dincludes=org.apache.commons:commons-lang3&#xA;    清理打包文件&#xA;        mvn clean package -DskipTests&#xA;    idea工具&#xA;        打包了带main方法的jar不能引用&#xA;        在父项目运行mvn package, model中运行会找不到其它model&#xA;        model运行前先mvn package&#xA;    手动添加依赖&#xA;        mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc7 -Dversion=12.1.0.2 -Dpackaging=jar -Dfile=ojdbc7.jar&#xA;配置&#xA;    &amp;lt;groupId&amp;gt;                               # 包名&#xA;    &amp;lt;artifactId&amp;gt;                            # 项目名&#xA;    &amp;lt;version&amp;gt;&#xA;    &amp;lt;packaging&amp;gt;                             # 打包方式, war, jar&#xA;&#xA;    &amp;lt;parent&amp;gt;                                # 父模块&#xA;&#xA;    &amp;lt;properties&amp;gt;&#xA;        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&#xA;        &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;&#xA;        &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;&#xA;        &amp;lt;spring-cloud.version&amp;gt;Dalston.RELEASE&amp;lt;/spring-cloud.version&amp;gt;&#xA;    &amp;lt;/properties&amp;gt;&#xA;&#xA;    &amp;lt;dependencies&amp;gt;                              # 子模块继承&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;&#xA;                LATEST&#xA;                ${spring-cloud.version}         #引用properties中定义的变量&#xA;            &amp;lt;scope&amp;gt;                             # 何时使用&#xA;                compile&#xA;                provided                        # 类似compile&#xA;                runtime&#xA;                test&#xA;                system&#xA;        &amp;lt;/dependency&amp;gt;&#xA;    &amp;lt;/dependencies&amp;gt;&#xA;&#xA;    &amp;lt;dependenciesManager&amp;gt;                       # 子模块不继承, 继承时需要声明&#xA;        &amp;lt;dependencies&amp;gt;&#xA;    &amp;lt;/dependenciesManager&amp;gt;&#xA;&#xA;    &amp;lt;build&amp;gt;&#xA;        &amp;lt;plugins&amp;gt;&#xA;            &amp;lt;plugin&amp;gt;&#xA;                &amp;lt;groupId&amp;gt;&#xA;                &amp;lt;artifactId&amp;gt;&#xA;            &amp;lt;/plugin&amp;gt;&#xA;        &amp;lt;/plugins&amp;gt;&#xA;    &amp;lt;/build&amp;gt;&#xA;插件&#xA;    介绍&#xA;        按顺序执行，完成maven生命周期&#xA;        无配置时调默认插件&#xA;    生命周期(lifecycle)顺序&#xA;        clean                                   # 清除target目录&#xA;        resources                               # 复制resources下文件到target/classes&#xA;        complie                                 # 包含resources, 编译java下文件到target/classes&#xA;        testResources                           # 复制test/resources下文件到target/test-classes&#xA;        testCompile                             # 包含testResources, 编译test/java下文件到target/test-classes&#xA;        test                                    # 包含resources, compile, testResources, testCompile, test&#xA;        package&#xA;        jar                                     # 打包class文件, 配置文件, 不打包lib&#xA;        install&#xA;    &#xA;    maven-clean-plugin&#xA;    maven-resources-plugin&#xA;        &amp;lt;plugin&amp;gt;  &#xA;            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;  &#xA;            &amp;lt;artifactId&amp;gt;maven-resources-plugin&amp;lt;/artifactId&amp;gt;  &#xA;            &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt;  &#xA;            &amp;lt;executions&amp;gt;  &#xA;                &amp;lt;execution&amp;gt;  &#xA;                    &amp;lt;id&amp;gt;copy-resources&amp;lt;/id&amp;gt;  &#xA;                    &amp;lt;phase&amp;gt;validate&amp;lt;/phase&amp;gt;&#xA;                    &amp;lt;goals&amp;gt;  &#xA;                        &amp;lt;goal&amp;gt;copy-resources&amp;lt;/goal&amp;gt;  &#xA;                    &amp;lt;/goals&amp;gt;  &#xA;                    &amp;lt;configuration&amp;gt;  &#xA;                        &amp;lt;outputDirectory&amp;gt;${project.build.outputDirectory}&amp;lt;/outputDirectory&amp;gt;  &#xA;                        &amp;lt;resources&amp;gt;  &#xA;                            &amp;lt;resource&amp;gt;  &#xA;                                &amp;lt;directory&amp;gt;src/main/${deploy.env}/applicationContext.xml&amp;lt;/directory&amp;gt;  &#xA;                                &amp;lt;excludes&amp;gt;&#xA;                                    &amp;lt;exclude&amp;gt;WEB-INF/*.*&amp;lt;/exclude&amp;gt;&#xA;                                &amp;lt;/excludes&amp;gt;&#xA;                                &amp;lt;filtering&amp;gt;false&amp;lt;/filtering&amp;gt;  &#xA;                            &amp;lt;/resource&amp;gt;  &#xA;                        &amp;lt;/resources&amp;gt;  &#xA;                    &amp;lt;/configuration&amp;gt;  &#xA;                    &amp;lt;inherited&amp;gt;&amp;lt;/inherited&amp;gt;  &#xA;                &amp;lt;/execution&amp;gt;  &#xA;            &amp;lt;/executions&amp;gt;  &#xA;        &amp;lt;/plugin&amp;gt;  &#xA;    maven-compiler-plugin&#xA;    maven-surefire-plugin                       # 对应test, 单元测试&#xA;    maven-dependency-plugin                     # 打包lib&#xA;    maven-jar-plugin&#xA;        &amp;lt;plugin&amp;gt;&#xA;             &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&#xA;             &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;&#xA;             &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt;&#xA;             &amp;lt;configuration&amp;gt;&#xA;                &amp;lt;archive&amp;gt;&#xA;                     &amp;lt;manifest&amp;gt;&#xA;                         &amp;lt;addClasspath&amp;gt;true&amp;lt;/addClasspath&amp;gt;&#xA;                         &amp;lt;classpathPrefix&amp;gt;lib/&amp;lt;/classpathPrefix&amp;gt;&#xA;                        &amp;lt;mainClass&amp;gt;com.xxx.xxxService&amp;lt;/mainClass&amp;gt;&#xA;                   &amp;lt;/manifest&amp;gt;&#xA;                &amp;lt;/archive&amp;gt;&#xA;            &amp;lt;/configuration&amp;gt;&#xA;        &amp;lt;/plugin&amp;gt;&#xA;        &amp;lt;plugin&amp;gt;                                # 单独打包lib&#xA;            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;maven-dependency-plugin&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;2.10&amp;lt;/version&amp;gt;&#xA;            &amp;lt;executions&amp;gt;&#xA;                &amp;lt;execution&amp;gt;&#xA;                    &amp;lt;id&amp;gt;copy-dependencies&amp;lt;/id&amp;gt;&#xA;                    &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&#xA;                    &amp;lt;goals&amp;gt;&#xA;                        &amp;lt;goal&amp;gt;copy-dependencies&amp;lt;/goal&amp;gt;&#xA;                    &amp;lt;/goals&amp;gt;&#xA;                    &amp;lt;configuration&amp;gt;&#xA;                        &amp;lt;outputDirectory&amp;gt;${project.build.directory}/lib&amp;lt;/outputDirectory&amp;gt;&#xA;                    &amp;lt;/configuration&amp;gt;&#xA;                &amp;lt;/execution&amp;gt;&#xA;            &amp;lt;/executions&amp;gt;&#xA;        &amp;lt;/plugin&amp;gt;&#xA;    maven-assembly-plugin                       # 打包lib, 有bug缺失spring xds文件, 同级jar会冲突&#xA;        &amp;lt;plugin&amp;gt;&#xA;             &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;&#xA;             &amp;lt;configuration&amp;gt;&#xA;                 &amp;lt;descriptorRefs&amp;gt;&#xA;                     &amp;lt;descriptorRef&amp;gt;jar-with-dependencies&amp;lt;/descriptorRef&amp;gt;&#xA;                 &amp;lt;/descriptorRefs&amp;gt;&#xA;                 &amp;lt;archive&amp;gt;&#xA;                     &amp;lt;manifest&amp;gt;&#xA;                         &amp;lt;mainClass&amp;gt;com.xxx.xxxService&amp;lt;/mainClass&amp;gt;&#xA;                    &amp;lt;/manifest&amp;gt;&#xA;                &amp;lt;/archive&amp;gt;&#xA;            &amp;lt;/configuration&amp;gt;&#xA;            &amp;lt;executions&amp;gt;&#xA;                &amp;lt;execution&amp;gt;&#xA;                    &amp;lt;id&amp;gt;make-assembly&amp;lt;/id&amp;gt;&#xA;                    &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&#xA;                    &amp;lt;goals&amp;gt;&#xA;                        &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;&#xA;                    &amp;lt;/goals&amp;gt;&#xA;                &amp;lt;/execution&amp;gt;&#xA;            &amp;lt;/executions&amp;gt;&#xA;        &amp;lt;/plugin&amp;gt;&#xA;    maven-shade-plugin                          # 打包lib, 同级jar会冲突, 提示SF,DSA,RSA冲突，排除META-INF相关文件&#xA;        &amp;lt;plugin&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;maven-shade-plugin&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;2.4.3&amp;lt;/version&amp;gt;&#xA;            &amp;lt;executions&amp;gt;&#xA;                &amp;lt;execution&amp;gt;&#xA;                    &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&#xA;                    &amp;lt;goals&amp;gt;&#xA;                        &amp;lt;goal&amp;gt;shade&amp;lt;/goal&amp;gt;&#xA;                    &amp;lt;/goals&amp;gt;&#xA;                    &amp;lt;configuration&amp;gt;&#xA;                        &amp;lt;filters&amp;gt;&#xA;                            &amp;lt;filter&amp;gt;&#xA;                                &amp;lt;artifact&amp;gt;*:*&amp;lt;/artifact&amp;gt;&#xA;                                &amp;lt;excludes&amp;gt;&#xA;                                    &amp;lt;exclude&amp;gt;META-INF/*.SF&amp;lt;/exclude&amp;gt;&#xA;                                    &amp;lt;exclude&amp;gt;META-INF/*.DSA&amp;lt;/exclude&amp;gt;&#xA;                                    &amp;lt;exclude&amp;gt;META-INF/*.RSA&amp;lt;/exclude&amp;gt;&#xA;                                &amp;lt;/excludes&amp;gt;&#xA;                            &amp;lt;/filter&amp;gt;&#xA;                        &amp;lt;/filters&amp;gt;&#xA;                        &amp;lt;transformers&amp;gt;&#xA;                            &amp;lt;transformer&#xA;                                    implementation=&amp;quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&amp;quot;&amp;gt;&#xA;                                &amp;lt;resource&amp;gt;META-INF/spring.handlers&amp;lt;/resource&amp;gt;&#xA;                            &amp;lt;/transformer&amp;gt;&#xA;                            &amp;lt;transformer&#xA;                                    implementation=&amp;quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&amp;quot;&amp;gt;&#xA;                                &amp;lt;resource&amp;gt;META-INF/spring.schemas&amp;lt;/resource&amp;gt;&#xA;                            &amp;lt;/transformer&amp;gt;&#xA;                            &amp;lt;transformer&#xA;                                    implementation=&amp;quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&amp;quot;&amp;gt;&#xA;                                &amp;lt;resource&amp;gt;META-INF/spring.tooling&amp;lt;/resource&amp;gt;&#xA;                            &amp;lt;/transformer&amp;gt;&#xA;                            &amp;lt;transformer&#xA;                                    implementation=&amp;quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&amp;quot;&amp;gt;&#xA;                                &amp;lt;mainClass&amp;gt;com.xxx.xxxInvoke&amp;lt;/mainClass&amp;gt;&#xA;                            &amp;lt;/transformer&amp;gt;&#xA;                        &amp;lt;/transformers&amp;gt;&#xA;                        &amp;lt;minimizeJar&amp;gt;true&amp;lt;/minimizeJar&amp;gt;&#xA;                        &amp;lt;shadedArtifactAttached&amp;gt;true&amp;lt;/shadedArtifactAttached&amp;gt;&#xA;                    &amp;lt;/configuration&amp;gt;&#xA;                &amp;lt;/execution&amp;gt;&#xA;            &amp;lt;/executions&amp;gt;&#xA;        &amp;lt;/plugin&amp;gt;&#xA;    maven-install-plugin&#xA;    spring-boot-maven-plugin&#xA;    gradle-maven-plugin&#xA;    protobuf-maven-plugin&#xA;    build-helper-maven-plugin                   # 用于指定自定义目录&#xA;    dockerfile-maven-plugin                     # root用户直接打包到docker images&#xA;        &amp;lt;plugin&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;com.spotify&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;dockerfile-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;1.4.10&amp;lt;/version&amp;gt;&#xA;            &amp;lt;configuration&amp;gt;&#xA;                &amp;lt;repository&amp;gt;${project.artifactId}&amp;lt;/repository&amp;gt;&#xA;                &amp;lt;contextDirectory&amp;gt;./&amp;lt;/contextDirectory&amp;gt;&#xA;                &amp;lt;tag&amp;gt;${project.version}&amp;lt;/tag&amp;gt;&#xA;                &amp;lt;buildArgs&amp;gt;&#xA;                    &amp;lt;JAR_FILE&amp;gt;mqtt/target/*.jar&amp;lt;/JAR_FILE&amp;gt;&#xA;                &amp;lt;/buildArgs&amp;gt;&#xA;            &amp;lt;/configuration&amp;gt;&#xA;        &amp;lt;/plugin&amp;gt;&#xA;        ./Dockerfile&#xA;            FROM primetoninc/jdk:1.8&#xA;&#xA;            #ADD mqtt/target/*.jar app.jar&#xA;            ARG JAR_FILE&#xA;&#xA;            COPY ${JAR_FILE} /opt/app.jar&#xA;&#xA;            ENTRYPOINT [&amp;quot;java&amp;quot;, &amp;quot;-jar&amp;quot;, &amp;quot;/app.jar&amp;quot;]&#xA;        mvn package dockerfile:build&#xA;方案&#xA;    新项目安装&#xA;        mvn clean install -DskipTests&#xA;        mvn install -rf :模块名 -DskipTests     # 指定模块开始&#xA;    ojdbc14本地加载&#xA;        ＃ oracle是收费的，所以不能直接下载到驱动&#xA;        o-&amp;gt; mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar -Dfile=ojdbc14-10.2.0.4.0.jar&#xA;        o-&amp;gt; 把ojdbc14-10.2.0.4.0.jar复制到目录下: /home/outrun/.m2/repository/com/oracle/ojdbc14/10.2.0.4.0/&#xA;        o-&amp;gt; /home/outrun/.m2/repository/com/oracle/ojdbc14/下会产生maven-metadata-local.xml文件存放maven引入依赖&#xA;        o-&amp;gt; 项目中引入本地依赖&#xA;            &amp;lt;dependency&amp;gt;&#xA;                &amp;lt;groupId&amp;gt;com.oracle&amp;lt;/groupId&amp;gt;&#xA;                &amp;lt;artifactId&amp;gt;ojdbc14&amp;lt;/artifactId&amp;gt;&#xA;                &amp;lt;version&amp;gt;10.2.0.4.0&amp;lt;/version&amp;gt;&#xA;                &amp;lt;/dependency&amp;gt;&#xA;    代理&#xA;        复制$M2_HOME/conf/settings.xml到.m2/&#xA;        settings.xml&#xA;            &amp;lt;proxies&amp;gt;&#xA;                &amp;lt;proxy&amp;gt;&#xA;                  &amp;lt;id&amp;gt;my-proxy&amp;lt;/id&amp;gt;&#xA;                  &amp;lt;active&amp;gt;true&amp;lt;/active&amp;gt;&#xA;                  &amp;lt;protocol&amp;gt;http&amp;lt;/protocol&amp;gt;&#xA;                  &amp;lt;host&amp;gt;localhost&amp;lt;/host&amp;gt;&#xA;                  &amp;lt;port&amp;gt;8123&amp;lt;/port&amp;gt;&#xA;                  &amp;lt;!--&#xA;                  &amp;lt;username&amp;gt;admin&amp;lt;/username&amp;gt;&#xA;                  &amp;lt;password&amp;gt;admin&amp;lt;/password&amp;gt;&#xA;                  &amp;lt;nonProxyHosts&amp;gt;repository.mycom.com|*.google.com&amp;lt;/nonProxyHosts&amp;gt;&#xA;                  --&amp;gt;&#xA;                &amp;lt;/proxy&amp;gt;&#xA;            &amp;lt;/proxies&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;代码&#34;&gt;&#xA;  代码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;github&#xA;bitBucket&#xA;gitee.com&#xA;    # 码云&#xA;sentry&#xA;    # 产品error tracing&#xA;gerrit&#xA;    # code review 工具&#xA;coverallx&#xA;    # github上项目的coverage测试覆盖率条目由它提供服务&#xA;circleCI&#xA;    # github代码测试&#xA;travis-ci&#xA;    # 利用github hook测试&#xA;fitness&#xA;    # 自动单元测试&#xA;coverity&#xA;    # 代码静态检查&#xA;www.webpagetest.org&#xA;    # 测试网站性能&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;gitlab&#34;&gt;&#xA;  GitLab&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gitlab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;仓库&#34;&gt;&#xA;  仓库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%93%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;nexus&#34;&gt;&#xA;  Nexus&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nexus&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# maven, npm, go, docker, yum等&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;jfrog&#34;&gt;&#xA;  JFrog&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jfrog&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 全语言二进制仓库&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;cmdb&#34;&gt;&#xA;  CMDB&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cmdb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# configuration management database&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;bt-panel&#34;&gt;&#xA;  Bt-Panel&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bt-panel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 宝塔面板，服务器运维面板&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;jumpserver&#34;&gt;&#xA;  JumpServer&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jumpserver&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 跳板机&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;功能&#34;&gt;&#xA;  功能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8a%9f%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;认证&#34;&gt;&#xA;  认证&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%a4%e8%af%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;sshsecure-shell&#34;&gt;&#xA;  SSH（Secure Shell）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sshsecure-shell&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;特点&#xA;    1.加密和压缩：http与ftp都是明文传输&#xA;    2.ssh有很多子协议，实现不同功能：如sftp,scp&#xA;    3.端口:22&#xA;配置&#xA;    修改ip地址：&#xA;        有虚拟机时：先设置虚拟机的连接方式是桥接&#xA;        图形界面直接修改（或重启到root用户的图形界面修改）&#xA;        命令修改&#xA;            /etc/network/interfaces&#xA;                auto eth0&#xA;                iface eth0 inet static&#xA;                address ip地址&#xA;                netmask  子网掩码&#xA;                gateway  网关&#xA;                broadcast 广播地址&#xA;                dns-nameservers DNS&#xA;            重启网络服务：/etc/init.d/networking restart，&#xA;    /etc/ssh/sshd_config&#xA;        PasswordAuthentication no&#xA;            # 关闭密码登录&#xA;        PermitRootLogin no&#xA;            # 关闭root登录&#xA;命令&#xA;    ssh outrun@10.1.1.1&#xA;        # -p 22 端口&#xA;        # PubkeyAuthentication=no 不公钥登录&#xA;免登录&#xA;        ssh-keygen -t rsa&#xA;            # 一直回车，生成~/.ssh/id_rsa 与 id_rsa.pub两个文件&#xA;        ssh-copy-id -i 192.168.56.11&#xA;            # 这样就可以免登录访问192.168.56.11了&#xA;            ## ssh-copy-id -i localhost　免登录自己&#xA;&#xA;        或&#xA;        把A机下的1中生成的id_rsa.pub的内容复制到B机下，在B机的.ssh/authorized_keys文件里，这样可以多个主机对B机进行免登录&#xA;sshpass&#xA;    介绍&#xA;        命令行密码登录&#xA;    命令&#xA;        sshpass  -p zlycare@123 ssh zlycare@10.162.201.58&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;openvpn&#34;&gt;&#xA;  OpenVPN&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openvpn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;安装&#xA;    yum install openvpn easy-rsa lzo lzo-devel openssl openssl-devel -y&#xA;    或编译安装openvpn&#xA;        mkdir –p /usr/local/openvpn &amp;amp;&amp;amp; cd /usr/local/openvpn/&#xA;        ./configure --with-lzo-headers=/usr/local/include --with-lzo-lib=/usr/local/lib&#xA;        make&#xA;        make install&#xA;&#xA;生成证书&#xA;    目标&#xA;        服务器: ca.crt、server.key、server.crt、dh.pem&#xA;        客户端: ca.crt、client.key、client.crt&#xA;    查找模板&#xA;        find / -name &amp;quot;vars.example&amp;quot; -type f                         # vars文件&#xA;        find / -name &amp;quot;server.conf&amp;quot; -type f                          # server.conf文件&#xA;    进入目录easy-rsa&#xA;        cd /usr/local/openvpn/openvpn-2.0.9/easy-rsa/2.0/&#xA;        cd /usr/share/easy-rsa/3.0.3/&#xA;    设置vars&#xA;        cp vars.example vars&#xA;        vars文件&#xA;            set_var KEY_COUNTRY=&amp;quot;CN&amp;quot;&#xA;            set_var KEY_PROVINCE=&amp;quot;BJ&amp;quot;&#xA;            set_var KEY_CITY=&amp;quot;Beijing&amp;quot;&#xA;            set_var KEY_ORG=&amp;quot;linux&amp;quot;&#xA;            set_var KEY_EMAIL=&amp;quot;test@example.net&amp;quot;&#xA;            # set_var EASYRSA_NS_SUPPORT &amp;quot;yes&amp;quot;                      # 客户端配置ns-cert-type server时配置&#xA;    生成server文件&#xA;        # 配置文件在/etc/easy-rsa或 .../openvpn/easy-rsa&#xA;        rm -rf pki&#xA;        ./easyrsa init-pki                                          # pki目录&#xA;        ./easyrsa build-ca  nopass                                  # 回车过, 生成ca.crt&#xA;        ./easyrsa gen-req vpnserver nopass                          # 回车过, 生成vpnserver.key, vpnserver.req(密钥对、证书请求文件)&#xA;        ./easyrsa sign server vpnserver                             # 生成vpnserver.crt(ca.crt与vpnserver.req签名)&#xA;        ./easyrsa gen-dh                                            # 生成dh.pem(diffie hellman)&#xA;        cp -r ../3.0.3/ ~&#xA;    生成client文件&#xA;        rm -rf pki&#xA;        ./easyrsa init-pki&#xA;        ./easyrsa gen-req client nopass                             # 回车过, 生成client.key, client.req&#xA;        cp pki/reqs/client.req ~/3.0.3/pki/reqs/&#xA;        cp pki/private/client.key ~/3.0.3/pki/private/&#xA;        cd ~/3.0.3&#xA;        ./easyrsa sign client client                                # 生成client.crt(ca.crt与client.req签名)&#xA;    移动server文件到openvpn配置目录&#xA;        cp pki/{ca.crt,dh.pem} /etc/openvpn/server/&#xA;        cp pki/private/vpnserver.key /etc/openvpn/server/&#xA;        cp pki/issued/vpnserver.crt /etc/openvpn/server/&#xA;        cp server.conf /etc/openvpn/server&#xA;    下载client文件&#xA;        pki/ca.crt&#xA;        pki/private/client.key&#xA;        pki/issued/client.crt&#xA;server.conf&#xA;    cp -p ../../sample-config-files/server.conf /etc/openvpn&#xA;    o-&amp;gt; server.conf&#xA;        ;local 172.21.223.196&#xA;        port 1194&#xA;        proto udp&#xA;        dev tun&#xA;&#xA;        ca /etc/openvpn/ca.crt&#xA;        cert /etc/openvpn/server.crt&#xA;        key /etc/openvpn/server.key&#xA;        dh /etc/openvpn/dh1024.pem&#xA;&#xA;        server 192.168.200.0 255.255.255.0&#xA;        ifconfig-pool-persist ipp.txt&#xA;        ;client-config-dir &amp;quot;C:\\Program Files\\OpenVPN\\ccd&amp;quot;        # 支持TLS client&#xA;        push &amp;quot;route 0.0.0.0 0.0.0.0&amp;quot;&#xA;        keepalive 10 120&#xA;&#xA;        cipher AES-256-CBC&#xA;        comp-lzo                                                    # 减少带宽&#xA;        persist-key&#xA;        persist-tun&#xA;&#xA;        status openvpn-status.log&#xA;        log /var/log/openvpn.log&#xA;&#xA;        verb 3&#xA;        explicit-exit-notify 1                                      # 只能udp协议使用&#xA;    sudo openvpn --config /etc/openvpn/server.conf --daemon&#xA;    netstat -anulp | grep 1194&#xA;linux配置&#xA;    iptables&#xA;        vim /etc/sysctl.conf&#xA;            net.ipv4.ip_forward = 1     # 开启路由转发&#xA;        sysctl -p&#xA;        iptables -t nat -A POSTROUTING -s 192.168.200.0/24 -j SNAT --to-source 45.55.56.16&#xA;    firewall&#xA;        firewall-cmd  --add-service=openvpn --zone=public --permanent&#xA;        firewall-cmd --reload&#xA;client配置&#xA;    o-&amp;gt; client.ovpn&#xA;        client&#xA;        dev tun&#xA;        proto udp&#xA;        remote 45.55.56.16 1194&#xA;        resolv-retry infinite&#xA;        nobind&#xA;        ca ca.crt&#xA;        cert client.crt&#xA;        key client.key&#xA;        ;ns-cert-type server&#xA;        cipher AES-256-CBC&#xA;        comp-lzo&#xA;        persist-key&#xA;        persist-tun&#xA;        verb 3&#xA;        mute 20&#xA;    sudo openvpn --config client.ovpn&#xA;        # --user outrun&#xA;        # --auth-nocache&#xA;        # askpass pass.txt 放密码到文件&#xA;    o-&amp;gt; 免密码连接&#xA;        #!/usr/bin/expect -f&#xA;        spawn sudo openvpn --config /home/outrun/.openvpn/meiqia-vpn-ldap.ovpn&#xA;        # match_max 100000&#xA;        expect &amp;quot;*?assword*:*&amp;quot;&#xA;        send -- &amp;quot;1234\n&amp;quot;&#xA;        expect &amp;quot;*Username:*&amp;quot;&#xA;        send -- &amp;quot;outrun\n&amp;quot;&#xA;        expect &amp;quot;*Password:*&amp;quot;&#xA;        expect &amp;quot;#&amp;quot;&#xA;案例&#xA;    代理http上网                                                     # tcp连接国内服务器会被reset&#xA;        server.conf&#xA;            dev tap&#xA;            proto tcp&#xA;&#xA;            push &amp;quot;redirect-gateway def1 bypass-dhcp&amp;quot;&#xA;            push &amp;quot;dhcp-option DNS 114.114.114.114&amp;quot;&#xA;            push &amp;quot;dhcp-option DNS 8.8.8.8&amp;quot;&#xA;&#xA;            client-to-client&#xA;            ;explicit-exit-notify 1&#xA;        client.ovpn&#xA;            dev tap&#xA;            proto tcp&#xA;    改成用户名密码认证&#xA;        服务器&#xA;            server.conf&#xA;                auth-user-pass-verify /etc/openvpn/server/checkpsw.sh via-env&#xA;                verify-client-cert none&#xA;                username-as-common-name&#xA;                tls-auth /etc/openvpn/server/ta.key 0&#xA;                script-security 3&#xA;            checkpsw.sh&#xA;                #!/bin/sh&#xA;                PASSFILE=&amp;quot;/etc/openvpn/server/user/psw-file&amp;quot;&#xA;                LOG_FILE=&amp;quot;/etc/openvpn/server/log/openvpn-password.log&amp;quot;&#xA;                TIME_STAMP=`date &amp;quot;+%Y-%m-%d %T&amp;quot;`&#xA;&#xA;                if [ ! -r &amp;quot;${PASSFILE}&amp;quot; ]; then&#xA;                  echo &amp;quot;${TIME_STAMP}: Could not open password file \&amp;quot;${PASSFILE}\&amp;quot; for reading.&amp;quot; &amp;gt;&amp;gt; ${LOG_FILE}&#xA;                  exit 1&#xA;                fi&#xA;&#xA;                CORRECT_PASSWORD=`awk &#39;!/^;/&amp;amp;&amp;amp;!/^#/&amp;amp;&amp;amp;$1==&amp;quot;&#39;${username}&#39;&amp;quot;{print $2;exit}&#39; ${PASSFILE}`&#xA;&#xA;                if [ &amp;quot;${CORRECT_PASSWORD}&amp;quot; = &amp;quot;&amp;quot; ]; then&#xA;                  echo &amp;quot;${TIME_STAMP}: User does not exist: username=\&amp;quot;${username}\&amp;quot;, password=\&amp;quot;${password}\&amp;quot;.&amp;quot; &amp;gt;&amp;gt; ${LOG_FILE}&#xA;                  exit 1&#xA;                fi&#xA;&#xA;                if [ &amp;quot;${password}&amp;quot; = &amp;quot;${CORRECT_PASSWORD}&amp;quot; ]; then&#xA;                  echo &amp;quot;${TIME_STAMP}: Successful authentication: username=\&amp;quot;${username}\&amp;quot;.&amp;quot; &amp;gt;&amp;gt; ${LOG_FILE}&#xA;                  exit 0&#xA;                fi&#xA;&#xA;                echo &amp;quot;${TIME_STAMP}: Incorrect password: username=\&amp;quot;${username}\&amp;quot;, password=\&amp;quot;${password}\&amp;quot;.&amp;quot; &amp;gt;&amp;gt; ${LOG_FILE}&#xA;                exit 1&#xA;            chmod 645 checkpsw.sh&#xA;            mkdir user&#xA;            mkdir log&#xA;            user/psw-file&#xA;                outrun asdfasdf&#xA;            openvpn --genkey --secret ta.key&#xA;        客户端&#xA;            下载ta.key&#xA;            client.ovpn&#xA;                ;cert client.crt&#xA;                ;key client.key&#xA;                auth-user-pass&#xA;                tls-auth ta.key 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;shadowsocks&#34;&gt;&#xA;  Shadowsocks&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#shadowsocks&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;安装&#xA;    sudo yum -y install epel-release&#xA;    sudo yum -y install python-pip&#xA;    sudo pip install --upgrade pip&#xA;    sudo pip install shadowsocks&#xA;服务器&#xA;    server.json&#xA;        {&#xA;            &amp;quot;server&amp;quot;:&amp;quot;0.0.0.0&amp;quot;,&#xA;            &amp;quot;server_port&amp;quot;:443,&#xA;            &amp;quot;local_address&amp;quot;:&amp;quot;127.0.0.1&amp;quot;,&#xA;            &amp;quot;local_port&amp;quot;:1080,&#xA;            &amp;quot;password&amp;quot;:&amp;quot;asdfasdf&amp;quot;,&#xA;            &amp;quot;timeout&amp;quot;:300,&#xA;            &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;,&#xA;            &amp;quot;fast_open&amp;quot;:false,&#xA;            &amp;quot;workers&amp;quot;:5&#xA;        }&#xA;    ssserver -c server.json -d start&#xA;中继代理&#xA;    client.json&#xA;        {&#xA;            &amp;quot;server&amp;quot;:&amp;quot;47.74.230.238&amp;quot;,&#xA;            &amp;quot;server_port&amp;quot;:443,&#xA;            &amp;quot;local_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,&#xA;            &amp;quot;local_port&amp;quot;:1080,&#xA;            &amp;quot;password&amp;quot;:&amp;quot;asdfasdf&amp;quot;,&#xA;            &amp;quot;timeout&amp;quot;:300,&#xA;            &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;&#xA;        }&#xA;    sslocal -c client.json&#xA;协议转换&#xA;    安装polipo&#xA;    /etc/polipo/config&#xA;        logSyslog = false&#xA;        logFile = &amp;quot;/var/log/polipo/polipo.log&amp;quot;&#xA;        socksParentProxy = &amp;quot;127.0.0.1:1080&amp;quot;&#xA;        socksProxyType = socks5&#xA;        chunkHighMark = 50331648&#xA;        objectHighMark = 16384&#xA;        serverMaxSlots = 64&#xA;        serverSlots = 16&#xA;        serverSlots1 = 32&#xA;        proxyAddress = &amp;quot;0.0.0.0&amp;quot;&#xA;        proxyPort = 8123&#xA;    polipo -c /etc/polipo/config&#xA;客户端&#xA;    switchOmega&#xA;        SOCKS5 127.0.0.1 1080&#xA;        http 127.0.0.1 8123&#xA;    环境变量&#xA;        export http_proxy=http://127.0.0.1:8123&#xA;        export https_proxy=http://127.0.0.1:8123&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;opendj&#34;&gt;&#xA;  OpenDJ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#opendj&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    open source directory services for the java platform&#xA;    LDAPv3的认证系统&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;openssl&#34;&gt;&#xA;  OpenSSL&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openssl&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;使用&#xA;    openssl genrsa -out server.key 1024&#xA;        # 生成私钥&#xA;    openssl rsa -in server.key -pubout -out server.pem&#xA;        # 生成公钥&#xA;    openssl req -new -key ca.key -out ca.csr&#xA;        # 通过私钥生成csr(certificate signing request, 证书签名请求)文件&#xA;    openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt&#xA;        # 通过csr生成自签名ca证书，用来颁发证书&#xA;    openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in server.csr -out server.crt&#xA;        # 向自己的ca机构申请签名，需要ca.crt, ca.key, server.csr, 得到带有CA签名证书。用来给客户端验证公钥属于该域名&#xA;        # 客户端发起安全连接前会获取服务器端的证书, 并通过ca证书验证服务器端证书的真伪，并对服务器名称, IP地址等进行验证&#xA;    openssl s_client -connect 127.0.0.1:8000&#xA;        # 测试证书是否正常&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;应用控制&#34;&gt;&#xA;  应用控制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8%e6%8e%a7%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;forever&#34;&gt;&#xA;  Forever&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#forever&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;openvpn --config openvpn.conf&#xA;        # 连接&#xA;        ## --user outrun&#xA;        ## --auth-nocache&#xA;        # askpass pass.txt 放密码到文件&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;supervisor&#34;&gt;&#xA;  Supervisor&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#supervisor&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    监视重启&#xA;命令&#xA;    supervisord&#xA;        # 启动后台服务&#xA;    supervisorctl&#xA;        status          # 查看所有&#xA;        update          # 重载配置&#xA;        reload          # &#xA;&#xA;        start&#xA;        stop&#xA;        restart&#xA;        start all&#xA;        stop all&#xA;        restart all&#xA;&#xA;配置&#xA;    /etc/supervisor/supervisord.conf&#xA;        [include]&#xA;        files = /etc/supervisor/conf.d/*.conf&#xA;    /etc/supervisor/conf.d/app.conf&#xA;        [program:tri]&#xA;        command=/data/apps/tri/bin/tri --config /data/apps/tri/conf/config.tri.toml&#xA;        directory=/data/apps/tri&#xA;        autostart=true&#xA;        autorestart=true&#xA;        startsecs=10&#xA;        startretries=3&#xA;        stdout_logfile=/data/logs/supervisor/tri/access.log&#xA;        stdout_logfile_maxbytes=100MB&#xA;        stdout_logfile_backups=20&#xA;        stderr_logfile=/data/logs/supervisor/tri/stderr.log&#xA;        stderr_logfile_maxbytes=100MB&#xA;        stderr_logfile_backups=2&#xA;        environment=ASPNETCORE_ENVIRONMENT=Production       # 环境变量&#xA;        user=root                                           # 执行的用户&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;pm2&#34;&gt;&#xA;  PM2&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#pm2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    带有负载均衡功能的node应用进程管理器&#xA;    内建负载均衡(使用node cluster模块)&#xA;    后台运行&#xA;    热重载&#xA;    停止不稳定进程，如无限循环&#xA;安装&#xA;    npm install -g pm2&#xA;命令&#xA;    pm2 start app.js&#xA;    pm2 stop&#xA;    pm2 restart&#xA;    pm2 status&#xA;    pm2 info 1&#xA;    pm2 logs 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;个人操作&#34;&gt;&#xA;  个人操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%aa%e4%ba%ba%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ngrok&#34;&gt;&#xA;  Ngrok&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ngrok&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 内网穿透&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;vsftp&#34;&gt;&#xA;  VSFTP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#vsftp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    默认端口21&#xA;用户&#xA;    匿名用户&#xA;        默认为ftp或anonymous&#xA;        目录在/var/ftp&#xA;        只能下载不能上传&#xA;    本地用户&#xA;        用户名和密码与本地用户相同&#xA;        目录为该用户的登录目录&#xA;    虚拟用户&#xA;        文件配置名字和密码&#xA;        要生成认证文件&#xA;文件&#xA;    /usr/sbin/vsftpd                    # 主程序&#xA;    /etc&#xA;        /rc.d/init.d/vsftpd             # initd启动脚本&#xA;        /vsftpd.conf                    # 主配置&#xA;        /vsftpd.ftpusers                # 用户黑名单, 一行一名字&#xA;        /vsftpd.user_list               # 用户黑/白名单, 一行一名字&#xA;        /pam.d/vsftpd                   # pam认证文件&#xA;    /var&#xA;        /ftp                            # 匿名用户主目录&#xA;        /ftp/pub                        # 匿名用户的下载目录&#xA;默认用户与组&#xA;    用户&#xA;        adduser -d /var/ftp -g ftp -s /sbin/nologin ftp&#xA;    组&#xA;        ftp&#xA;命令&#xA;    systemctl start vsftpd&#xA;最小可用配置&#xA;    /etc/vsftpd.conf&#xA;        listen=YES&#xA;        local_enable=YES&#xA;        xferlog_enable=YES&#xA;        connect_from_port_20=YES&#xA;        pam_service_name=vsftpd&#xA;        seccomp_sandbox=NO&#xA;&#xA;        # Enable upload by local user.&#xA;        write_enable=YES&#xA;&#xA;        # Enable read by anonymous user (without username and password).&#xA;        secure_chroot_dir=/var/empty&#xA;        anonymous_enable=YES&#xA;        anon_root=/srv/ftp&#xA;        no_anon_password=YES&#xA;使用&#xA;    /etc/vsftpd.conf&#xA;        anonymous_enable=YES            # 允许匿名用户&#xA;        local_enable=YES                # linux用户可登录, 虚拟用户可登录&#xA;        write_enable=YES                # 可写&#xA;        local_umask=022                 # user文件权限, 默认077&#xA;        dirmessage_enable=YES           # 显示目录信息&#xA;        xferlog_enable=NO               # 记录上传/下载日志&#xA;        connect_from_port_20=YES        # 确保用20端口传输&#xA;        ls_recurse_enable=NO            # 允许ls -R&#xA;        allow_writeable_chroot=NO&#xA;        listen=NO&#xA;        listen_ipv6=YES                 # 包含ipv4,和listen只能有一个YES&#xA;&#xA;        pam_service_name=vsftpd&#xA;        local_root=/home/outrun/Downloads                       # linux用户默认目录。会先登录到用户目录，再切换到这里&#xA;        ftp_username=ftp                # 匿名用户名，默认ftp&#xA;        tcp_wrappers=NO                 # 结合tcp_wrapper限制ip登录&#xA;            /etc&#xA;                /hosts.allow            # 允许地址&#xA;                /hosts.deny             # 拒绝地址&#xA;    useradd -d /home/ftp ftp&#xA;    mkdir /home/ftp &amp;amp;&amp;amp; chown ftp /home/ftp &amp;amp;&amp;amp; chgrp ftp /home/ftp&#xA;    systemctl restart vsftpd&#xA;    打开tcp, udp端口21, 20&#xA;用户&#xA;    匿名登录&#xA;        /etc/vsftpd/vsftpd.conf&#xA;            anonymous_enable=YES&#xA;            anon_root=/home/outrun/Downloads                    # 匿名用户默认目录&#xA;            anon_upload_enable=YES      # 匿名可写，要求write_enable=YES&#xA;            anon_mkdir_write_enable=YES # 匿名创建文件夹&#xA;            anon_other_write_enable=YES # 匿名可删除、重命名&#xA;            anon_umask=000              # 如创建077文件，anon_umask=022时，则为055 &#xA;        chmod 777 dir1&#xA;&#xA;    本地用户登录&#xA;        /etc/vsftpd/vsftpd.conf&#xA;            anonymous_enable=NO&#xA;            userlist_enable=YES&#xA;            userlist_deny=YES           # YES时user_list为黑名单&#xA;            userlist_file=/etc/vsftpd/user_list&#xA;&#xA;            chroot_local_user=YES       # 默认可以chroot到用户home。YES时, chroot_list_file指定黑名单&#xA;            chroot_list_enable=YES&#xA;            chroot_list_file=/etc/vsftpd/chroot_file            # 名单用户只能访问自己home&#xA;            allow_writeable_chroot=YES  # 不限制chroot目录可写&#xA;        /etc/vsftpd/ftpusers&#xA;        /etc/vsftpd/user_list&#xA;            注释root&#xA;    虚拟用户&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;simplehttpserver&#34;&gt;&#xA;  SimpleHTTPServer&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#simplehttpserver&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;pythom -m SimpleHTTPServer 8080&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;pyshark&#34;&gt;&#xA;  Pyshark&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#pyshark&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    包嗅探&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;项目用工具&#34;&gt;&#xA;  项目用工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a1%b9%e7%9b%ae%e7%94%a8%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;知识库&#34;&gt;&#xA;  知识库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9f%a5%e8%af%86%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;confluence&#xA;    # 收费&#xA;NextCloud&#xA;    # 私有网盘&#xA;tiddlyWiki&#xA;    # 可在线定义目录树&#xA;github&#xA;    # 用wiki页面&#xA;gitbook&#xA;mediaWiki&#xA;    # 维基百科样式，只有单页目录树&#xA;dokuWiki&#xA;    # 只有网站地图&#xA;xwiki&#xA;    # 目录树, acl&#xA;语雀&#xA;hdwiki&#xA;    # 百科, 已停更&#xA;notion&#xA;    # 任务管理&#xA;minidoc&#xA;    # 原smartWiki(php), 改成golang开发的minidoc&#xA;有道云笔记&#xA;幕布&#xA;石墨&#xA;etherpad.org&#xA;    # 在线协作无缝编辑&#xA;dropbox&#xA;    # 文档协作&#xA;坚果云&#xA;    # 文档协作&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;网盘&#34;&gt;&#xA;  网盘&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%9b%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;google drive&#xA;百度云&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;沟通&#34;&gt;&#xA;  沟通&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b2%9f%e9%80%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Mattermost&#xA;    # 开源&#xA;team&#xA;    # 微软, 聊天&#xA;slack&#xA;    # 聊天&#xA;hipChat&#xA;    # Atlassian, 聊天&#xA;企业微信&#xA;钉钉&#xA;倍洽&#xA;飞书&#xA;瀑布IM&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;邮件&#34;&gt;&#xA;  邮件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%82%ae%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;gmail&#xA;阿里云邮箱&#xA;腾讯企业邮&#xA;zoho&#xA;网易企业邮&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;原型&#34;&gt;&#xA;  原型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%9f%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;zeplin&#xA;    # 设计和前端协同工具&#xA;蓝湖&#xA;    # 免费&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;团队协作&#34;&gt;&#xA;  团队协作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%a2%e9%98%9f%e5%8d%8f%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;jira&#xA;    # 进度管理跟踪, 敏捷开发&#xA;microsoft Project&#xA;    # 瀑布式开发&#xA;rational&#xA;    # IBM, 进度管理&#xA;teambition&#xA;    # 进度管理&#xA;basecamp&#xA;    # 进度管理&#xA;testlink&#xA;    # 测试收集, 进度管理&#xA;redmine&#xA;    # 开源, ror开发, 项目管理, 把成员、任务、文档、讨论等资源整合在一起。支持git, svn, cvs等&#xA;youtrack&#xA;    # jetbrains, 项目管理&#xA;禅道&#xA;    # 项目管理, 开源&#xA;trac&#xA;    # wiki, issue&#xA;tapd&#xA;    # 腾讯项目管理&#xA;    优势&#xA;        打通企业微信&#xA;    功能&#xA;worktile&#xA;    # microsoft项目管理&#xA;notion&#xA;明道云&#xA;云之家&#xA;eteams&#xA;今目标&#xA;tower&#xA;masterlab&#xA;    # 开源&#xA;openProject&#xA;    # 开源&#xA;peerProject&#xA;    # 开源&#xA;&#xA;trello&#xA;    # 进度管理&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;代码管理&#34;&gt;&#xA;  代码管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;github&#xA;gitee&#xA;coding&#xA;bitbucket&#xA;gitea&#xA;    # 开源&#xA;gitlab&#xA;gogs&#xA;    # 开源&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;测试&#34;&gt;&#xA;  测试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%8b%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;semaphore&#xA;codeClimate&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;文档&#34;&gt;&#xA;  文档&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%87%e6%a1%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;swagger&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;镜像&#34;&gt;&#xA;  镜像&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%95%9c%e5%83%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;harbor&#xA;nexus&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;部署&#34;&gt;&#xA;  部署&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%83%a8%e7%bd%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;drone&#xA;Travis-CI&#xA;CircleCI&#xA;GitLab-CI&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;集群&#34;&gt;&#xA;  集群&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9b%86%e7%be%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kuboard&#xA;prometheus&#xA;grafana&#xA;zabbix&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;日志&#34;&gt;&#xA;  日志&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%a5%e5%bf%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;ElasticStack&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://ukeate.com/docs/tool/develop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/tool/develop/</guid>
      <description>&lt;h1 id=&#34;chrome&#34;&gt;&#xA;  Chrome&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chrome&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;chrome://net-internals/#dns&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://ukeate.com/docs/tool/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/tool/linux/</guid>
      <description>&lt;h1 id=&#34;基础&#34;&gt;&#xA;  基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;历史&#xA;    40年代：汇编语言&#xA;    60年代：汇编语言unux&#xA;    70年代初：c语言、c语言unux、unux开源（美国反垄断法制裁AT&amp;amp;T）&#xA;    70年代末：AT&amp;amp;T分裂，unix闭源&#xA;    80年代：minix&#xA;    90年代：linux  # 80、90年代之间：gun计划&#xA;文件权限&#xA;    drwxr-xr-x  # d代表目录&#xA;    lrwxrwxrwx  # l代表软连接&#xA;    drwxrwxrwt  # 末尾的t代表粘滞位(sticky bit)，用户只能删除自己建东西&#xA;                ## chmod 1777来设置&#xA;扩展名&#xA;    .bin&#xA;        # 二进制可执行文件，加上执行权限./执行即可&#xA;    .tar.gz&#xA;        # gzip压缩,tar打包的文件&#xA;    .tar.tgz&#xA;        ＃ 同gzip&#xA;    .tar.bz2&#xA;    .tar.xz&#xA;环境变量&#xA;    http_proxy=http://1.1.1.1：8082         # http代理&#xA;    https_proxy=http://1.1.1.1：8082        # https代理&#xA;    no_proxy=&#39;m.test.com,127.0.0.1&#39;         # 代理白名单&#xA;&#xA;    PATH                                    # 命名查找路径&#xA;    SHELL                                   # shell命令位置&#xA;    PWD                                     # 当前用户目录&#xA;    HOME                                    # 同上&#xA;    LOGNAME                                 # 用户名&#xA;    USER                                    # 同上&#xA;    LANG                                    # 语言环境&#xA;    _                                       # 查看环境变量的命令&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;文件位置&#34;&gt;&#xA;  文件位置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%87%e4%bb%b6%e4%bd%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;/var&#xA;    /log&#xA;        /boot.log                           # 启动日志&#xA;/proc&#xA;    /[pid]&#xA;        /status                             # 任务虚拟地址空间的大小 VmSize, 应用程序正在使用的物理内存的大小 VmRSS&#xA;    /loadavg                                # 1分钟、5分钟、15分钟平均负载。运行队列进程数/进程总数。最后一个进程id&#xA;/etc&#xA;    /etc/fstab&#xA;        /dev/nvme0n1p5 /home ext4 defaults 0 2&#xA;        /dev/nvme0n1p3 /home/outrun/nvme0n1p3 ntfs-3g defaults 0 0&#xA;&#xA;        # /dev/nvme0n1p6&#xA;        UUID=b00fac49-46d7-43ef-aea7-256d82b862b2&#x9;/         &#x9;ext4      &#x9;rw,relatime,data=ordered&#x9;0 1&#xA;&#xA;        # /dev/nvme0n1p1 LABEL=ESP&#xA;        UUID=FE8F-730F      &#x9;/boot/EFI &#x9;vfat      &#x9;rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro&#x9;0 2&#xA;    /sudoers&#xA;        outrun ALL=(ALL) NOPASSWD:ALL&#xA;    /passwd&#xA;    /group&#xA;    /resolv.conf                            # dns&#xA;        nameserver 223.5.5.5&#xA;        nameserver 223.6.6.6                # alidns&#xA;        nameserver 114.114.114.114&#xA;    /sysconfig&#xA;        /network-scripts/ifcfg-eth0         # 永久修改网卡&#xA;            DEVICE=eth0                     # 设备别名&#xA;            BOOTPROTO=static                # 网卡获得ip地址的方式，默认dhcp&#xA;            HWADDR=00:00:00:00:00:00        # mac&#xA;            IPADDR=192.168.0.100            # ip&#xA;            NETMASK=255.255.255.0           # netmask&#xA;            ONBOOT=yes                      # 系统启动时是否激活此设备&#xA;        /network                            # 修改网关&#xA;            NETWORKING=yes                  # 系统是否使用网络&#xA;            HOSTNAME=abc                    # 设置本机主机名, 要与/etc/hosts中设置的主机名相同&#xA;            GATEWAY=192.168.0.1             # 网关ip&#xA;        /selinux                            # 软连接到../selinux/config&#xA;            SELINUX=disabled                # 关闭selinux&#xA;    /selinux/config                         # selinux&#xA;        SELINUX=enforcing                   # disabled 为关闭&#xA;    /systemd&#xA;        /logind.conf                        # 电源管理配置&#xA;            HandleLidSwitch=ignore          # 关闭盖子不执行操&#xA;        /system                             # units位置&#xA;            /default.target                 # 启动级别&#xA;            /docker.service.d/http-proxy.conf                           # docker代理&#xA;                Environment=&amp;quot;HTTP_PROXY=http://127.0.0.1:8123&amp;quot;&#xA;                    &amp;quot;HTTPS_PROXY=http://127.0.0.1:8123&amp;quot;&#xA;                    &amp;quot;NO_PROXY=192.168.1.1,localhost&amp;quot;&#xA;    /security&#xA;        /limits.conf                        # 设置系统限制，如文件句柄数&#xA;    /X11&#xA;        /xorg.conf.d/70-synaptics.conf      # 触摸板设置&#xA;            Section &amp;quot;InputClass&amp;quot;&#xA;                Identifier &amp;quot;touchpad&amp;quot;&#xA;                Driver &amp;quot;synaptics&amp;quot;&#xA;                MatchIsTouchpad &amp;quot;on&amp;quot;&#xA;                        Option &amp;quot;TapButton1&amp;quot; &amp;quot;1&amp;quot;&#xA;                        Option &amp;quot;TapButton2&amp;quot; &amp;quot;3&amp;quot;&#xA;                        Option &amp;quot;TapButton3&amp;quot; &amp;quot;2&amp;quot;&#xA;                        Option &amp;quot;VertEdgeScroll&amp;quot; &amp;quot;on&amp;quot;&#xA;                        Option &amp;quot;VertTwoFingerScroll&amp;quot; &amp;quot;on&amp;quot;&#xA;                        Option &amp;quot;HorizEdgeScroll&amp;quot; &amp;quot;on&amp;quot;&#xA;                        Option &amp;quot;HorizTwoFingerScroll&amp;quot; &amp;quot;on&amp;quot;&#xA;                        Option &amp;quot;CircularScrolling&amp;quot; &amp;quot;on&amp;quot;&#xA;                        Option &amp;quot;CircScrollTrigger&amp;quot; &amp;quot;2&amp;quot;&#xA;                        Option &amp;quot;EmulateTwoFingerMinZ&amp;quot; &amp;quot;40&amp;quot;&#xA;                        Option &amp;quot;EmulateTwoFingerMinW&amp;quot; &amp;quot;8&amp;quot;&#xA;                        Option &amp;quot;FingerLow&amp;quot; &amp;quot;30&amp;quot;&#xA;                        Option &amp;quot;FingerHigh&amp;quot; &amp;quot;50&amp;quot;&#xA;                        Option &amp;quot;MaxTapTime&amp;quot; &amp;quot;125&amp;quot;&#xA;                    Option &amp;quot;VertScrollDelta&amp;quot; &amp;quot;-50&amp;quot;&#xA;                    Option &amp;quot;HorizScrollDelta&amp;quot; &amp;quot;-50&amp;quot;&#xA;            EndSection&#xA;    /issue                                  # 发行版信息&#xA;    /hosts                                  # 修改localhost&#xA;    /ld.so.conf                             # lib设置,加入so文件的配置路径如:/usr/local/lib&#xA;        执行/sbin/ldconfig -v 更新&#xA;    /profile                                # 用户登录时加载的环境变量&#xA;    /inittab                                # 设置启动级别&#xA;        id:3:initdefault:&#xA;/usr&#xA;    /lib&#xA;        /systemd&#xA;            /system                         # units位置&#xA;    /share&#xA;        /applications                        # desktop文件&#xA;/run&#xA;    /systemd&#xA;        /system                             # units位置&#xA;/sys&#xA;    /class&#xA;        /backlight&#xA;            /acpi_video0                    # ati显卡是acpi_video0, intel显卡是intel_backlight&#xA;                /brightness                 # 修改亮度&#xA;~&#xA;    /.bash_profile&#xA;    /.bash_login&#xA;    /.profile                               # 在登录时执行一次, 先.bash_profile, 再bash_login, 再.profile&#xA;    /.bashrc&#xA;    /.bash_logout&#xA;    /.local&#xA;        /share&#xA;            /applications                   # desktop文件&#xA;&#xA;&#xA;initd&#xA;    /etc/rc.d/init.d/rc.local&#xA;        chmod +x rc.local&#xA;        ln -sf ../init.d/rc.local rc0.d/S999rc.local&#xA;        ln -sf ../init.d/rc.local rc1.d/S999rc.local&#xA;        ln -sf ../init.d/rc.local rc2.d/S999rc.local&#xA;        ln -sf ../init.d/rc.local rc3.d/S999rc.local&#xA;        ln -sf ../init.d/rc.local rc4.d/S999rc.local&#xA;        ln -sf ../init.d/rc.local rc5.d/S999rc.local&#xA;        ln -sf ../init.d/rc.local rc6.d/S999rc.local&#xA;            # 文件名中S表示传递start参数(K表示stop), 999为启动级别&#xA;&#xA;&#xA;&#xA;fstab&#xA;    /dev/sda1 /home/outrun/sda1 ntfs-3g defaults 0 0&#xA;&#xA;&#xA;日志&#xA;    access-log      # http传输&#xA;    acct和pacct     # 用户命令&#xA;    aculog          # modem活动&#xA;    btmp            # 失败记录&#xA;    lastlog         # 最近成功登录、最后一次不成功登录&#xA;    syslog          # 系统日志&#xA;    messages        # syslog&#xA;    sudolog         # sudo记录&#xA;    sulog           # su记录&#xA;    utmp            # 当前登录用户&#xA;    wtmp            # 用户登录登出记录&#xA;    xferlog         # ftp会话&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;设置&#34;&gt;&#xA;  设置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%be%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;lib设置&#xA;    /etc/ld.so.conf加入so文件的配置路径如:/usr/local/lib&#xA;    执行/sbin/ldconfig -v 更新&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;发行版&#34;&gt;&#xA;  发行版&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%91%e8%a1%8c%e7%89%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;lfs&#xA;coreos&#xA;debian&#xA;gentoo&#xA;opensuse&#xA;mint&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;centos&#34;&gt;&#xA;  centos&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#centos&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;包&#xA;    dnf install @development-tools&#xA;    yum install epel-release&#xA;安装VBoxAdditions&#xA;    yum update kernel&#xA;    yum install kernel-headers kernel-devel gcc&#xA;    # 可能要加软连接 /usr/src/kernels/&#xA;    mount /dev/cdrom /mnt&#xA;    /mnt/VBoxLinuxAdditions.run&#xA;gcc升级&#xA;    yum -y install centos-release-scl&#xA;    yum -y install devtoolset-6-gcc devtoolset-6-gcc-c++ devtoolset-6-binutils&#xA;    scl enable devtoolset-6 bash&#xA;    echo &amp;quot;source /opt/rh/devtoolset-6/enable&amp;quot; &amp;gt;&amp;gt;/etc/profile&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;ubuntu&#34;&gt;&#xA;  ubuntu&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ubuntu&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;包&#xA;    apt-cache madison xxx       # 查看仓库中所有版本&#xA;    apt-cache search xxx&#xA;    apt-get -f -y --assume-yes install&#xA;    aptitude&#xA;        search&#xA;        show&#xA;        install&#xA;        remove &#xA;        purge                   # 删除包及配置&#xA;        clean                   # 删除下载的包文件&#xA;        autoclean               # 仅删除过期&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;fedora&#34;&gt;&#xA;  fedora&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#fedora&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;升级&#xA;    fedup --network 21&#xA;    或&#xA;    fedora-upgrade&#xA;升级21&#xA;    rpm --import https://fedoraproject.org/static/95A43F54.txt&#xA;    yum update yum&#xA;    yum clean all&#xA;    yum --releasever=21 distro-sync --nogpgcheck&#xA;group&#xA;    yum grouplist&#xA;    yum groupinstall &amp;quot;X Window System&amp;quot;&#xA;    yum groupinstall &amp;quot;GNOME Desktop Environment&amp;quot;&#xA;    yum groupinstall &amp;quot;KDE&amp;quot;&#xA;&#xA;gnome的快捷方式存放地址&#xA;安装unity  &#xA;    cd /etc/yum.repos.d/&#xA;    wget http://download.opensuse.org/repositories/GNOME:/Ayatana/Fedora_17/GNOME:Ayatana.repo&#xA;    yum install unity&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;arch&#34;&gt;&#xA;  arch&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#arch&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;设置&#xA;    ahci, secure boot, post behavious thorough&#xA;源&#xA;    vim /etc/pacman.d/mirrorlist&#xA;    pacman -Syy&#xA;依赖&#xA;    base-devel&#xA;分区&#xA;    # mount -t efivarfs efivarfs /sys/firmware/efi/efivars&#xA;            # 判断efi&#xA;    cfdisk&#xA;    mkfs.vfat -F32 /dev/nvme0n1p1&#xA;            # 或直接使用windows的uefi分区&#xA;    mkfs.ext4 /dev/nvme0n1p2&#xA;    mkswap /dev/nvme0n1p3&#xA;    swapon /dev/nvme0n1p3&#xA;    mount /dev/nvme0n1p2 /mnt&#xA;    mkdir -p /mnt/boot/EFI&#xA;    mount /dev/nvme0n1p1 /mnt/boot/EFI&#xA;配置&#xA;    pacstrap -i /mnt base&#xA;    genfstab -U -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab&#xA;    arch-chroot /mnt /bin/bash&#xA;    pacman -S dialog wpa_supplicant vim &#xA;    vim /etc/locale.gen&#xA;    locale-gen&#xA;    echo LANG=en_US.UTF-8 &amp;gt; /etc/locale.conf&#xA;    ls -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&#xA;    hwclock --systohc --utc&#xA;    echo outrun &amp;gt; /etc/hostname&#xA;grub&#xA;    pacman -S dosfstools grub os-prober efibootmgr&#xA;            # bios下 grub os-prober &#xA;    grub-install --target=x86_64-efi --efi-directory=/boot/EFI --bootloader-id=grub&#xA;    grub-mkconfig -o /boot/grub/grub.cfg&#xA;用户&#xA;    passwd&#xA;    groupadd outrun&#xA;    useradd -m -g users -G outrun -s /usr/bin/bash outrun&#xA;    passwd outrun&#xA;    vim /etc/sudoers&#xA;退出&#xA;    exit&#xA;    umount -R /mnt&#xA;    reboot&#xA;桌面&#xA;    pacman -S xorg-server xorg-apps xorg xorg-xinit&#xA;    pacman -S xf86-video-intel mesa xf86-input-synaptics&#xA;    pacman -S gnome&#xA;    echo exec gnome-session &amp;gt; .xinitrc&#xA;    # systemctl enable gdm&#xA;    /etc/modprobe.d/blacklist_nouveau.conf中写blacklist nouveau&#xA;    /etc/modprobe.d/modprobe.conf中写blacklist nouveau&#xA;    pacman -S ttf-dejavu wqy-microhei&#xA;network&#xA;    pacman -S networkmanager-openvpn&#xA;    systemctl enable NetworkManager&#xA;yaourt&#xA;    vim /etc/pacman.conf&#xA;        [archlinuxfr]&#xA;            SigLevel = Never&#xA;            Server = http://repo.archlinux.fr/$arch&#xA;    pacman -Sy base-devel yaourt&#xA;字体&#xA;    wiki上找font configuration&#xA;AUR&#xA;    git clone https://aur.archlinux.org/snapd.git&#xA;    cd snapd&#xA;    makepkg -si&#xA;    sudo systemctl enable --now snapd.socket&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>测试</title>
      <link>https://ukeate.com/docs/tool/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/tool/test/</guid>
      <description>&lt;h1 id=&#34;基础&#34;&gt;&#xA;  基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;方法&#xA;    TDD                     # Test-Driven Development&#xA;阶段&#xA;    单元测试阶段&#xA;        单元测试&#xA;    集成测试阶段            # 出厂测试&#xA;        冒烟测试            # 测主流程&#xA;        功能测试&#xA;            黑盒&#xA;            灰盒            # 集成测试阶段，黑盒但关注程序内部&#xA;            白盒&#xA;        回归测试&#xA;    系统测试阶段            # 第三方测试&#xA;    验收测试阶段&#xA;    性能测试                # PTS(Performance Testing Service)&#xA;        压力测试            # 系统失效的负载点&#xA;            常规模式        # 稳定并发&#xA;            梯度模式        # 并发梯度递增&#xA;            目标模式        # 并发梯度递增，达到预设指标(CPU、用户数、TPS、RT等)&#xA;        负载测试            # 满足性能指标情况下，最大负载&#xA;        疲劳强度测试        # 长时间执行最大工作量，保证持续业务量指标&#xA;        基准测试            # 统计多少时间内执行了多少次某个方法&#xA;        大数据量测试&#xA;            独立测试        # 针对存储、传输、统计、查询测试&#xA;            综合测试        # 大数据量下压测，负载，疲劳结合&#xA;        全链路压测&#xA;灰度发布                    # 金丝雀发布&#xA;    A/B测试&#xA;    蓝绿测试    &#xA;前端测试&#xA;    structure/behavior(数据结构/行为)问题&#xA;        # 判断是否有此耦合，用一个测试验证: 是否为应用逻辑编写一个单元测试而不需要dom结构存在&#xA;        ## angular中没有这种问题，因为所有定位元素和处理事件的工作都是在angular内部完成的&#xA;        ## 在测试时创建dom，就增加了测试的复杂性。而且页面变化时有更多维护要做。访问dom的操作很慢，测试反馈时间长&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数据库&#34;&gt;&#xA;  数据库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;sysbench&#xA;    # mysql 压测&#xA;    --db-driver=mysql --mysql-host=visitor-bench.ctysoosgzk4k.rds.cn-north-1.amazonaws.com.cn --mysql-user=root --mysql-password=12345678 --threads=512 --events=1000000 --time=0 --report-interval=15 ./bench_visit_page_insert.lua run&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;接口&#34;&gt;&#xA;  接口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%a5%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;jmeter&#34;&gt;&#xA;  jmeter&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jmeter&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;压测场景&#xA;    HEAP=&amp;quot;-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m&amp;quot;&#xA;    jmeter -n -t [jmx file] -l [results file] -e -o [Path to web report folder]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;loadrunner&#34;&gt;&#xA;  loadrunner&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#loadrunner&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;    脚本参数&#xA;        get&#xA;            web_url(&amp;quot;login&amp;quot;,&#xA;                &amp;quot;URL=http://192.168.0.14:9081/ryx-login/sso/login&amp;quot;,&#xA;                &amp;quot;Resource=0&amp;quot;,&#xA;                &amp;quot;RecContentType=text/html&amp;quot;,&#xA;                &amp;quot;Referer=&amp;quot;,&#xA;                &amp;quot;Snapshot=t1.inf&amp;quot;,&#xA;                &amp;quot;Mode=HTML&amp;quot;,&#xA;                EXTRARES,&#xA;                &amp;quot;Url=../ycls/img/banner1.jpg&amp;quot;, ENDITEM,&#xA;                &amp;quot;Url=../ycls/img/banner2.jpg&amp;quot;, ENDITEM,&#xA;                &amp;quot;Url=../ycls/img/banner3.jpg&amp;quot;, ENDITEM,&#xA;                &amp;quot;Url=../ycls/img/userinput.png&amp;quot;, ENDITEM,&#xA;                &amp;quot;Url=../ycls/img/sawtooth.png&amp;quot;, ENDITEM,&#xA;                &amp;quot;Url=../ycls/img/tip2.png&amp;quot;, ENDITEM,&#xA;                &amp;quot;Url=../ycls/img/pwdinput.png&amp;quot;, ENDITEM,&#xA;                &amp;quot;Url=../ycls/img/login_back.png&amp;quot;, ENDITEM,&#xA;                &amp;quot;Url=../ycls/img/tip1.png&amp;quot;, ENDITEM,&#xA;                &amp;quot;Url=../ycls/img/codeinput.png&amp;quot;, ENDITEM,&#xA;                &amp;quot;Url=../ycls/img/loading-small2.gif&amp;quot;, ENDITEM,&#xA;                &amp;quot;Url=/favicon.ico&amp;quot;, &amp;quot;Referer=&amp;quot;, ENDITEM,&#xA;                LAST);&#xA;&#xA;        post参数&#xA;            web_submit_data(&amp;quot;getActivityParameter&amp;quot;,&#xA;                &amp;quot;Action=http://192.168.0.14:9081/tobacco/retail/lottery/getActivityParameter?jsonp=jQuery19109862107675272699_1401335732777&amp;quot;,&#xA;                &amp;quot;Method=POST&amp;quot;,&#xA;                &amp;quot;RecContentType=text/html&amp;quot;,&#xA;                &amp;quot;Referer=http://192.168.0.14:9081/tobacco/retail/index;jsessionid=7BBAFC6DE481FBCB1CB88D738BD7EE71&amp;quot;,&#xA;                &amp;quot;Snapshot=t6.inf&amp;quot;,&#xA;                &amp;quot;Mode=HTML&amp;quot;,&#xA;                ITEMDATA,&#xA;                &amp;quot;Name=requestType&amp;quot;, &amp;quot;Value=ajax&amp;quot;, ENDITEM,&#xA;                LAST);&#xA;&#xA;        post直接传数据&#xA;            web_custom_request(&amp;quot;dataservice&amp;quot;,&#xA;                &amp;quot;URL=http://202.110.222.207:7080/rtserver/rest/resource/tobacco/dataservice&amp;quot;,&#xA;                &amp;quot;Method=POST&amp;quot;,&#xA;                &amp;quot;Resource=0&amp;quot;,&#xA;                &amp;quot;RecContentType=text/plain&amp;quot;,&#xA;                &amp;quot;Referer=&amp;quot;,&#xA;                &amp;quot;Snapshot=t1.inf&amp;quot;,&#xA;                &amp;quot;Mode=HTML&amp;quot;,&#xA;                &amp;quot;Body= {\&amp;quot;trans_code\&amp;quot;:\&amp;quot;1006\&amp;quot;,\&amp;quot;end_date\&amp;quot;:\&amp;quot;20140701\&amp;quot;,\&amp;quot;source\&amp;quot;:\&amp;quot;appkey\&amp;quot;,\&amp;quot;data\&amp;quot;:\&amp;quot;eyJiZWdpbl9kYXRlIjoiMjAxNDA2MDEiLCJlbmRfZGF0ZSI6IjIwMTQwNzAxIiwicG9zX2lkIjoiODg1MDAzMTAiLCJzb3VyY2UiOiJhcHBrZXkiLCJjdXN0b21lcl9pZCI6IjM3MDExMjEwNzQ2NyIsImFjY2Vzc190b2tlbiI6IiJ9\&amp;quot;,\&amp;quot;begin_date\&amp;quot;:\&amp;quot;20140601\&amp;quot;,\&amp;quot;mac\&amp;quot;:\&amp;quot;123\&amp;quot;,\&amp;quot;pos_id\&amp;quot;:\&amp;quot;88500310\&amp;quot;,\&amp;quot;customer_id\&amp;quot;:\&amp;quot;370112107467\&amp;quot;,\&amp;quot;access_token\&amp;quot;:\&amp;quot;\&amp;quot;}&amp;quot;,&#xA;                LAST);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;phoenix&#34;&gt;&#xA;  phoenix&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#phoenix&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;    介绍&#xA;            web自动化测试工具&#xA;    特点&#xA;            分布式执行&#xA;            无脚本模式执行&#xA;            无人值守模式执行&#xA;            自定模式执行&#xA;    模块&#xA;            数据维护模块&#xA;    部署模式&#xA;            server-client&#xA;                    仅windows下可用&#xA;                    socket通信&#xA;            web部署&#xA;                    server与client放到tomcat或webLogic下部署&#xA;                    http通信&#xA;                    web页面控制与监控client端执行&#xA;&#xA;wireshark&#xA;siege&#xA;        siege -c 200 -r 100 http://www.google.com&#xA;                # 200并发，发送100次请求&#xA;tcpcopy&#xA;        # 基于tcp packets的请求复制工具, 在线流量导入到测试系统中&#xA;ab&#xA;        内网测试, apache自带的压力测试工具, 安装apache后在bin目录中找到&#xA;        ab -n1000 -c100 http://www.google.com/a.html&#xA;                # 100并发, 发送1000次请求&#xA;locust&#xA;        # 外网性能测试　&#xA;http_load&#xA;        # 压测&#xA;        http_load -rate 5 -seconds 10 http://www.baidu.com&#xA;                # -p 并发&#xA;                # -f 总计访问数&#xA;                # -r 每秒访问频率&#xA;                # -s 总计访问时间&#xA;yslow&#xA;        # firefox插件，网页性能测试工具&#xA;gatling&#xA;        # dsl脚本, 生成报表&#xA;wrk&#xA;        # 压测&#xA;        wrk -R5000 -d10s &amp;quot;http://internal-rope-api-1875734411.cn-north-1.elb.amazonaws.com.cn/online_agents/1&amp;quot;&#xA;swagger&#xA;        # 文档与测试用例&#xA;fortio&#xA;        # istio压测工具&#xA;hey&#xA;        # http压测&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;js&#34;&gt;&#xA;  js&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#js&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;heapdump&#xA;        # 堆内存快照&#xA;jslint&#xA;supertest&#xA;        # 测http接口&#xA;sinon.js&#xA;        # 非运行测试，延时测试等&#xA;vows&#xA;        # asynchronous BDD(behaviour drven development) for Node&#xA;chai&#xA;        # js断言&#xA;mock.js&#xA;        # 模拟生成接口假数据&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;benchmark&#34;&gt;&#xA;  benchmark&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#benchmark&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;        测试代码执行性能&#xA;使用&#xA;        var Benchmark = require(&#39;benchmark&#39;);&#xA;        var suite = new Benchmark.Suite;&#xA;&#xA;        var int1 = function(str){&#xA;                return +str;&#xA;        };&#xA;        var int2 = function(str){&#xA;                return parseInt(str, 10);&#xA;        };&#xA;        var int3 = function(str){&#xA;                return Number(str);&#xA;        };&#xA;        // 开始测试&#xA;        var number = &#39;100&#39;;&#xA;        suite&#xA;        .add(&#39;+&#39;, function(){&#xA;                int1(number);&#xA;        });&#xA;        .add(&#39;parseInt&#39;, function(){&#xA;                int2(number);&#xA;        });&#xA;        .add(&#39;Number&#39;, function(){&#xA;                int3(number);&#xA;        });&#xA;        .on(&#39;cycle&#39;, function(event){        // 每个测试跑完后输出信息&#xA;                console.log(String(event.target));&#xA;        })&#xA;        .on(&#39;complete&#39;, function(){&#xA;                console.log(&#39;Fastest is&#39; + this.filter(&#39;fastest&#39;).pluck(&#39;name&#39;));&#xA;        })&#xA;        .run({&#39;async&#39;: true});                    // 这里async与时间计算有关，默认为true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;travis&#34;&gt;&#xA;  travis&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#travis&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    项目node版本测试，在基本依赖下跑&#xA;使用&#xA;    在travis上授权仓库，每当push代码到github, 会自动跑测试&#xA;    配置根目录下的.travis.yml文件来配置测试内容，如&#xA;        language: node_js&#xA;        node_js:&#xA;        -&#39;0.8&#39;&#xA;        -&#39;0.10&#39;&#xA;        -&#39;0.11&#39;&#xA;        script: make test&#xA;        services:&#xA;            mongodb&#xA;            # 一个使用了mongodb的nodejs应用，用0.8、0.10、0.11三个版本来跑，跑测试的命令是make test&#xA;    travis测试的项目，可以得到一个图片地址，显示项目当前的测试通过状态，把这个图片添加到项目的README中&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;jasmine&#34;&gt;&#xA;  jasmine&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jasmine&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    编写单元测试&#xA;使用&#xA;    describe(&amp;quot;A suite&amp;quot;, function(){&#xA;        var foo;&#xA;        beforeEach(function(){&#xA;                foo = 0;&#xA;                foo += 1;&#xA;        });&#xA;        afterEach(function(){&#xA;                foo = 0;&#xA;        });&#xA;        it(&amp;quot;contains spec with an expectation&amp;quot;, function(){&#xA;                expect(true).toBe(true);&#xA;        });&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;should&#34;&gt;&#xA;  should&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#should&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    兼容性测试&#xA;安装&#xA;    npm install should --save-dev&#xA;使用&#xA;var should = require(&#39;should&#39;);&#xA;&#xA;user.should.have.property(&#39;name&#39;, &#39;jack&#39;)&#xA;    # should(user).have.property(&#39;name&#39;,&#39;jack&#39;);&#xA;user.should.have.property(&#39;pets&#39;).with.lengthOf(4);&#xA;    # 判断数组&#xA;should.not.exist(err);&#xA;should.exist(result);&#xA;result.bar.should.equal(foo);&#xA;(5).should.be.exactly(5).and.be.a.Number();&#xA;user.should.be.an.instanceOf(Object).and.have.property(&#39;name&#39;, &#39;jack&#39;);&#xA;this.obj.should.have.property(&#39;id&#39;).which.is.a.Number();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;memwatch&#34;&gt;&#xA;  memwatch&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#memwatch&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    监控内存leak, stats,leak在连续5次垃圾回收后内存没释放时触发, stats事件在垃圾回收时触发&#xA;&#xA;o-&amp;gt; 堆内存比较&#xA;var memwatch = require(&#39;memwatch&#39;)&#xA;var leakArray = []&#xA;var leak = function () {&#xA;    leakArray.push(&#39;leak&#39; + Math.random())&#xA;}&#xA;var hd = new memwatch.HeapDiff()&#xA;for (var i = 0; i &amp;lt; 10000; i++) {&#xA;    leak()&#xA;}&#xA;&#xA;var diff = hd.end()&#xA;console.log(JSON.stringify(diff, null, 2))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;muk&#34;&gt;&#xA;  muk&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#muk&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;var muk = require(&#39;muk&#39;)&#xA;before(function () {&#xA;    muk(fs, &#39;readFileSync&#39;, function (path, encoding) {&#xA;        throw new Error(&#39;mock readFileSync error&#39;)&#xA;    })&#xA;    muk(fs, &#39;readFile&#39;, function (path, encoding, callback) {&#xA;        process.nextTick(function () {&#xA;            # 模拟异步&#xA;            callback(new Error(&#39;mock readFile error&#39;))&#xA;        })&#xA;    })&#xA;})&#xA;&#xA;after(function () {&#xA;    muk.restore()&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;rewire&#34;&gt;&#xA;  rewire&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rewire&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    测试私有方法&#xA;&#xA;o-&amp;gt;&#xA;it(&#39;limit should return success&#39;, function () {&#xA;    var lib = rewire(&#39;../lib/index.js&#39;)&#xA;    var litmit = lib.__get__(&#39;limit&#39;)&#xA;    litmit(10).should.be.equal(10)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;mocha&#34;&gt;&#xA;  mocha&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mocha&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    单元测试框架&#xA;命令&#xA;    mocha&#xA;        # --reporters 查看所有报告样式, 默认dot, 常用spec, json, html-cov&#xA;        # -R &amp;lt;reporter&amp;gt;采用某报告样式&#xA;        # -t &amp;lt;ms&amp;gt;设置超时时间&#xA;使用&#xA;    npm install -g mocha&#xA;    // package.json&#xA;    {&#xA;        &amp;quot;scripts&amp;quot;: {&#xA;            &amp;quot;test&amp;quot;: &amp;quot;mocha test&amp;quot;&#xA;            &amp;quot;blanket&amp;quot;: {&#xA;                &amp;quot;pattern&amp;quot;: &amp;quot;//^((?!(node_modules|test)).)*$/&amp;quot;,&#xA;                &amp;quot;data-cover-flags&amp;quot;: {&#xA;                    &amp;quot;debug&amp;quot;: false&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;    mocha test&#xA;&#xA;o-&amp;gt; bdd风格&#xA;describe(&#39;Array&#39;, function() {&#xA;    before(function() {})&#xA;        # 钩子函数还有after, beforeEach, afterEach&#xA;    it(&#39;should return -1 when not present&#39;, function (done) {&#xA;        [1,2,3].indexOf(4).should.equal(-1)&#xA;        this.timeout(500)&#xA;            # 500ms后超时&#xA;        done()&#xA;            # 用done来测试异步&#xA;    })&#xA;})&#xA;&#xA;o-&amp;gt; bdd风格&#xA;suite(&#39;Array&#39;, function() {&#xA;    setup(function () {})&#xA;        # 钩子函数还有teardown&#xA;    suite(&#39;$indexOf()&#39;, function () {&#xA;        test(&#39;should return -1 when not present&#39;, function() {&#xA;            assert.equal(-1, [1,2,3].indexOf(4))&#xA;        })&#xA;    })&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;istanbul&#34;&gt;&#xA;  istanbul&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#istanbul&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    名字是依斯坦布尔，用来白盒覆盖用例测试&#xA;    支持的use cases有unit tests, browser tests, server side code embedding&#xA;使用&#xA;    instanbul cover test.js&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;phantomjs&#34;&gt;&#xA;  phantomjs&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#phantomjs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    前端测试工具&#xA;    webkit js测试工具，支持多web标准, dom, css, json, canvas和svg&#xA;o-&amp;gt; 使用1&#xA;    npm install mocha-phantomjs&#xA;    mocha-phantomjs index.html&#xA;&#xA;o-&amp;gt; 使用2&#xA;    phantomjs hello.js&#xA;&#xA;    // hello.js&#xA;    console.log(&#39;Hello, world&#39;);&#xA;    phantom.exit();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;browserstack&#34;&gt;&#xA;  browserstack&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#browserstack&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    前端测试工具&#xA;    内建webdriver的api&#xA;使用&#xA;    npm install browserstack-runner --save-dev&#xA;    ./node_modules/.bin/browserstack-runner init&#xA;    // browserstack.json&#xA;        &amp;quot;test_framework&amp;quot;: &amp;quot;mocha&amp;quot;,&#xA;        &amp;quot;timeout&amp;quot;: 60,&#xA;        &amp;quot;test_path&amp;quot;: &amp;quot;public/index.html&amp;quot;&#xA;    https://www.browserstack.com/accounts/automate&#xA;        得到username 和 access key&#xA;        复制到browserstack.json中的username和key&#xA;    browserstack-runner&#xA;    https://www.browserstack.com/automate 查看结果&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;karma&#34;&gt;&#xA;  karma&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#karma&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    是google Testacular的新名字，自动化完成单元测试&#xA;使用&#xA;    npm install -g karma&#xA;    karma start&#xA;    karma init&#xA;        # 初始化karma配置文件&#xA;    npm install karma-jasmine&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;jscover&#34;&gt;&#xA;  jscover&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jscover&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    覆盖率测试&#xA;使用&#xA;    npm install jscover -g&#xA;    jscover lib lib-cov&#xA;        # 把lib下的源码编译到lib-cov下，新代码在每一行加上了执行次数统计&#xA;    index.js中&#xA;        module.exports = process.env.LIB_COV ? require(&#39;./lib-cov/index&#39;) : require(&#39;./lib/index&#39;)&#xA;    export LIB_COV=1&#xA;    mocha -R html-cov &amp;gt; coverage.html&#xA;        # 生成结果&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;blanket&#34;&gt;&#xA;  blanket&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#blanket&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    比jscover更好的测试工具&#xA;使用&#xA;    package.json中&#xA;        &amp;quot;scripts&amp;quot;: {&#xA;            &amp;quot;blanket&amp;quot;: {&#xA;                &amp;quot;pattern&amp;quot;: &amp;quot;eventproxy/lib&amp;quot;&#xA;                    # 要测试的源码目录&#xA;            }&#xA;        }&#xA;    mocha --require blanket -R html-cov &amp;gt; coverage.html&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;python&#34;&gt;&#xA;  python&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#python&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;nose&#xA;    # 注解测试&#xA;selenium&#xA;    # 自动化测试&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;go&#34;&gt;&#xA;  go&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;gomock&#xA;    # 官方mock库, 对接口mock&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;monkey&#34;&gt;&#xA;  monkey&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#monkey&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    对函数mock&#xA;Patch()&#xA;Unpatch()&#xA;PatchInstanceMethod()&#xA;UnpatchInstanceMethod()&#xA;&#xA;问题&#xA;    内联函数不能mock&#xA;        测试时禁止内联, go test -gcflags=all=&amp;quot;-N -l&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;java&#34;&gt;&#xA;  java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;hamcrest&#34;&gt;&#xA;  hamcrest&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hamcrest&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 自然语法&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;mockito&#34;&gt;&#xA;  mockito&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mockito&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h1 id=&#34;页面&#34;&gt;&#xA;  页面&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a1%b5%e9%9d%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;jsperf&#xA;    # js性能分析&#xA;jasmine&#xA;    # js单元测试&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;移动&#34;&gt;&#xA;  移动&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%a7%bb%e5%8a%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;robotium&#xA;    # android自动化测试&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
