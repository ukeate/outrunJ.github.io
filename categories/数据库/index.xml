<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on ukeate的笔记</title>
    <link>https://ukeate.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on ukeate的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 03 Jul 2020 16:15:45 +0800</lastBuildDate>
    <atom:link href="https://ukeate.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mongodb</title>
      <link>https://ukeate.com/docs/db/mongodb/</link>
      <pubDate>Thu, 11 Oct 2018 16:00:15 +0800</pubDate>
      <guid>https://ukeate.com/docs/db/mongodb/</guid>
      <description>&lt;h1 id=&#34;特点&#34;&gt;&#xA;  特点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%89%b9%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;    数据结构json(bson)&#xA;    易写入，易修改&#xA;    c++编写&#xA;    分布式&#xA;    介于关系数据库 和 非关系数据库之间&#xA;    查询语句强&#xA;    支持索引&#xA;    bson格式&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;注意&#34;&gt;&#xA;  注意&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b3%a8%e6%84%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;    document不能大于4Mb&#xA;    可以非安全模式异步马上成功&#xA;    每个连接用队列存储命令&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数据结构定义&#34;&gt;&#xA;  数据结构定义&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e5%ae%9a%e4%b9%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;    collection                                        # 表&#xA;            document                                # 记录&#xA;                    field(key, value)                # 字段(field)与值(value)&#xA;    与关系型数据库的区别&#xA;            document中的field不要key俱全或一样&#xA;            find()命令查询&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;bson的数据类型&#34;&gt;&#xA;  bson的数据类型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bson%e7%9a%84%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;    ＃bson 是json的扩展&#xA;     # 增加了数据类型&#xA;     # 把json数据转换成二进制码存到文件&#xA;    null&#xA;    boolean&#xA;    undefined&#xA;    数组                                # 如{gps: [20, 56]}&#xA;    32位和64位整数                # shell中不支持&#xA;                                    ## node.js python java等高级语言的驱动中支持&#xA;    64位浮点                        # shell使用的全是这种类型, 如{x:3.14}&#xA;    utf-8                                # 字符串类型&#xA;    ObjectID&#xA;    Date                                # 如{x:new Date()}&#xA;    正则                                # 如{x:/uspcat/i}&#xA;    javascript块代码                # 如{x:function(){}}&#xA;                                    ## 相当于存储过程&#xA;    内嵌文档                        # 如{x: {xx: &amp;quot;a&amp;quot;}}&#xA;    二进制                                # shell中不能使用&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;objectid&#34;&gt;&#xA;  ObjectId&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#objectid&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;    大小&#xA;            12字节&#xA;            显示为24个十六进制字符&#xA;            # 空间换时间的思想&#xA;    细节&#xA;            前4字节是unix时间戳&#xA;            后3字节集群machine hash&#xA;            后2字节pid&#xA;            后3字节inc自增计数器, 在前面都相等时全局自增&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;命名&#34;&gt;&#xA;  命名&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%91%bd%e5%90%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;    数据库与集合名&#xA;            不能是空字符串&#xA;            特殊字符&#xA;                    &#39; (空格) , $ / \ \0&#xA;            应该全小写&#xA;            小于64字节&#xA;            数据库名不与保留库名相同，如&#xA;                    admin, local, config&#xA;    集合名&#xA;            db-text合法，但不能db.db-text得到，要db.getCollection(&amp;quot;db-text&amp;quot;).text得到&#xA;                    # db-text 会认为是减法&#xA;                    ## 数据库名可以是db-text&#xA;            可以a.b来命名来划分子集合&#xA;                    不能以system.开头命名&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;api&#34;&gt;&#xA;  api&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#api&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;collection&#xA;        增&#xA;                save&#xA;                        # 不存在时插入，存在时更新&#xA;                        # {$ref: &#39;user&#39;, $id: 1} 来保存引用&#xA;                insert&#xA;        删&#xA;                remove(&#39;id&#39;: &#39;bar&#39;)        # 删除一条数据&#xA;                                                                        #remove()删除所有数据&#xA;                drop()                                # 删除persons collection, 不释放文件空间&#xA;                dropIndexes()                        # 删除所有索引&#xA;        改&#xA;                update(finder, updater, options或upser, multi)&#xA;                        # $set&#xA;                        # {age: {$gt: 18}, $isolated : 1} $isolated事务隔离该字段到本语句执行结束, does not work with sharded clusters&#xA;                findAndModify&#xA;        查&#xA;                findOne()&#xA;                find(finder, filter)&#xA;                        # limit(3).skip(10).sort({name: -1, age: 1})&#xA;                        ## sort({$natural: 1}) 固定集合排序&#xA;                        # explain() 返回带统计信息的文档&#xA;                        ## 是否用到索引，耗时，需要扫描多少文件&#xA;                        # hint({}) 强制使用某索引查询&#xA;                        # null可以匹配null, 也可以匹配{$exists: false}        &#xA;                        # 正则可以匹配自身，也可以模式字符串&#xA;                count()                                # document的条数&#xA;                aggregate&#xA;&#xA;db&#xA;        # 默认存在的数据库admin, config, local&#xA;        sources&#xA;                # 从节点中设置的源collection&#xA;        help()&#xA;        persons.help()&#xA;                # 显示某集合的帮助&#xA;        auth(&#39;username&#39;, &#39;pwd&#39;)&#xA;                # 切换用户&#xA;        addUser()&#xA;                # addUser(&#39;admin&#39;, &#39;asdf&#39;)&#xA;                # addUser(&#39;readonly&#39;, &#39;asdf&#39;, true)&#xA;        listCommands()&#xA;        shutdownServer()&#xA;        eval()&#xA;                # 执行&#xA;        stats()                                        &#xA;                # 当前数据库的状态&#xA;                ## 包括名称，collection数，索引数等&#xA;        createCollection()&#xA;                # {&#39;user&#39;, {capped: true, size: 100, max: 10}} &#xA;                ## 创建固定集合, 100字节, 文档数上限为10&#xA;                ## 固定集合插入快，不能删除，无_id, 有尾部游标&#xA;        getCollection(&amp;quot;persons&amp;quot;).text&#xA;                # 同db.persons        &#xA;        dropDatabase()&#xA;                # 删除当前数据库        &#xA;        repairDatabase()&#xA;                # 释放空间&#xA;        serverStatus()&#xA;                # 返回数据库的metrics 数据&#xA;        serverStatus().metrics.cursor&#xA;                # 返回指针信息&#xA;        ensureIndex({x: 1, y: -1}, {name: &#39;xy&#39;})&#xA;                # 建立x的升序, y的降序联合索引&#xA;                # 只使用索引的前部, 即对x的查询可以用该索引&#xA;                # {&amp;quot;gps&amp;quot;: &#39;2d&#39;} {&#39;gps&#39;: &#39;2dsphere&#39;}&#xA;                ## 支持gps写成 [0, 0] {x: 0, y: 0} {latitude: 0, longitude: 0} 格式&#xA;                # 可以索引内嵌文档&#xA;                # {unique: true} 来建立唯一索引&#xA;                # {dropDups: true} 将唯一索引中重复的文档都删掉&#xA;        dropIndexes&#xA;        system&#xA;                indexes&#xA;                        # 保留集合，索引&#xA;                namespaces&#xA;                        # 也包含索引信息&#xA;                js&#xA;                        insert({_id: &#39;fn&#39;, value: function() {}})&#xA;                                # 用db.eval(&#39;fn()&#39;) 执行&#xA;        runCommand()&#xA;                # {&#39;dropIndexes&#39;: &#39;col&#39;, &#39;index&#39;: &#39;ind&#39;}&#xA;                # 可以返回命名执行的状态信息&#xA;                {buildInfo: 1}&#xA;                {collStats: &#39;user&#39;}&#xA;                {distinct: &#39;user&#39;, key: a, query: {b: 0}}&#xA;                {drop: &#39;user&#39;}&#xA;                {dropDatabase: 1}&#xA;                {dropIndexes: &#39;user&#39;, index: &#39;ind&#39;}&#xA;                {getLastError: 1}&#xA;                        # 上次更新的作用信息&#xA;                        {getLastError: 1, w: 3}&#xA;                                # 阻塞复制，有3个节点&#xA;                {isMaster: 1}&#xA;                {findAndModify: &#39;user&#39;, query: {a: 0}, sort: {a: 1}, update: {$set: {a: 1}}}&#xA;                {listCommands: 1}&#xA;                {listDatabases: 1}&#xA;                {ping: 1}&#xA;                {renameCollection: &#39;user&#39;, to: &#39;user1&#39;}&#xA;                {repairDatabase: 1}&#xA;                        # 修复并压缩当前数据库&#xA;                {serverStatus: 1}&#xA;                        # globalLock: 全局写入锁占用了多少时间&#xA;                        # mem: 内存映射了多少数据&#xA;                        # indexCounters: B树磁盘检索(misses)和内存检索(hits)的次数&#xA;                        # backgroundFluhing: 后台做了多少次fsync及用的时间&#xA;                        # opcounters: 每种主要操作的次数&#xA;                        # asserts: 断言的次数&#xA;                {convertToCapped: &#39;user&#39;, size: 100}&#xA;                        # 转为固定集合&#xA;                {fsync: 1, lock: 1}&#xA;                        # 缓冲写入磁盘，并加写入锁。后可以直接复制磁盘数据来备份&#xA;                        # db.$cmd.sys.unlock.findOne() 解锁&#xA;                        # db.currentOp() 查看为空时已解锁&#xA;                {resync: 1}&#xA;                        # 从节点重新同步&#xA;                {collMod: &#39;users&#39;, usePowerOf2Sizes: true}&#xA;                        # 每次增大空间总是2的倍数，适用于常写的集合&#xA;rs&#xA;        isMaster&#xA;        slaveOk&#xA;dcl&#xA;        help                                        # 显示帮助&#xA;        show dbs                                # 显示所有数据库&#xA;        use mydb                                # 选择数据库(默认为test)&#xA;                                                ## 如果没有该数据库，则创建(插入第一条数据时实际创建)&#xA;        db                                        # 显示当前数据库名&#xA;        show collections                        # 查看当前数据库的collections&#xA;        db.eval()                                # 执行shell语法字符串&#xA;&#xA;        用户管理命令&#xA;                use test                                # 选择需要添加用户的数据库&#xA;                db.addUser(&#39;name&#39;,&#39;pwd&#39;)                # 第三个参数代表是否只读 true代表是 ,  false代表否&#xA;                                                        ## db 代表本数据库，也就是test&#xA;                db.system.users.find()                        # 查看用户列表&#xA;                db.auth(&#39;name&#39;,&#39;pwd&#39;)                # 用户认证，反回１代表认证成功&#xA;                db.removeUser(&#39;name&#39;)&#xA;                show users                                # 查看所有用户&#xA;&#xA;                        # 注&#xA;                                权限生效需要mongod　以　-auth参数启动&#xA;                                admin数据库中的user是超级管理员 , 其他数据库中的user只限于本数据库&#xA;&#xA;ttl(time to live)&#xA;        # mongodb每1分钟检查一次数据删除&#xA;        db.log_events.ensureIndex({&amp;quot;createdAt&amp;quot;: 1}, {expireAfterSeconds: 3600 })&#xA;        db.log_events.insert({&#xA;                &amp;quot;createdAt&amp;quot;: new Date(),&#xA;                &amp;quot;logEvent&amp;quot;: 2,&#xA;                &amp;quot;logMessage&amp;quot;: &amp;quot;Success!&amp;quot;&#xA;        })&#xA;                # 插入的这条数据在1小时后删除&#xA;        db.log_events.ensureIndex({&amp;quot;expireAt&amp;quot;: 1}, {expireAfterSeconds: 0})        &#xA;        db.log_events.insert({&#xA;                &amp;quot;expireAt&amp;quot;: new Date(&#39;July 22, 2013 14:00:00&#39;),&#xA;                &amp;quot;logEvent&amp;quot;: 2,&#xA;                &amp;quot;logMessage&amp;quot;: &amp;quot;Success!&amp;quot;&#xA;        })&#xA;                # 插入的这条数据在July 22, 2013 14:00:00删除&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;aggregate&#34;&gt;&#xA;  aggregate&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aggregate&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;mapReduce(&#xA;        function() {emit(this.cust_id, this.amount);},&#xA;                # map&#xA;        function(key, values) {return Array.sum(values)},&#xA;                # reduce&#xA;        {&#xA;                query: {status: &#39;A&#39;},&#xA;                        # query&#xA;                out: &#39;order_totals&#39;&#xA;                        # output&#xA;        } &#xA;)&#xA;&#xA;distinct()&#xA;&#xA;count()&#xA;&#xA;group({&#xA;        key: {a: 1},&#xA;                # $keyf: function(x) {return x.category} 定义分组函数&#xA;        cond: {a: {$lt: 3}}.&#xA;        $reduce: function(cur, result) {result.count += cur.count},&#xA;        initial: {count: 0},&#xA;        finalize: function (prev) {}&#xA;})&#xA;        # 返回的文档 {retval: [], count: 0, keys: 0, ok: 0}&#xA;aggregate([&#xA;        {$redact: {$cond: {&#xA;                if: {$eq: [&#39;$level&#39;, 5]},&#xA;                then: &#39;$$PRUNE&#39;,&#xA;                else: &#39;$$DESCEND&#39;&#xA;        }}}&#xA;        {$match: {status: &#39;A&#39;}},&#xA;        {$geoNear: {...}},&#xA;        {$project: {name: {$toUpper: &#39;$_id&#39;}, _id: 0}},&#xA;        {$unwind: &#39;$sizes&#39;},&#xA;        {$group: {_id: &#39;$state&#39;, totalPop: {$sum: &#39;$pop&#39;}}},&#xA;        {$skip: 10},&#xA;        {$limit: 5},&#xA;        {$sort: {age: -1}},&#xA;        {$out: &#39;authors&#39;}&#xA;])&#xA;&#xA;例子&#xA;    o-&amp;gt; 得到tags数组的长度&#xA;    db.users.aggregate([{&#xA;            $group: {&#xA;                    _id: &#39;$username&#39;,&#xA;                    tags_count: {$first: {$size: &#39;$tags&#39;}}&#xA;            }&#xA;    }])&#xA;    db.users.aggregate([{&#xA;            $project: {&#xA;                    tags_count: {$size: &#39;$tags&#39;}&#xA;            }&#xA;    }])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;expressions&#34;&gt;&#xA;  expressions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#expressions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;$and&#xA;$or&#xA;$not&#xA;$setEquals&#xA;$setIntersection&#xA;$setUnion&#xA;$setDefference&#xA;$setIsSubset&#xA;$anyElementTrue&#xA;$allElementsTrue&#xA;$cmp&#xA;$eq&#xA;$gt&#xA;$gte&#xA;$lt&#xA;$lte&#xA;$ne&#xA;$add&#xA;$subtract&#xA;$multiply&#xA;$divide&#xA;$mod&#xA;$concat&#xA;$substr&#xA;$toLower&#xA;$toUpper&#xA;$strcasecmp&#xA;$meta&#xA;$size&#xA;$map&#xA;$let&#xA;$literal&#xA;$dayOfYear&#xA;$dayOfMonth&#xA;$dayOfWeek&#xA;$year&#xA;$month&#xA;$week&#xA;$hour&#xA;$minute&#xA;$second&#xA;$millisecond&#xA;$dateToString&#xA;$cond&#xA;$ifNull&#xA;$sum&#xA;$avg&#xA;$first&#xA;$last&#xA;$max&#xA;$min&#xA;$push&#xA;$addToSet&#xA;$near&#xA;$within&#xA;$box&#xA;$center&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;对象&#34;&gt;&#xA;  对象&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%af%b9%e8%b1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;全局函数&#xA;        printjson&#xA;        connect(&#39;localhost:27017/mydb&#39;)&#xA;                # 连接另一个服务器&#xA;        runProgram&#xA;对象类型&#xA;        cursor&#xA;                hasNext()&#xA;                        # 立即返回前100个数据与4Mb数据的较小者。取数据时直接读缓存&#xA;                next()&#xA;                forEach&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;复制&#34;&gt;&#xA;  复制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%8d%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;复制&#xA;        mongod --master --oplogSize 100&#xA;        mongod --slave --source localhost:27017&#xA;                # --source指定主节点&#xA;                # --only 指定只复制特定的数据库&#xA;                # --slavedelay 主从复制时的延时&#xA;                # --fastsync 从节点是主节点快照时，加这个选项，同步速度快&#xA;                # --autoresync 重新同步&#xA;                # --oplogSize 主节点oplog的大小&#xA;        db.sources.insert({host: &#39;localhost:27017&#39;})&#xA;                # 从节点设置主节点&#xA;&#xA;副本集&#xA;        #  没有主节点，集群自己选举主节点&#xA;        # 数据太多从节点会自动停止同步&#xA;        mongod --dbpath &#39;/var/local/mongo1&#39; --port 27017 --replSet rs0&#xA;                # 三个实例replSet 名必叫 rs0&#xA;        use admin&#xA;        rs.initiate({&#xA;                _id: &#39;a&#39;,&#xA;                members: [{&#xA;                        _id: 1,&#xA;                        host: &#39;localhost1:27017&#39;&#xA;                }, {&#xA;                        _id: 2,&#xA;                        host: &#39;localhost1:27018&#39;&#xA;                }]&#xA;        })&#xA;                # 其中一台执行初始化&#xA;        rs.add(&#39;localhost:27019&#39;)&#xA;        rs.status()&#xA;        db.getMongo().setSlaveOk()&#xA;        rs.isMaster()&#xA;        rs.conf()&#xA;        db.getReplicationInfo()&#xA;        db.printReplicationInfo()&#xA;        db.printSlaveReplicationInfo()&#xA;        use local        &#xA;        db.addUser(&#39;name&#39;, &#39;pwd&#39;)&#xA;                # 复制认证时用&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;分片&#34;&gt;&#xA;  分片&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;mongods --port 3000 --configdb localhost:27017&#xA;        # 多个地址用,隔开&#xA;        # 每个片都就是副本集&#xA;mongo localhost:3000/admin&#xA;db.runCommand({addshard: &#39;localhost:27017‘, allowLocal: true})&#xA;        # 在localhost上运行时, 要设allowLocal&#xA;        # &#39;a/localhost:27017&#39; 让mongo知道这个片所在的副本集&#xA;db.runCommand({enablesharding: &#39;db1&#39;})&#xA;db.runCommand({shardcollection: &#39;db1.user&#39;, key: {_id: 1}})&#xA;db.printShardingStatus()&#xA;db.runCommand({removeshard: &#39;localhost:27017&#39;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;shell&#34;&gt;&#xA;  shell&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#shell&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;mongo 127.0.0.1:27017/admin&#xA;        # 启动sell , 默认数据库为test&#xA;mongod –port 10000 –fork –logpath= logpath=/data/mongodb/log/mongodb.log -- logappend -- dbpath=/data/mongodb/data/db –config ~/.mongodb.conf &#xA;        # 启动服务 -auth开启身份验证&#xA;        # --rest 开启http管理，其端口号比mongo端口号大1000&#xA;        ## --nohttpinterface关闭http管理&#xA;        # --bindip localhost 设置只能有某ip访问&#xA;        # --noscripting 完全禁止服务端js执行&#xA;        # --repair 启动并修复&#xA;        # 不要发送SIGKILL信号关闭(kill -9), 应发送SIGINT或SIGTERM&#xA;        mongod --remove                                &#xA;                # 结束服务&#xA;        // mongodb.conf&#xA;                port = 5586&#xA;                fork = true&#xA;                logpath = mongodb.log&#xA;mongodump --host 127.0.0.1 --port 27017 --out ./dir/name&#xA;        # 备份数据库&#xA;mongodump -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -o 文件存在路径&#xA;mongorestore --host 127.0.0.1 --port 27017 --directoryperdb ./dir/name&#xA;        # mongorestore -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 --drop 文件存在路径&#xA;        # --drop 是先删除现有的数据&#xA;mongoexport -d tank -c users -o /home/outrun/mongo&#xA;        # 导出整张表&#xA;        ## mongoexport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 -f 字段 -q 条件导出 --csv -o 文件名&#xA;        # mongoexport -d tank -c users --csv -f uid,name,sex -o tank/users.csv &#xA;        ## 导出表的部分字段&#xA;        # mongoexport -d tank -c users -q &#39;{uid:{$gt:1}}&#39; -o tank/users.json&#xA;        ## 根据条件导出数据&#xA;mongoimport -d tank -c users --upsert tank/users.dat&#xA;        # mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --upsert --drop 文件名 &#xA;        ## 还原整表导出的非csv文件,  --upsert 表示插入或更新现有数据&#xA;        # mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --upsertFields 字段 --drop 文件名&#xA;        ## 还原部分字段导出的文件, --upsertFields跟upsert一样&#xA;        ## 如 mongoimport -d tank -c users  --upsertFields uid,name,sex  tank/users.dat&#xA;        # mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --type 类型 --headerline --upsert --drop 文件名  &#xA;        ## 还原导出的csv文件&#xA;        ## mongoimport -d tank -c users --type csv --headerline --file tank/users.csv&#xA;mongofiles put foo.txt&#xA;        # 使用gridfs&#xA;        list&#xA;        get foo.txt&#xA;        search&#xA;                # 按文件名查找&#xA;        delete foo.txt&#xA;mongostat&#xA;        # 实时输出mongo状态&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;java-client&#34;&gt;&#xA;  java client&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#java-client&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;1.导入mongo-java-drver-2.9.3.jar&#xA;2.api&#xA;        Mongo m = new Mongo(&amp;quot;localhost&amp;quot;, 27017);&#xA;        DB db = m.getDB(&amp;quot;mydb&amp;quot;);&#xA;        boolean auth = db.authenticate(&amp;quot;root&amp;quot;, &amp;quot;root&amp;quot;.toCharArray());&#xA;        System.out.println(&amp;quot;身份认证&amp;quot; + auth);&#xA;        // 获得所有数据库名&#xA;        for (String s : m.getDatabaseNames()) {&#xA;                System.out.println(&amp;quot;db : &amp;quot; + s);&#xA;        }&#xA;        // 删除数据库&#xA;        m.dropDatabase(&amp;quot;my_new_db&amp;quot;);&#xA;        // 获得collection列表&#xA;        Set&amp;lt;String&amp;gt; colls = db.getCollectionNames();&#xA;        for (String s : colls) {&#xA;                System.out.println(&amp;quot;collection : &amp;quot; + s);&#xA;        }&#xA;        // 获得一个collection&#xA;        DBCollection coll = db.getCollection(&amp;quot;testCollection&amp;quot;);&#xA;        // 创建document(包括内嵌文档)&#xA;        DBObject doc = new BasicDBObject().append(&amp;quot;appendField&amp;quot;, &amp;quot;appendField&amp;quot;);&#xA;        doc.put(&amp;quot;name&amp;quot;, &amp;quot;MongoDB&amp;quot;);&#xA;        doc.put(&amp;quot;type&amp;quot;, &amp;quot;database&amp;quot;);&#xA;        doc.put(&amp;quot;count&amp;quot;, 1);&#xA;        DBObject info = new BasicDBObject();&#xA;        info.put(&amp;quot;x&amp;quot;, 203);&#xA;        info.put(&amp;quot;y&amp;quot;, 102);&#xA;        doc.put(&amp;quot;info&amp;quot;, info);&#xA;        // 插入文档&#xA;        coll.insert(doc);&#xA;        // 查询文档&#xA;        DBObject doc2 = coll.findOne();&#xA;        System.out.println(doc2);&#xA;        // 统计文档数&#xA;        long count = coll.getCount();&#xA;        System.out.println(count);&#xA;        // 用游标遍历&#xA;        DBCursor cursor = coll.find();&#xA;        while (cursor.hasNext()) {&#xA;                DBObject object = cursor.next();&#xA;                System.out.println(object);&#xA;        }&#xA;        // 查询&#xA;        DBObject query = new BasicDBObject();&#xA;        query.put(&amp;quot;i&amp;quot;, 71);&#xA;        cursor = coll.find(query);&#xA;        // 条件查询&#xA;        query = new BasicDBObject();&#xA;        query.put(&amp;quot;i&amp;quot;, new BasicDBObject(&amp;quot;$gt&amp;quot;, 50)); // i&amp;gt;50&#xA;        cursor = coll.find(query);&#xA;        // 创建索引&#xA;        coll.createIndex(new BasicDBObject(&amp;quot;i&amp;quot;, 1)); // 1代表升序 , -1是降序&#xA;        // 查询索引&#xA;        List&amp;lt;DBObject&amp;gt; list = coll.getIndexInfo();&#xA;                for (DBObject index : list) {&#xA;                System.out.println(&amp;quot;索引 : &amp;quot; + index);&#xA;        }&#xA;类型&#xA;    // 自动生成的唯一ID&#xA;    ObjectId id = new ObjectId();&#xA;    System.out.println(id);&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Postgre SQL</title>
      <link>https://ukeate.com/docs/db/postgresql/</link>
      <pubDate>Thu, 11 Oct 2018 15:34:29 +0800</pubDate>
      <guid>https://ukeate.com/docs/db/postgresql/</guid>
      <description>&lt;h1 id=&#34;命令&#34;&gt;&#xA;  命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;initdb                          # 初始化数据库&#xA;    --locale en_US.UTF-8 &#xA;    -D &#39;data&#39;&#xA;postgres                        # 启动数据库&#xA;    -D 目录&#xA;    -p 6543&#xA;pg_ctl start                    # 控制数据库: start, stop等&#xA;    -D data &#xA;    -l a.log &#xA;postmaster&#xA;    -D /data&#xA;psql&#xA;    -d db1&#xA;    -h localhost &#xA;    -p 5432&#xA;    -U 用户名&#xA;    -W                          # 强制要求验证密码&#xA;    -f 导入sql命令文件, 或者在末尾加 &amp;lt; a.sql 来导入&#xA;    -L 导出日志文件&#xA;&#xA;    o-&amp;gt;&#xA;    psql -U outrun -f pg.sql db1                    # 导入数据&#xA;pg_dump                         # 导出数据库&#xA;    -f                          # 指定文件&#xA;    -U                          # 用户&#xA;    -E UTF8                     # 编码&#xA;    -h localhost&#xA;    -n public                   # 指定schema&#xA;    -a                          # 只导数据，没有schema&#xA;    -F t                        # 压缩成tar&#xA;&#xA;    o-&amp;gt;&#xA;    pg_dump -U outrun -f pg.sql db1                 # 导出数据, -t tb1 导出表&#xA;pg_restore&#xA;    o-&amp;gt;&#xA;    pg_restore -U outrun -d db1 pg.tar              # 导入压缩的数据&#xA;createdb                        # 创建数据库并指定 owner&#xA;    -hlocalhost -Upostgres -O 用户名 数据库名                        &#xA;dropdb&#xA;    -U user dbname&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;特色sql&#34;&gt;&#xA;  特色sql&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%89%b9%e8%89%b2sql&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;元命令&#xA;    \?                          # postgre命令&#xA;    \h                          # sql命令&#xA;    \l                          # 列出数据库&#xA;    \q                          # 退出&#xA;    \c 数据库名                 # 切换数据库&#xA;    \d name                     # 查看序列、表、视图、索引&#xA;        \dS+                    # 详情&#xA;    \du                         # 查看角色&#xA;    \dt                         # 查看所有表&#xA;        \dtS+                   # 详情&#xA;    \ds                         # 查看序列&#xA;    \i a.sql                    # 执行sql文件&#xA;    \o a.log                    # 日志文件&#xA;    \password                   # 更换密码&#xA;    \x                          # 开启/关闭竖排显示&#xA;&#xA;    [sql] \gdesc                # 快速显示结果列名和类型&#xA;数据类型&#xA;    serial                      # 4字节，自增序列&#xA;        bigserial               # 8字节&#xA;    text default &#39;&#39;::text&#xA;    bigint default 0            # 8字节&#xA;        smallint                # 2字节&#xA;        int, integer            # 4字节&#xA;        decimal                 # 变长, 声明精度，精确&#xA;        numeric                 # 同上&#xA;        float&#xA;        real                    # 4字节，变精度，不精确&#xA;        double precision        # 8字节，变精度，不精确&#xA;&#xA;    boolean default false&#xA;    text[]                      # text数组&#xA;    date&#xA;    time&#xA;    timestamp with time zone&#xA;    interval&#xA;    &#xA;    bytea                       # 二进制&#xA;&#xA;    money&#xA;    uuid&#xA;约束&#xA;    constraint user_id primary key (id)&#xA;    constraint user_m_id unique(m_id)&#xA;    constraint fk_b_id foreign key (b_id) references tbb(id)&#xA;        MATCH SIMPLE&#xA;        ON UPDATE NO ACTION&#xA;        ON DELETE NO ACTION&#xA;dcl&#xA;    create database db1&#xA;        owner outrun&#xA;    create user &#39;outrun&#39; with password &#39;asdf&#39;&#xA;    create role 用户名 with password &#39;密码&#39; login&#xA;        # 创建用户。role关键词可以省略&#xA;&#xA;    drop database db1&#xA;    drop table tablename;&#xA;&#xA;    alter database abc RENAME TO cba;&#xA;    alter database 数据库名 owner to 用户名&#xA;        # 更改数据库 owner&#xA;    alter table tb &#xA;        add primary key (id)&#xA;        add foreign key(b_id) references tb(id) on update cascade on delete cascade&#xA;        add column c1 text&#xA;        alter column id type int using id::integer&#xA;        rename c1 to c2&#xA;            drop constraint fk_b_id foreign key (b_id) references tbb(id)&#xA;        drop [column] name&#xA;        owner to outrun&#xA;            # 更改表 owner&#xA;    &#xA;    alter role 用户名 with login                     # 添加权限&#xA;        password &#39;asdf&#39;                             # with password &#39;asdf&#39;, 修改密码&#xA;        VALID UNTIL &#39;JUL 7 14:00:00 2012 +8&#39;        # 设置角色有效期&#xA;        login, superuser, createdb, createrole, replication, inherit&#xA;&#xA;    grant all privileges on database 数据库名 to 用户名&#xA;        # 授权数据库权限&#xA;ddl &#xA;    insert into tb(&amp;quot;desc&amp;quot;) values (&#39;a&#39;); &#xA;模糊查询&#xA;    ~                       # 匹配正则，大小写相关&#xA;        除&#39;a$&#39; &#39;^a&#39;的正则都只适合pg_trgm的gin索引&#xA;    ~*                      # 匹配正则，大小写无关&#xA;    !~                      # 不匹配该正则&#xA;    !~*&#xA;    ~ &#39;^a&#39;&#xA;        like &#39;a%&#39;&#xA;    ~ &#39;a$&#39;&#xA;    ~ &#39;ab.c&#39;&#xA;        like &#39;%ab_c%&#39;&#xA;&#xA;o-&amp;gt; 视图 &#xA;CREATE VIEW myview &#xA;AS &#xA;SELECT city, temp_lo, temp_hi, prcp, date, location &#xA;FROM weather, cities &#xA;WHERE city = name;&#xA;&#xA;o-&amp;gt; 建表&#xA;create table dwh_timestamp_meta&#xA;(&#xA;&amp;quot;id&amp;quot; serial NOT NULL,&#xA;&amp;quot;id&amp;quot; serial primary key,&#xA;&amp;quot;c_id&amp;quot; serial references cities(id),&#xA;&amp;quot;mongo_document_name&amp;quot; text default &#39;&#39;::text,&#xA;&amp;quot;last_update_time&amp;quot; bigint default 0,&#xA;&amp;quot;execute_time&amp;quot; timestamp with time zone,&#xA;constraint pk_id primary key(id)&#xA;)&#xA;with (&#xA;oids=false&#xA;);&#xA;&#xA;o-&amp;gt; 序列&#xA;create table a(&#xA;    id bigint primary key&#xA;);&#xA;create sequence a_id_seq&#xA;    start with 1&#xA;    increment by 1&#xA;    no minvalue&#xA;    no maxvalue&#xA;    cache 1;&#xA;alter table a alter column id set default nextval(&#39;a_id_seq&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数据字典&#34;&gt;&#xA;  数据字典&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ad%97%e5%85%b8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;pg_roles                        # 角色信息&#xA;pg_database                     # 数据库信息&#xA;information_schema&#xA;    select column_name from information_schema.columns where table_schema=&#39;public&#39; and table_name=&#39;ad&#39;;&#xA;        # 表的所有列名&#xA;pg_stat_user_tables&#xA;    select relname from pg_stat_user_tables;&#xA;        # 所有表名&#xA;pg_stat_activity                # 活动状态&#xA;    SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE datname=&#39;garbage&#39; AND pid&amp;lt;&amp;gt;pg_backend_pid();&#xA;        # 查看数据库活动连接&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;配置&#34;&gt;&#xA;  配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;数据库目录&#xA;    /usr/lib/systemd/system/postgresql.service&#xA;jdbc&#xA;    driver : org.postgresql.Driver&#xA;    url : jdbc:postgresql://localhost:5432/postgres&#xA;    初始用户名 : postgres&#xA;    初始数据库 : postgres&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;存储过程&#34;&gt;&#xA;  存储过程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;drop function change_type1();&#xA;create or replace function change_type1()&#xA;returns int as&#xA;$body$&#xA;DECLARE&#xA;    r mongo_keys_type%rowtype;&#xA;    begin&#xA;    for r in select * from mongo_keys_type where type=&#39;number&#39;&#xA;    loop&#xA;        EXECUTE &#39;alter table &amp;quot;&#39; || r.&amp;quot;mongo_collection_name&amp;quot; || &#39;&amp;quot; alter &amp;quot;&#39; || r.&amp;quot;key&amp;quot; || &#39;&amp;quot; type decimal&#39;;&#xA;    END LOOP;&#xA;    return 0;&#xA;    end&#xA;$body$&#xA;language &#39;plpgsql&#39;;&#xA;&#xA;select change_type1()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;案例&#34;&gt;&#xA;  案例&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a1%88%e4%be%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;授权&#xA;    grant all privileges on database &#39;db1&#39; to &#39;outrun&#39;&#xA;    alter role &#39;outrun&#39; createdb&#xA;    alter role &#39;outrun&#39; superuser&#xA;创建用户&#xA;    create user &#39;outrun&#39; with password &#39;asdf&#39;&#xA;    create role &#39;outrun&#39; createdb password &#39;asdf&#39; login&#xA;修改密码&#xA;    alter user &#39;outrun&#39; with password &#39;asdf&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
