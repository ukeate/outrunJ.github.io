<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>规划 on ukeate的笔记</title>
    <link>https://ukeate.com/categories/%E8%A7%84%E5%88%92/</link>
    <description>Recent content in 规划 on ukeate的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 Jan 2025 08:33:37 -0700</lastBuildDate>
    <atom:link href="https://ukeate.com/categories/%E8%A7%84%E5%88%92/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>代码规划</title>
      <link>https://ukeate.com/docs/architect/method/code_plan/</link>
      <pubDate>Wed, 10 Oct 2018 20:12:11 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/method/code_plan/</guid>
      <description>&lt;h1 id=&#34;阻塞&#34;&gt;&#xA;  阻塞&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%98%bb%e5%a1%9e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;阻塞(bio)指cpu等待io&#xA;非阻塞(nio)指调用io后立即返回，但要轮询事件状态&#xA;    # 非阻塞指对cpu不阻塞，但业务线程阻塞&#xA;轮询(单线程)&#xA;    read&#xA;        定时重复调用来检查&#xA;    select&#xA;        前后read, 中间select轮询检查文件描述符的事件状态&#xA;        采用1024长度数组存储状态，只能同时检查1024个文件描述符&#xA;    poll&#xA;        前后read, 中间poll&#xA;        用链表代替数组, 也避免了不必要的检查&#xA;    epoll   # linux&#xA;        前后read, 中间epoll&#xA;        epoll检查不到事件，休眠epoll线程直到事件将它唤醒&#xA;    kqueue  # freeBSD中，类似epoll&#xA;    aio     # async io, linux, 业务线程不阻塞&#xA;        通过回调(信号)传递数据，不必像epoll线程(业务线程)阻塞等待&#xA;        仅linux下有, 只O_DIRECT方式读取，不能利用系统缓存&#xA;    IOCP    # windows aio&#xA;模拟aio(io线程池)&#xA;    业务线程的io操作, 起io线程, io线程完成通信到业务线程触发回调&#xA;    库&#xA;        glibc(有bug)&#xA;        libeio&#xA;        node.js的libuv封装&#xA;            linux下自实现&#xA;            windows下IOCP&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;事件&#34;&gt;&#xA;  事件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8b%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;实现&#xA;    回调&#xA;    队列存事件, 单进程检测事件是否回调&#xA;库&#xA;    libevent&#xA;    libev       # bug比libevent少&#xA;工具&#xA;    epoll(select, poll)&#xA;    libev(libevent)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;并发并行&#34;&gt;&#xA;  并发并行&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b9%b6%e5%8f%91%e5%b9%b6%e8%a1%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;并发&#xA;    多任务共享时间段, 类比: 任务队列&#xA;    为什么并发&#xA;        多任务能力&#xA;        非阻塞&#xA;并行&#xA;    多任务同时处理, 类比: 多核处理器&#xA;    为什么并行&#xA;        提高执行效率&#xA;    分类&#xA;        任务并行化&#xA;        数据并行化&#xA;    cpu交替任务           # EDSAC串行任务&#xA;        协作式         # 可能独占，Windows3.1, Mac OS 9&#xA;        抢占式         # 任务管理器强制中断，Windows95, Mac OS 9以后版本, Unix, Linux&#xA;    竞态条件&#xA;        三条件&#xA;            两个处理共享变量&#xA;            一个修改中&#xA;            另一个介入&#xA;        没有共享&#xA;            Multics(1969年)进程共享内存        # Multics基于PL/I和汇编编写&#xA;            UNICS(1970年)进程不共享内存&#xA;            UNIX10年后，线程共享进程内存&#xA;            actor模型(1973年), 不共享内存，传递消息，异步       # Erlang, Scala&#xA;        共享内存但不修改                    # haskell所有变量，c++ const变量, scala val变量, java immutable(private属性没有setter)&#xA;        不介入修改&#xA;            线程协作式                     # ruby的Fibre, python/js的generator&#xA;            不便介入标志&#xA;                锁(有线程不检查锁，还是可以进入)               # 1965年提出，1974年改良为monitor。加解锁时，要求对锁的检查和修改同时执行&#xA;                    死锁问题&#xA;                    无法组合锁，组合要加新锁&#xA;                事务内存                   # 临时创建版本对其修改，更新失败重新执行&#xA;                    硬件事务内存(1986年硬件安装lisp的LM-2)     # 1986年cpu MIPS基于RISC简化指令成功，LM-2商业失败&#xA;                    软件事务内存(1995年论文), 2005年微软concurrent haskell论文&#xA;                        2004年IBM X10, 2006年Sun Fortress, 2007年Clojure, 2010年微软终止.NET软件事务内存&#xA;    并行代码&#xA;        编译代码顺序不确定，或执行顺序不确定&#xA;        看一句代码的内部实现, 在其中执行了行为&#xA;            go func () { x = make([]int, 10) }()&#xA;            x[9] = 1&#xA;    业务并行解耦条件(满足幺半群性质)&#xA;        封闭性     # 业务运算结果是业务&#xA;        结合律     # 业务a、b的结果后与c执行，等同b、c的结果与a执行&#xA;        单位元     # 恒等业务a与其它业务b执行，得b, 如reduce的初值&#xA;系统应用&#xA;    并发能力&#xA;    吞吐量(并行)&#xA;        I/O多路复用(epoll)&#xA;        cpu&amp;quot;多路复用&amp;quot;(进程、线程)&#xA;        cpu机制(多发射、流水线、超标量、超线程)&#xA;    进程线程应用&#xA;        cpu对任务的M:N处理&#xA;        进程切换处理任务&#xA;        线程(通信，并行)&#xA;实现(异步, 并发，并行)&#xA;    写法&#xA;        回调(监听器), 链式(promise)，同步(async)&#xA;    事件处理器&#xA;        调度方式: 单线程循环&#xA;    协程&#xA;        为什么用户实现协程&#xA;            POSIX线程模型累赘&#xA;                进程/线程 切换开销大&#xA;                空间资源占用大&#xA;            os调度对go模型不合理&#xA;                go gc需要内存处理一致状态(所有线程停止), os调度时，因gc时间不确定，期间大量线程停止工作&#xA;                    # go调度器知道什么时候内存处于一致性状态(只需正在核上运行线程)&#xA;        本质&#xA;            用户态，寄存器+栈, 让出(协作而非抢占)&#xA;        调度方式(线程模型)&#xA;            N:1     # N个用户空间线程运行在1个内核空间线程&#xA;                上下文切换快&#xA;                无法利用多核&#xA;            1:1&#xA;                # POSIX(pthread), java&#xA;                利用多核&#xA;                上下文切换慢，每次调度都在用户态和内核态间切换&#xA;            M:N&#xA;                任意内核模型管理任意goroutine&#xA;                调度复杂性大&#xA;        go&#xA;            M(machine)代表内核线程&#xA;            G(goroutine)有自己的栈，程序计数器，调度信息(如正阻塞的channel)&#xA;            P(processor)调度上下文, $GOMAXPROCS设置数量&#xA;            P中有G队列(runqueue, 队尾添加新G)&#xA;                当前运行一个G, 到调度点时，队列弹出另一个G&#xA;                P周期检查全局G队列防止其中G饿死&#xA;                P运行完，全局G队列拉取G&#xA;                P运行完，全局G队列空，从其它P拉取一半G&#xA;            P运行在M, M阻塞时P移到其它M, 阻塞M中保留阻塞的G&#xA;            调度器创建足够多M跑P&#xA;                阻塞M中G的syscall返回, M尝试偷一个P&#xA;                没得到P时, 它的G加入全局G队列, M进线池睡眠&#xA;&#xA;概念&#xA;    过度竞争&#xA;        过多线程尝试同时使用一个共享资源&#xA;    同步  # 直接相互制约&#xA;        实现&#xA;            同步原语(如通道、锁)作用时，会刷处理器缓存到内存并提交，保证可见性&#xA;    互斥  # 间接相互制约&#xA;        竞态条件(race condition)&#xA;        临界区 # 只能一线程访问的代码，如lock了的代码&#xA;        监控模式    # 互斥锁, 函数, 变量 组合出临界区的模式, 使用了代理人(broker)(指锁)&#xA;    异步&#xA;        # 与同步相对。多线程是实现异步的一种手段&#xA;    可见性&#xA;        线程总可见到最后修改的数据, 脏读是反例&#xA;    原子性&#xA;        查看和修改同时发生&#xA;    乱序执行&#xA;        # java 中标记volatile的变量可以不乱序执行, 现多用原子变量&#xA;        编译器或JVM的静态优化可以打乱代码执行顺序(java)&#xA;        硬件可以通过乱序执行来优化性&#xA;    死锁  # 多线程竞争资源而互相等待&#xA;        条件&#xA;            互斥      # 资源排他&#xA;            不剥夺    # 资源不被外力剥夺&#xA;            请求和保持条件     # 线程已保持一个资源，请求新资源。请求被阻塞而自己资源保持&#xA;            循环等待    # 阻塞线程形成环&#xA;        方案&#xA;            锁按顺序获得  # a,b,c锁，要得c手中要有a, b&#xA;                # 使用锁的地方比较零散时，遵守此顺序变得不实际&#xA;                # 可以用对象散列值作全局顺序减小死锁机率&#xA;            阻塞加时限&#xA;            # 外星方法中可能包含另一把锁，要避免在持锁时调用外星方法&#xA;    活锁  # 多线程尝试绕开死锁而过分同步反复冲突&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;多线程&#34;&gt;&#xA;  多线程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%9a%e7%ba%bf%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;线程池&#xA;    作用&#xA;        重复利用, 降低资源消耗&#xA;        提高响应速度，不等线程创建&#xA;        可管理，线程是稀缺资源，统一分配，调优和监控，提高系统稳定性&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;锁&#34;&gt;&#xA;  锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;锁&#xA;    公平锁                             # FIFO取锁&#xA;    非公平锁                           # 每次直接占有&#xA;    互斥锁(mutex)                      # 访问前加锁，访问后解锁&#xA;        悲观锁                         # 假设最坏，等所有线程释放成功&#xA;            读加锁&#xA;        乐观锁                         # 假设最好，有冲突时重试&#xA;            读不加锁，写时判断数据版本是否修改，再重试&#xA;    读写锁(rwlock)                     # 竞争不激烈比互斥锁慢&#xA;        读锁(共享锁)&#xA;        写锁(互斥锁)&#xA;        状态&#xA;            读加锁状态&#xA;                可多个线程占用&#xA;                处理器缓存提交，数据可见&#xA;                阻塞写线程              # 导致写线程抢占不到资源，所以有写线程时，阻塞后进入的读线程&#xA;            写加锁状态&#xA;                一次只有一个线程占用&#xA;                阻塞所有线程&#xA;            不加锁状态&#xA;    自旋锁 spinlock&#xA;        互斥锁改，自己进入循环等待状态(忙等)             # 适合锁持有时间较短&#xA;    RCU锁 Read-Copy Update&#xA;        读写锁改，一个写线程，读线程无限制&#xA;            实现垃圾回收器&#xA;            写线程copy副本修改，向垃圾回收器注册callback以执行真正的修改&#xA;            垃圾回收器收到信号，所有读线程结束，执行callback&#xA;    可重入锁                            # 互斥锁改，允许同一线程多次获得写锁&#xA;    管程(monitor)&#xA;    临界区(critical section)&#xA;    内置锁、显示锁                       # 指java的synchronized与Reentrantlock&#xA;信号量&#xA;    进程, 线程间通知状态&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;cas&#34;&gt;&#xA;  CAS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cas&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# compare and swap，无锁算法(lock free), 非阻塞(non-blocking), 构成基本的乐观锁&#xA;# cpu实现的指令&#xA;3个操作数&#xA;    # V的值为A时，原子更新成B，否则无操作。返回V的值&#xA;    需要读写的内存位置V&#xA;    进行比较的值A&#xA;    拟写入的新值B&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;函数式&#34;&gt;&#xA;  函数式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%87%bd%e6%95%b0%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    消除可变状态&#xA;概念&#xA;    命令式语言中，求值顺序与源码的语句顺序紧密相关(有可能乱序执行)&#xA;    函数式程序并不描述&amp;quot;如何求值以得到结果&amp;quot;，而是描述&amp;quot;结果应当是什么样的&amp;quot;。函数式编程中，如何安排求值顺序相对自由&#xA;    引用透明性&#xA;        # 任何调用函数的地方，都可以用函数运行结果来替换函数调用，而不会产生副作用&#xA;    数据流式编程(dataflow programming)&#xA;        # (+ (+ 1 2) (+ 3 4))就是一个数据流，所有函数都可以用时执行&#xA;        future模型&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;分离标识与状态&#34;&gt;&#xA;  分离标识与状态&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e7%a6%bb%e6%a0%87%e8%af%86%e4%b8%8e%e7%8a%b6%e6%80%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    Clojure, 指令式编程和函数式编程混搭&#xA;&#xA;clojure四种并发模型&#xA;    vars (thread-local)&#xA;    atoms原子变量&#xA;    agent代理&#xA;    refs引用 与 ATM软件事务内存&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;actor模型&#34;&gt;&#xA;  actor模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#actor%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    作为actor自己修改自己的数据，对外提供消息，处理对外消息&#xA;    共享内存模型和分布式内存模型，适合解决地理分布型问题，强大的容错性&#xA;    基于消息传递，侧重通道两端实体&#xA;    每个actor有一个mailbox, mailbox中转消息&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;csp&#34;&gt;&#xA;  csp&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#csp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    通信顺序进程(communicating sequential processes)&#xA;    基于消息传递，侧重信息通道&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;数据级并行&#34;&gt;&#xA;  数据级并行&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e7%ba%a7%e5%b9%b6%e8%a1%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 不可变数据, 观测不可变、实现不可变&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;lambda架构&#34;&gt;&#xA;  lambda架构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lambda%e6%9e%b6%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    综合MapReduce和流式处理的特点，处理大数据问题的架构&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;状态保持&#34;&gt;&#xA;  状态保持&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%8a%b6%e6%80%81%e4%bf%9d%e6%8c%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;cookie&#xA;    分域名, 客户端保存服务器定义数据, 请求时发送&#xA;session&#xA;    服务器id数据，id下发到客户端&#xA;    共享&#xA;        # 同时多方案，动态切换 zookeeper切换环境变量与重启&#xA;        # java中filter重写request getSession&#xA;        webSphere或JBoss可配置session复制或共享&#xA;            # 不好扩展和移植&#xA;        加密存cookie&#xA;        服务&#xA;            redis&#xA;            memorycache&#xA;            gemfire     # 12306&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;认证&#34;&gt;&#xA;  认证&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%a4%e8%af%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;单点登录&#xA;    sessionID存cookie, cookie禁用存头域&#xA;token&#xA;    类型&#xA;        access token&#xA;            # 标识唯一用户&#xA;            user_id&#xA;            issue_time&#xA;                # token发放时间，单位秒&#xA;            ttl&#xA;                # 有效时间，uint16,单位分钟&#xA;            mask&#xA;                # int128, 按bit分组用户，用于批量封禁或其它功能&#xA;        refresh token&#xA;            # 用来换access token，与access token同时发放&#xA;            # 过期时间更长&#xA;    实现&#xA;        redis存储&#xA;        token不要太长&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;常见问题&#34;&gt;&#xA;  常见问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;csrf&#34;&gt;&#xA;  CSRF&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#csrf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    跨域请求伪造(cross-site request forgery)&#xA;    client登录A, 本地生成cookie&#xA;    client登录B, B给执行js，带参数请求站点A&#xA;解决&#xA;    token验证     # 加入自定义头域&#xA;    验证Referer头域&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;xss&#34;&gt;&#xA;  XSS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#xss&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    跨站脚本攻击(cross-site scripting, 易和css混淆，所以写成XSS), 渲染页面时脚本未转义&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;xsf&#34;&gt;&#xA;  XSF&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#xsf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    跨站flash攻击(cross-site flash), actionScript加载第三方flash&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;sql注入&#34;&gt;&#xA;  sql注入&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sql%e6%b3%a8%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    拼装sql，参数插入sql逻辑&#xA;解决&#xA;    sql预编译&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;1n查询&#34;&gt;&#xA;  1+N查询&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1n%e6%9f%a5%e8%af%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    先查出外键id集合, 再逐条id查关联表。orm易出的问题&#xA;解决&#xA;    用 id IN (1,2,3)&#xA;    commit前自动合并sql&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;业务场景&#34;&gt;&#xA;  业务场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%9a%e5%8a%a1%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;关注信箱&#34;&gt;&#xA;  关注/信箱&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b3%e6%b3%a8%e4%bf%a1%e7%ae%b1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;要求&#xA;    user人数10w, 活跃1w。&#xA;    大部分user关注1k人, 一部分大v被关注100w人。&#xA;    每人每天发100条博文&#xA;    user新博文数量提醒，消息标记已读&#xA;表&#xA;    user&#xA;    user_followers&#xA;    user_followed&#xA;    user_posts(u_id, created_ts)&#xA;    user_messages(u_id, p_id, is_read)&#xA;        # 10w * 100条数据 / 天&#xA;定时任务拉取&#xA;    user_followed拉u_id, user_posts表按时段拉id, 更新user_messages&#xA;    优点&#xA;        平均, 少次, 增量。&#xA;    缺点&#xA;        及时性中&#xA;        每次对所有用户操作&#xA;    数据&#xA;        10w*1k*100条数据 / 天&#xA;发布时推送&#xA;    有p_id, user_followers, 更新user_messages&#xA;    优点&#xA;        及时性高&#xA;    缺点&#xA;        计算集中, 可能高峰&#xA;    数据&#xA;        最高 100w*100条数据 / 次&#xA;        10w*100次 / 天&#xA;messages处理&#xA;    存部分messages&#xA;        不活跃user不存message&#xA;            在登录状态，定时拉取&#xA;                优点&#xA;                    减少message&#xA;                缺点&#xA;                    计算集中&#xA;                数据&#xA;                    1k * N(N&amp;lt;100)条 / 次&#xA;                    1w * 1k * 100条数据 / 天&#xA;    messages结构变化&#xA;        u_id: [{p_id: uint, is_read: bool}]         #  条数稳定为10w&#xA;        用mongodb或redis&#xA;消息队列?&#xA;    服务端存message状态，不能mq&#xA;    如果客户端存状态，这就是个简单的mq问题&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;轻应用架构&#34;&gt;&#xA;  轻应用架构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bd%bb%e5%ba%94%e7%94%a8%e6%9e%b6%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;node.js + mongodb&#xA;mysql&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数据&#34;&gt;&#xA;  数据&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;数据迁移&#34;&gt;&#xA;  数据迁移&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e8%bf%81%e7%a7%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;去掉约束&#xA;排序（中断继续）&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;数据存储&#34;&gt;&#xA;  数据存储&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ad%98%e5%82%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;缓存&#xA;    queue + map&#xA;        # queue存储、限量, map查询，指向queue中元素&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;缓存&#34;&gt;&#xA;  缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;queue + map&#xA;    # queue存储、限量, map查询，指向queue中元素&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;实时并发&#34;&gt;&#xA;  实时并发&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9e%e6%97%b6%e5%b9%b6%e5%8f%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;异步方案&#34;&gt;&#xA;  异步方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%82%e6%ad%a5%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;node.js + mongodb&#xA;tornado + celery + rabbitmq + 优先级&#xA;quartz&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;消息&#34;&gt;&#xA;  消息&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b6%88%e6%81%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;功能&#xA;    好友&#xA;    单聊, 群聊&#xA;    语音, 视频&#xA;    im      # 浏览器聊天(tcp, 不https)&#xA;协议&#xA;    XMPP        # 基于xml&#xA;    MQTT        # 简单，但自己实现好友、群组&#xA;    SIP         # 复杂&#xA;    私有协议     # 工作量大，扩展性差&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;go高并发实时消息推送&#34;&gt;&#xA;  go高并发实时消息推送&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go%e9%ab%98%e5%b9%b6%e5%8f%91%e5%ae%9e%e6%97%b6%e6%b6%88%e6%81%af%e6%8e%a8%e9%80%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;问题&#xA;    长连接             # 支持多种协议(http、tcp)&#xA;        server push&#xA;        HTTP long polling(keep-alive)&#xA;        基于TCP自定义&#xA;        心跳侦测&#xA;    高并发             #&amp;gt;= 10,000,000&#xA;        C1000K&#xA;    多种发送方式&#xA;        单播: 点对点聊天&#xA;        多播: 定点推送&#xA;        广播: 全网推送&#xA;    持久/非持久&#xA;    准实时         # 200ms ~ 2s&#xA;        gc卡顿是大问题&#xA;    客户端多样性&#xA;    同帐号多端接入&#xA;    网络变化&#xA;        电信、联通切换&#xA;        wifi, 4g, 3g&#xA;        断线、重连、断线、重连&#xA;系统架构&#xA;    组件&#xA;        room&#xA;            # 接入客户端&#xA;            分布式全对称&#xA;            一个client一个goroutine&#xA;            每个server一个channel存消息队列&#xA;            book记录user与server映射&#xA;            统一http server收消息并将消息路由到room和server&#xA;            manager掌控room的服务：内部单播、多播、广播&#xA;            admin负责room进程管理&#xA;        center&#xA;            # 运营人员从后台接入&#xA;            提供操纵接口给应用服务器调用&#xA;            restful&#xA;            长时操作，有任务概念来管理&#xA;            提供统计接口&#xA;        register&#xA;            # room和center注册&#xA;            key-value的map，value是struct&#xA;            记录用户连到哪个room&#xA;            记录在线时长等信息&#xA;            hash算法定位register进程&#xA;            不直接用redis是为了添加业务逻辑&#xA;        saver&#xA;            # room和center调用&#xA;            # 使用redis&#xA;            分布式全对称&#xA;            提供存储接口&#xA;            采用encoding/gob编码格式的rpc&#xA;        idgenerator&#xA;            # saver和center调用&#xA;            全局消息id生成器, int64&#xA;            分布式，每个进程负责一块id区域&#xA;            后台goroutine每隔一秒写一次磁盘，记录当前id&#xA;            启动时跳过一段id，防止一秒内未写入磁盘的id重复生成&#xA;    存储&#xA;        redis&#xA;            存核心数据&#xA;            db_users: zset, 存各产品用户集合&#xA;            db_slots: list, 存用户离线消息队列&#xA;            db_buckets: dict, 存消息id -&amp;gt; 消息体&#xA;数据&#xA;    16机器，标配24硬件线程, 64g内存&#xA;    linux kernel 2.6.32 x86_64&#xA;    单机80万并发连接&#xA;        load 0.2 ~ 0.4 cpu&#xA;        总使用率7%~10%&#xA;        内存占用20g&#xA;    目前接入1280万在线用户&#xA;    2分钟一次gc, 停顿2秒，tip上提供了并行gc&#xA;    15亿个心跳包/天&#xA;    持续运行一个月无异常&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;直播&#34;&gt;&#xA;  直播&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%b4%e6%92%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;《关于直播，所有的技术细节都在这里了》&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;游戏&#34;&gt;&#xA;  游戏&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b8%b8%e6%88%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;进程&#xA;    gateway进程组&#xA;        # 对外api&#xA;    function进程组&#xA;        # 注册玩家全局信息&#xA;    session进程组&#xA;        # 玩家状态&#xA;    dbserver进程组&#xA;        # 数据&#xA;    多word进程组&#xA;        # 不同地图的信息、逻辑&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>运维规划</title>
      <link>https://ukeate.com/docs/architect/method/ops_plan/</link>
      <pubDate>Wed, 10 Oct 2018 20:12:11 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/method/ops_plan/</guid>
      <description>&lt;h1 id=&#34;指标&#34;&gt;&#xA;  指标&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8c%87%e6%a0%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;标准&#xA;    ITIL(IT Infrastructure Library)&#xA;    ITSM(IT System Management)&#xA;目标&#xA;    安全性&#xA;        账号管理&#xA;        漏洞修复&#xA;        安全审计&#xA;    可用性&#xA;        服务监控&#xA;        架构优化&#xA;        冗余备份&#xA;        预案演练&#xA;        故障响应&#xA;    运维成本&#xA;        成本核算&#xA;        服务选型&#xA;        成本优化&#xA;    运维效率&#xA;        研发工作流支持&#xA;        服务支持平台建设&#xA;        运维自动化平台建设&#xA;工作方式&#xA;    邮件申请开通 LDAP, VPN, 测试, 线上&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;监控&#34;&gt;&#xA;  监控&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%91%e6%8e%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>咨询规划</title>
      <link>https://ukeate.com/docs/architect/method/advice_plan/</link>
      <pubDate>Wed, 10 Oct 2018 16:49:27 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/method/advice_plan/</guid>
      <description>&lt;h1 id=&#34;presentation&#34;&gt;&#xA;  Presentation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#presentation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;指导思想: 成于结构，臻于对话&#xA;PPT画页&#xA;    画的是冰山一角&#xA;    类似手持卡片&#xA;    类似左右脑: 逻辑+展示&#xA;具体内容&#xA;    思维导图&#xA;        维度筛选，MECE不重不漏&#xA;    空姐现象&#xA;        共知的事情特色讲，去掉已知部分&#xA;    卖钻讲孔&#xA;    电梯法则&#xA;        告知全局，步骤清晰，回顾小结&#xA;    递进逻辑：信息，分析，方法&#xA;目录&#xA;    首页效应&#xA;    目录，章节页，总结页&#xA;视觉&#xA;    图形代替文字: 缩小了看一看&#xA;    标题附主题语: 有兴趣有信息量&#xA;讲&#xA;    替画重点（提示语如: 请注意，提问）&#xA;    细讲：页只写观点，串联起来讲，只有30%内容重合&#xA;    心态&#xA;        注意力放在观众那边&#xA;        沟通合作而非防御&#xA;        房间有更聪明的人&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数字化转型&#34;&gt;&#xA;  数字化转型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e5%ad%97%e5%8c%96%e8%bd%ac%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;什么是数字化，有什么用&#xA;    发展&#xA;        信息化: 烟囱式，信息/数据孤岛，管理/运营孤岛&#xA;        互联网化&#xA;            互联互通: 0边际成本互联互通，云计算-&amp;gt;雾计算&#xA;        大数据化&#xA;            数据互联: 互联一切-&amp;gt;一切互联，跨界应用&#xA;            数据资源: 核心要素/资产，第一权利&#xA;        数智化&#xA;            人工智能：大数据-&amp;gt;大知识, 人类设计-&amp;gt;自动学习，替代与超越&#xA;                计算智能-&amp;gt;感知智能-&amp;gt;认知智能&#xA;            三位一体：(互联网+大数据+人工智能)+ Any&#xA;        数字孪生、元宇宙&#xA;    互联网+&#xA;        信息传递边际成本趋向于0&#xA;        连接机制革命&#xA;            任意两个资源(人或物)0边际成本互联互通: 信息0边际成本&#xA;            传播机制: 线性、金字塔式-&amp;gt;非线性、网状、几何级、病毒式&#xA;    带来什么&#xA;        数字科技三位一体：(互联网+大数据+人工智能)+&#xA;        边际革命：0边际成本效应，边际成本递减，边际收益递增&#xA;        数智：可知、可达、可控、可预测，程度剧变、实现边际成本剧变&#xA;        量变-&amp;gt;质变（工具革命-&amp;gt;革命的工具）&#xA;            局部改善-&amp;gt;全面优化-&amp;gt;全面重构&#xA;            技术应用-&amp;gt;业务优化-&amp;gt;全面变革&#xA;        农业时代，工业时代，数字时代，造物时代&#xA;为什么数字化转型&#xA;    企业处境&#xA;        各行各业先后&#xA;            总量短缺-&amp;gt;结构过剩，卖方市场-&amp;gt;买方市场，存量经济的争夺内卷加剧&#xA;            成熟稳定期-&amp;gt;跃迁剧变期&#xA;        各行各业被迫转型：不断重新分工、重新分利&#xA;            产业链 重构/(替代+重构)&#xA;    战略问题&#xA;        不是未来做什么，是做什么有未来&#xA;        提高打鱼技术但鱼没有了&#xA;        不要战术勤奋战略懒惰, 战术成功战略失败&#xA;        不是选择题是必答题&#xA;什么是企业/产业数字化&#xA;    IBA+经济&#xA;        电子商贸，流通    &#xA;        不是虚拟经济，是实体经济的全新形态&#xA;    IBA+交易&#xA;        渠道体系革命&#xA;            线上渠道为主，主导线上线下一体化&#xA;        终端(触点)为王&#xA;            与用户空间时间距离不断缩短&#xA;            一切皆终端，终端多样化-&amp;gt;场景碎片化(场景嵌入)-&amp;gt;新旧场景兴衰&#xA;            泛在智能交互，泛在智能感应(不断向生产环节渗透)&#xA;        交易边际成本大幅下降, 交易可能性边界急剧膨胀，资源配置能力与利用效率极大提高&#xA;            产业链重构：M2B2C, M2C, P2P&#xA;            野蛮营销-&amp;gt;精准营销-&amp;gt;智能匹配&#xA;        产品变渠道，产品渠道一体化&#xA;            智能产品-&amp;gt;触点+服务与生态体系&#xA;            产品成为持续服务的载体&#xA;            制造业服务业化&#xA;        智能化，机器体系对人的脑力及体力的强助力、替代、超越&#xA;            精细化、高度集成化&#xA;            去人化、极致自动化&#xA;            柔性化，按需生产、柔性制造能力&#xA;    IBA+生产&#xA;        业务跨界与跃迁：供应链资源，数据资源，新“物种”(产品)&#xA;        低碳、低能耗、低消耗: 自然资源稀缺性下降&#xA;    IBA+交易+生产&#xA;        交易生产一体化&#xA;            由需到供，按需生产，按需服务，按需研发，按需投资，0库存&#xA;            非标-&amp;gt;标准化-&amp;gt;去标准化(个性化生产)&#xA;            卖产品-&amp;gt;卖生产服务，制造业服务业化&#xA;            延展到整个国民经济生态体系，有计划的市场经济&#xA;        数据驱动，智能决策&#xA;        平台化+极致专业化分工&#xA;        企业(管理与产权)形态、雇佣形态的演变&#xA;            管控型-&amp;gt;交易型/平台型&#xA;            企业人员规模缩小，企业边界模糊&#xA;            企业、资本与劳动者关系演变&#xA;数字化转型&#xA;    数字经济质跃工业经济&#xA;        数字经济系统&#xA;            经济环境: 人类经济活动(分工协作)的基础条件(信息不对称性，资源稀缺性)发生剧变&#xA;            经济活动: 交易和生产的边际成本大幅下降，经济活动的效率大幅上升，经济活动的可能性边界急剧膨胀&#xA;        从根本上超越工业经济&#xA;    数字化经济含义&#xA;        交易、生产：0边际成本&#xA;        边际革命：人类逐步进入0边际成本时代&#xA;        边际成本递减-&amp;gt;0边际成本-&amp;gt;边际成本为负&#xA;        结果变成原因，逼近转型升级&#xA;    数字化转型升级&#xA;        以数字科技为应用手段，持续推进业务变革、组织变革&#xA;        经济的数字化转型升级: 以数字科技应用为手段，推进经济模式、经济形态持续转型升级&#xA;        企业数字化转型升级：以数字科技应用为手段，推进企业营销模式、服务模式、管理模式、生产模式、决策模式、商业模式、产权模式等持续转型升级&#xA;    鸿沟：科技&amp;lt;-&amp;gt;业务&#xA;        可能性(无限)-&amp;gt;现实性(有限)&#xA;        科技-&amp;gt;技术应用(产品/模式/制度创新变革)-&amp;gt;业务问题-&amp;gt;科技应用创新不足是制约转型升级、创新发展的关键瓶颈&#xA;        问题导向，需求拉动&#xA;            科技应用价值问题：经济效益是检验科技领先的唯一标准&#xA;            科技应用方向问题：0到0的创新比0到1的创新更关键&#xA;            科技应用的路径问题：并非都是&amp;quot;富家子&amp;quot;&amp;quot;优等生&amp;quot;&#xA;    转型是什么&#xA;        三个层次&#xA;            新赛道(局部): 新技术、新产品、新兴产业链&#xA;            新形态(普遍): 新业态、新模式、新型产业链&#xA;            新经济(全面): 新生态、新格局&#xA;        企业：全面转型或K型经济&#xA;    可行方法&#xA;        你是谁：业务现状&#xA;        你想变成谁&#xA;            动因与目标(短期、长期)&#xA;            问题导向与需求分析&#xA;        你能变成谁&#xA;            基础条件与既有资源&#xA;            信息化数字化的基础&#xA;        你如何变成谁&#xA;            (周而复始)设计-&amp;gt;建设-&amp;gt;运营(业务+系统)-&amp;gt;跟踪与评估&#xA;    得客户资源者得天下&#xA;        流量-&amp;gt;留量&#xA;        客户资源：客户数据+客户关系+客户渠道&#xA;        以更低边际成本掌控更大的客户资源&#xA;        谁掌握完备的客户资源&#xA;        如何掌握完备的客户资源&#xA;    未来已临&#xA;        划时代的技术都是试金石&#xA;        与时代赛跑&#xA;实施&#xA;    本质&#xA;        数字驱动的用户中心观, 不是业务中心观&#xA;        增长三角：规模、分工、效率&#xA;    思维: 大数据、区块链&#xA;    用户价值: &#xA;        一个框架: 价值创造，用户挖掘，用户数据，个性化服务，差异化用户保留&#xA;        一个目标: 每个用户&amp;quot;精耕细作&amp;quot;&#xA;        一个重点: 数字化全链路管理，全场景营销, 全渠道服务&#xA;    价值网络: 一个核心&#xA;    商业模式&#xA;        Costco&amp;quot;复利高墙&amp;quot;&#xA;            差异化价值、服务对象、盈利模式+核心能力&#xA;            数字化会员：精准预测，精准选品，自有品牌&#xA;    供应链&#xA;        问题：牛鞭效应，不确定效应&#xA;        解决：基于数据观察趋势，不预测趋势&#xA;    增长飞轮&#xA;        数字化加速技术分层分化, 技术模块化&#xA;        运营卓越: 上游核心技术，下游用户亲密&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数智化转型&#34;&gt;&#xA;  数智化转型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%99%ba%e5%8c%96%e8%bd%ac%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;技术：人工智能，区块链，云计算，大数据，边缘计算&#xA;管理：科学管理-&amp;gt;人本管理-&amp;gt;精益管理-&amp;gt;价值共生&#xA;重塑思维&#xA;战略转型方向&#xA;管理变革&#xA;商业模式&#xA;重塑领导力&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数字化营销&#34;&gt;&#xA;  数字化营销&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e5%ad%97%e5%8c%96%e8%90%a5%e9%94%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;4P: 产品、价格、渠道、推广&#xA;4C： 消费者(Consumer)、成本(Cost)、便利(Convenience)、沟通(Communication)&#xA;4R: 关联(Relevance), 反应(Reacton), 关系(Relationship), 报酬(Reward)&#xA;Marketing Jungle: 及时性、社会性、精准性、方便性&#xA;CIDR&#xA;    Contact: 全渠道(全场景): 在商，在家，在途&#xA;    Identify: 二维码，小程序，人脸，Beacon&#xA;    Data: 数据标签(分级分群)&#xA;    Reaction&#xA;大数据营销&#xA;    3V: 数量(Volume)、速率(Velocity)、多样(Variety)&#xA;    维度&#xA;        身份象征: 年龄、身高、性别、居住地&#xA;        生活风格: 朝九晚五、泡吧达人、工作狂&#xA;        消费行为: 购买时间、购买方式、促销敏感&#xA;        社交行为：意见领袖、意见跟随者&#xA;        商品偏好：咖啡达人、面包达人&#xA;        RFM: 最近消费、消费频率、消费金额&#xA;    升级：金字塔(二八原则)&#xA;    挽留&#xA;    精准营销：相关分析、逻辑回归分析、购物栏分析、标签群体聚类分析&#xA;    私域&#xA;        进(获客)&#xA;            线下：自然来客、地推&#xA;            会员裂变&#xA;            大数据：探针法、数据交换法、WiFi法&#xA;            产品为王&#xA;            线上引流：SEO, SEM/关键字投放, ASO, CPS(按销售付费), DSP(跨平台), Banner, 嵌入代码/挂件，微信/社交/短视频&#xA;        活(激活)&#xA;            不删: 电子会员、交互平台、创造场景&#xA;            关卡：产生兴趣、激发欲望、消除顾虑(七天免费)、立刻行动&#xA;        粘(粘性)&#xA;            RFM分群&#xA;                R: 最近一次消费&#xA;                F: 消费频次&#xA;                M: 消费金额&#xA;            增加粘性: 次数带动，品类带动，场景带动&#xA;        值(客户价值)&#xA;            CLV=贡献价值 - (取得成本+维系成本)&#xA;        荐(裂变)&#xA;            原因: 创造价值 获客&#xA;            方法&#xA;                分享, 红包，IP,亲子，团购, 朋友&#xA;移动营销&#xA;    优势：实时在线、高效传递、多媒体负载、瞬间反应&#xA;    特色4I: 个性化(I)、互动(Interactive)、分众识别(Individual Identification)、实时信息(Instant Message)&#xA;    设备：二维码、App、小程序、穿戴技术&#xA;        MAC Address: 基地台，路径&#xA;        Beason: 室内&#xA;        DSP: 标签种植&#xA;            限制：隐私侵犯、推送用APP未打开、设备更换&#xA;    七个瞬间&#xA;        场景: 时间地点，和谁一起，当前感觉，需要什么; 和上次一样&#xA;        位置距离: 地理定位，地理围栏，地理征地&#xA;        时间&#xA;            实用性产品(效率): 早上&#xA;            享乐型产品(心情): 下午&#xA;        天气&#xA;            影响心情&#xA;            预防性框架&#xA;        轨迹&#xA;        社会: 和谁一起&#xA;        拥挤度&#xA;社交媒体&#xA;    pay media, earned media, owned media&#xA;    社群&#xA;        粉丝: 目的&#xA;        企业：目的&#xA;        方式&#xA;            找兴趣, 嬴关注&#xA;            造品牌, 聚粉丝&#xA;    场景思维&#xA;        围绕产品&#xA;        围绕时间&#xA;        围绕特定事件&#xA;    内容营销&#xA;        步骤&#xA;            任务规划：对象、目的、场景&#xA;                阶段性目标：粉丝数、活跃度、互动数、观看数、展示数、流量数据&#xA;            内容创意：起承转合, story board&#xA;                标题、价值(有趣、有利)、为什么转发(显示一手信息、表达立场、自娱娱人)&#xA;                确定渠道: 对象，内容类型，流量机制&#xA;            评估学习&#xA;        内容策略&#xA;            热点性内容&#xA;            即时性内容&#xA;            生活故事内容&#xA;            方案或学习性(生活小贴士)&#xA;            连载性内容&#xA;            促销性内容&#xA;    全流程整合&#xA;        交易平台: 微商、微店(企业内店、第三方平台)、微商城&#xA;        分润机制: 入会条件、会员等级、推荐提成、等级折扣&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;企业管理&#34;&gt;&#xA;  企业管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%81%e4%b8%9a%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;战略&#xA;    目标：使命，愿景&#xA;    分层&#xA;        企业层面战略&#xA;        业务单元层面战略（竞争战略）&#xA;        职能层面战略&#xA;    管理&#xA;        战略分析阶段&#xA;        战略选择阶段&#xA;        战略评价阶段&#xA;        战略实施阶段&#xA;        战略控制阶段&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;优化咨询&#34;&gt;&#xA;  优化咨询&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%98%e5%8c%96%e5%92%a8%e8%af%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;问题&#xA;    客户反馈&#xA;        单体应用&#xA;            模块耦合程度&#xA;            微服务划分与边界&#xA;        单节点数据库&#xA;            查询崩溃&#xA;        IoT控制&#xA;            命令超时失败, 响应慢&#xA;            出错业务处理&#xA;    发现问题&#xA;        现有代码逻辑梳理&#xA;        通过链路追踪，找性能瓶颈&#xA;        SQL平台建设，发现数据库性能问题，优化SQL&#xA;        服务器节点监控，应用监控，数据库监控&#xA;解决问题&#xA;    代码&#xA;        纯代码优化：N+1调用，事务问题&#xA;        逻辑优化：订单失败，复杂业务流程优化&#xA;        发布流程优化CI/CD&#xA;        中间件优化：优雅停机，灰度方案节点打标，全链路日志&#xA;        性能优化：业务并行处理，业务异步处理&#xA;    数据库&#xA;        不合理调用治理：批量更新，大事务，&#xA;        慢SQL治理&#xA;        数据库备份：主从优化，定时备份&#xA;        配置调优&#xA;    架构&#xA;        高可用：服务发现，分布式&#xA;        业务缓存优化，减少数据库调用：热点数据，对象缓存，多级缓存&#xA;        分布式任务平台：分片执行&#xA;        任务中心：批量平台&#xA;稳定性&#xA;    告警平台&#xA;        异常告警(空指针，接口调用成功率)&#xA;        监控告警(服务器使用率)&#xA;        业务告警(下单失败)&#xA;    限流熔断&#xA;        网关限流，业务限流，接口限流，外部调用限流&#xA;        业务平滑处理&#xA;运营工具&#xA;    业务数据多维分析&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>服务治理</title>
      <link>https://ukeate.com/docs/architect/method/architect/</link>
      <pubDate>Wed, 10 Oct 2018 16:49:27 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/method/architect/</guid>
      <description>&lt;h1 id=&#34;原则&#34;&gt;&#xA;  原则&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%9f%e5%88%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;高并发&#xA;高可用&#xA;高可靠&#xA;    SLA(service level agreement)制定(吞吐量、响应时间、可用性、降级方案)&#xA;    容量规划(流量、容量)&#xA;    监控报警(机器负载、响应时间、可用率)&#xA;        tracing&#xA;    应急预案(容灾、降级、限流、隔离、切流量、可回滚)&#xA;成本&#xA;经济学原理&#xA;    比较优势&#xA;        服务器类型&#xA;    分工协作&#xA;        组合&#xA;    货币解耦&#xA;        MQ&#xA;    规模效益&#xA;        集群&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;高可用&#34;&gt;&#xA;  高可用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%ab%98%e5%8f%af%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;负载均衡&#34;&gt;&#xA;  负载均衡&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;流量切换     # 某服务器挂了&#xA;    DNS切换&#xA;    httpDNS         # app配置，绕过运营商localDNS&#xA;    lvs/haproxy     # 切换故障的nginx&#xA;    nginx           # 切换故障应用&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;限流&#34;&gt;&#xA;  限流&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%99%90%e6%b5%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;思路&#xA;    恶意请求流量只访问cache&#xA;    穿透到应用的流量用nginx limit&#xA;    恶意ip nginx deny&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;降级&#34;&gt;&#xA;  降级&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%99%8d%e7%ba%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;开关集中化管理, 推送开关配置&#xA;开关前置      # nginx层做开关&#xA;可降级读服务   # 只读本地缓存、只读分布式缓存、只读默认数据&#xA;业务降级      # 部分业务异步，处理高优先级，分配流量保障系统可用&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;隔离&#34;&gt;&#xA;  隔离&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9a%94%e7%a6%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;线程隔离&#xA;进程隔离&#xA;集群隔离&#xA;机房隔离&#xA;读写隔离&#xA;动静隔离&#xA;爬虫隔离&#xA;热点隔离&#xA;资源隔离&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;回滚&#34;&gt;&#xA;  回滚&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%9e%e6%bb%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;事务&#xA;代码库&#xA;部署版本&#xA;数据版本&#xA;静态资源版本&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;超时与重试&#34;&gt;&#xA;  超时与重试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b6%85%e6%97%b6%e4%b8%8e%e9%87%8d%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;压测与预案&#34;&gt;&#xA;  压测与预案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%8b%e6%b5%8b%e4%b8%8e%e9%a2%84%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;线下、线上&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;高并发&#34;&gt;&#xA;  高并发&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%ab%98%e5%b9%b6%e5%8f%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;缓存&#34;&gt;&#xA;  缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;客户端&#xA;    浏览器缓存   # Pragma, Expires, Cache-control&#xA;    ajax&#xA;    app缓存     # 大促时更新静态资源, 地图&#xA;客户端网络      # 代理服务器缓存&#xA;广域网&#xA;    代理服务器(如CDN)&#xA;        推送 或 拉取(回源)&#xA;    镜像服务器&#xA;    P2P&#xA;源站&#xA;    接入层缓存   # 如页面缓存，用redis&#xA;        url重写&#xA;        一致性哈希&#xA;        proxy_cache         # 内存/SSD缓存内容&#xA;        proxy_cache_lock    # 一段时间的回源合并成一个&#xA;        shared_dict         # lua, 重启缓存不丢失&#xA;    应用层缓存           # 如搜索，建议物品等&#xA;        堆内缓存&#xA;        堆外缓存        # local redis cache&#xA;    分布式缓存(接入层后)&#xA;        redis集群     # 异步化写入, lua-resty-lock(非阻塞锁)&#xA;    对象缓存    # db和应用间的查询结果集&#xA;    静态化, 伪静态化&#xA;    服务器操作系统缓存&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;连接池线程池&#34;&gt;&#xA;  连接池线程池&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%9e%e6%8e%a5%e6%b1%a0%e7%ba%bf%e7%a8%8b%e6%b1%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;异步化&#34;&gt;&#xA;  异步化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%82%e6%ad%a5%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;队列&#34;&gt;&#xA;  队列&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;作用&#xA;    服务解耦&#xA;    异步处理&#xA;    流量削峰/缓冲     # 如促销期&#xA;问题&#xA;    丢失/失败     # 持久化，日志，报警, 数据校对修正(worker扫库)&#xA;    重复          # 业务上防重&#xA;例子&#xA;    redis扣库存-&amp;gt;记录日志-&amp;gt;同步worker-&amp;gt;DB&#xA;消息总线可扩展     # x扩展不行，y扩展用专用总线(降低了灵活性), z扩展根据客户&#xA;减少拥挤          # 消息划分价值&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;扩容&#34;&gt;&#xA;  扩容&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%89%a9%e5%ae%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;无状态     # 应用无状态，配置有状态&#xA;    尽可能浏览器端维护会话&#xA;    分布式缓存放状态&#xA;拆分  # 加法组合，乘法功能&#xA;      # 项目死于1到10，或10到100，因为解耦不够，无法重构&#xA;    业务拆分&#xA;    功能细分&#xA;    读写      # 读缓存，写分库分表，聚合数据&#xA;    AOP      # 如CDN&#xA;    模块      # 代码特征，如基础模块分库分表，数据库连接池&#xA;数据异构&#xA;    例子&#xA;        聚合数据表(一般KV存储)   # 数据闭环(不依赖其它服务)&#xA;        历史归档&#xA;    并发化&#xA;选择工具&#xA;    数据库     # rdb, nosql, hadoop&#xA;    防火墙     # 墙需要的东西&#xA;    日志       # 采集分析&#xA;    用同品牌设备&#xA;    慎用第三方&#xA;容错&#xA;    隔离               # 不同步调用，限制异步调用(数量和超时)，能迅速发现故障&#xA;    不单点             # 一切都出故障&#xA;    不系统串联&#xA;    功能支持启用禁用    # 实现wire on/wire off框架&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;服务方法&#34;&gt;&#xA;  服务方法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;成本分析&#34;&gt;&#xA;  成本分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%88%90%e6%9c%ac%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# autonomy.design&#xA;表现&#xA;    一个需求拉很多人，代码写进来就删不掉了&#xA;    通用功能要么多种实现，要么参数过多&#xA;    线上问题难定位，本地做不了有意义的测试，反馈周期特别长&#xA;本质&#xA;    减少沟通&#xA;        autonomy(自治): 减少沟通，功能可以删掉&#xA;            问题: 产品从整体效果出发，开发从实现出发&#xA;            依赖倒置&#xA;                UI插槽, 服务集成&#xA;                实现(服务)&#xA;                    编译时: 模板、函数替换&#xA;                    运行时: 组合对象、组合函数&#xA;                实现(UI)&#xA;                    编译时: 页面模板替换, 显式组合与隐式组合&#xA;                    运行时: Vue插槽&#xA;        feedback(反馈): 故障定位，测试反馈，发版反馈，用户反馈无响应&#xA;            控制边界&#xA;                进程&#xA;                    跨进程调用监控: 基础设施完善&#xA;                    OS强制配额、安全性: 基础设施好&#xA;                    内存隔离&#xA;                函数&#xA;                    caller/callee索引: 同步调用栈、异步调用链、组件树&#xA;                    问题: 日志多，负责模糊&#xA;                插件&#xA;            控制变更&#xA;                多进程&#xA;                    多进程部署&#xA;                多租户&#xA;                多变种&#xA;                    配置中心下发开关&#xA;        consistency(一致性): 工具复用&#xA;            用户可见的一致性: UI/UE设计，前端落地&#xA;            autonomy: 上层业务推动&#xA;                问题: 依赖修改要慎重&#xA;            feedback: QA, KPI&#xA;拆分&#xA;    组合关系&#xA;        加法&#xA;        乘法&#xA;        一致性复用&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;扩展方式&#34;&gt;&#xA;  扩展方式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%89%a9%e5%b1%95%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;服务化发展&#xA;    进程内服务&#xA;    单机远程服务&#xA;    集群手动注册服务(nginx负载多实例)&#xA;    自动注册和发现服务(zookeeper)&#xA;    服务分组/隔离/路由&#xA;    服务治理(限流/黑白名单)&#xA;AKF扩展立方&#xA;    x轴 横向复制                 # 复制服务或db, 瓶颈：内存缓存、特有数据&#xA;    y轴 面向功能、服务、资源拆分   # 微服务&#xA;        动词拆分                 # 登录、搜索、推荐等&#xA;        名词拆分                 # 目录、库存、账户等&#xA;    z轴 拆相近东西               # 数据分片(大小客户、地区、新旧等)&#xA;横向扩展    # 复制服务或数据分散负载，纵向扩展是升级设备&#xA;    使用经济型系统&#xA;    扩展数据中心      # 三实时站点备份: a(0.5b, 0.5c), b(0.5a, 0.5c), c(0.5a,0.5b), 尽量分散&#xA;    使用云&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;微服务&#34;&gt;&#xA;  微服务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%be%ae%e6%9c%8d%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;单体应用问题&#xA;    复杂: 模块多, 边界模糊, 依赖关系不清晰, 代码质量不统一&#xA;    技术债务: 不坏不修&#xA;    部署频率低: 迭代要部署整个应用，部署时间长，风险高。修复问题慢, 易出错&#xA;    可靠性差: 某bug导致整个应用崩溃&#xA;    扩展性差&#xA;    阻碍技术更新&#xA;特征&#xA;    服务组件化&#xA;    按业务组织团队&#xA;    负责的态度, 不再是交付给维护者&#xA;    粗粒度通信, http(二进制协议)或消息总线&#xA;    去中心化治理&#xA;    去中心化管理数据&#xA;    基础设施自动化&#xA;    容错设计&#xA;    演进式设计&#xA;原则&#xA;    单一职责&#xA;    自洽&#xA;    轻量级通信&#xA;    服务粒度: 边界(DDD中的界限上下文)&#xA;持续发布&#xA;    工具链，自动化&#xA;    契约&#xA;    架构守护&#xA;    灰度替换&#xA;*aaS&#xA;    SaaS(software as a service)&#xA;    PaaS(platform as a service)&#xA;    aPaaS(application PaaS)         # 简单配置产生任意需求的application&#xA;    saPaaS(specific aPaaS)          # 领域定制的aPaaS&#xA;    GaPaaS(generator of aPaaS)      # 脚手架，产生定制的aPaaS&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;云原生&#34;&gt;&#xA;  云原生&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%91%e5%8e%9f%e7%94%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    cloud navtive, Pivotal 2013年提出&#xA;12-Factor&#xA;    1 基准代码(code base)&#xA;        一份代码，多份部署&#xA;    2 依赖(dependences)&#xA;        显式声明依赖&#xA;    3 配置(config)&#xA;        配置存储于环境变量中&#xA;        环境变量粒度足够小，相对独立&#xA;    4 后端服务(backing services)&#xA;        后端服务作为附加资源, 与第三方服务不区别对待&#xA;    5 分离构建、发布、运行(build, release, run)&#xA;        构建: 代码转化到可执行包&#xA;        发布: 可执行包结合配置&#xA;        运行: 选定发布版本，按计划启动&#xA;    6 进程(process)&#xA;        多个无状态进程运行&#xA;    7 端口(port binding)&#xA;        网络服务通过端口绑定提供服务&#xA;        完全自我加载不依赖网络服务器&#xA;    8 并发(concurrency)&#xA;        进程作为一等公民&#xA;        通过进程模型扩展并发&#xA;    9 易处理(disposability)&#xA;        进程快速启动、优雅终止可最大化健壮性&#xA;        追求最小启动时间, 收到SIGTERM优雅终止，突然死亡时保持健壮&#xA;    10 环境等价(dev/prod parity)&#xA;        开发环境等价线上环境&#xA;    11 日志(logs)&#xA;        日志作为事件流&#xA;        应用本身使用stdout事件流，不考虑存储输出流，不管理日志&#xA;    12 管理进程(admin processes)&#xA;        管理进程不常驻, 一次性运行&#xA;        使用同样环境、代码版本、配置、依赖隔离, 避免同步问题&#xA;        提供REPL shell使一次性脚本变简单&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;service-mesh&#34;&gt;&#xA;  Service Mesh&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#service-mesh&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;处于 TCP/IP 之上的抽象层&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;serverless&#34;&gt;&#xA;  Serverless&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#serverless&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;只写业务代码，不关心服务器运行状态&#xA;BaaS&#xA;    # Backend as a Service&#xA;FaaS&#xA;    # Functions as a Service&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>项目规划</title>
      <link>https://ukeate.com/docs/architect/method/project_plan/</link>
      <pubDate>Wed, 10 Oct 2018 14:51:24 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/method/project_plan/</guid>
      <description>&lt;h1 id=&#34;平台服务&#34;&gt;&#xA;  平台服务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b9%b3%e5%8f%b0%e6%9c%8d%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;apaas&#34;&gt;&#xA;  aPaaS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#apaas&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# platform as a service，介于IaaS和SaaS中间&#xA;将软件研发的平台做为服务，以SaaS的模式交付&#xA;组件化支撑和驱动&#xA;    # 组件的发展决定paas广度，组件的聚合决定paas深度&#xA;    # 对内固守组件边界，对外暴露标准接口&#xA;分层&#xA;    平台组件&#xA;    基础业务    # 不可见，影响全局，通用业务逻辑，对性能很敏感&#xA;    业务&#xA;组件&#xA;    设计&#xA;        # 自描述的，这样就在设计和开发上解耦&#xA;        确定边界&#xA;        定义标准接口&#xA;        确定核心功能&#xA;        规范异常处理&#xA;    开发&#xA;        # 像开发dsl一样,来评判核心逻辑和接口，抽象度高&#xA;        技术评审&#xA;        定义接口&#xA;            # 面向接口开发，也称为BDD&#xA;            dubbo、grpc等&#xA;            restful&#xA;        接口设计&#xA;            标准化&#xA;            说明&#xA;            服务路由&#xA;            版本管理&#xA;            授权管理&#xA;核心理念&#xA;    # 体现在 服务、工具、模型、规范&#xA;    开放 而非 封闭&#xA;    合作 而非 限制&#xA;    共享 而非 替代&#xA;重点关注&#xA;    基础业务&#xA;        组织架构和用户组&#xA;        审批流&#xA;        权限&#xA;    通用模型&#xA;        透明分布式缓存模型&#xA;        分布式存储模型&#xA;        分布式事务模型&#xA;    效率工具&#xA;        数据迁移工具&#xA;        缓存配置工具&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;saas&#34;&gt;&#xA;  SaaS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#saas&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;aws线上云&#xA;微服务 + gRPC + k8s + Istio&#xA;Golang + TypeScript + Python&#xA;TiDB&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;行为分析&#34;&gt;&#xA;  行为分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a1%8c%e4%b8%ba%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;埋点&#34;&gt;&#xA;  埋点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%8b%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;架构&#xA;    数据采集&#xA;        客户端采集&#xA;        服务器采集&#xA;        业务系统&#xA;        第三方渠道&#xA;    数据治理&#xA;        ETL&#xA;        实时ID mapping&#xA;        元数据管理&#xA;        数据质量管理: 数据校验, 实时导入监控，异常报警，debug数据查询，用户关联校验，数据质量看板&#xA;    数据仓库&#xA;        数据模型：Event, User, Item内容&#xA;        实时导入系统&#xA;        存储引擎、查询引擎&#xA;    数据智能&#xA;        特征工程&#xA;        特征选择&#xA;        模型训练: 深度学习, 自然语言处理，时序预测，GBDT/LR, AutoML&#xA;        模型可视化&#xA;        在线服务&#xA;工具&#xA;    采集: SDK(JS, Android, iOS, 小程序，服务端，全埋点), ID Mapping, 归因链路&#xA;    实施工具: 事件管理，变量管理，命名工具，埋点SLA配置, 预警配置，session管理，生命周期管理，tag管理，测试工具，ABTest工具&#xA;    分析工具: 事件分析，漏斗分析，分布分析，留存分析，数据看板，热图分析，归因分析，自定义SQL查询, API管理，广告和活动效果监测&#xA;实现方式&#xA;    代码埋点&#xA;    全埋点、可视化全埋点（圈选）&#xA;规范&#xA;    结构与命名清晰&#xA;    方便历史版本对比&#xA;    每个埋点数据质量负责到人（开发、测试、数据负责人）&#xA;    数据统一管理&#xA;    尽量用工具自动化&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;企业中台&#34;&gt;&#xA;  企业中台&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%81%e4%b8%9a%e4%b8%ad%e5%8f%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;数据&#xA;  租户&#xA;  用户&#xA;micro service&#xA;  每个service监控&#xA;  每个service不单点&#xA;  单功能拆分，边界明确&#xA;  service间只依赖sdk(好莱坞法则)，通过服务总线发现&#xA;  servcie无状态接入&#xA;  分类&#xA;    内部服务 internal&#xA;      # 内外服务用互相转化&#xA;      文件上传&#xA;      图像处理&#xA;      数据挖掘&#xA;      报表&#xA;    外部服务 external&#xA;      # 流控、质量监控、多链路备用、降级方案&#xA;      邮件&#xA;      短信&#xA;      推送&#xA;      cti&#xA;      企业信息校验&#xA;    业务服务 transaction&#xA;      审批流&#xA;      工作流&#xA;      登录&#xA;      海&#xA;    核心服务 core&#xA;      租户id服务&#xA;      检索服务&#xA;      报表服务&#xA;      监控服务&#xA;      k8s&#xA;      服务总线&#xA;    支持服务 supportive&#xA;      文档&#xA;      测试环境&#xA;      沙盒同步&#xA;    插件服务 plugin&#xA;    集成服务 integration&#xA;    事务服务&#xA;      finance&#xA;      CPQ&#xA;      ERP&#xA;    saas基础&#xA;      计费&#xA;      用户管理&#xA;    联动&#xA;      导入企业数据&#xA;      调用aws或aliyun，提供webhook&#xA;  服务的sdk&#xA;    多语言sdk&#xA;    降级&#xA;    ha&#xA;    apm&#xA;  服务监控&#xA;    # 用于发现问题、追查事故、评估缩容或扩容、评估降级&#xA;    日志&#xA;    接口&#xA;      # 调用服务提供的监控接口&#xA;    系统&#xA;      # 容器提供&#xA;    apm&#xA;      # 客户端采样&#xA;    可达性&#xA;      # 由通用监控完成&#xA;  工程&#xA;    打包docker镜像&#xA;  服务升级&#xA;    灰度发布与AB test&#xA;    提供api版本接口供客户端查询&#xA;  服务总线&#xA;    管理服务状态、位置&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;本地生活&#34;&gt;&#xA;  本地生活&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%ac%e5%9c%b0%e7%94%9f%e6%b4%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ukeate/logseq/blob/main/jncloud/pages/%E5%AE%9E%E4%BD%93%E8%A7%86%E5%9B%BE.md&#34;&gt;服务与功能&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
