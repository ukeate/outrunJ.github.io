<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux场景 on ukeate的笔记</title>
    <link>https://ukeate.com/categories/linux%E5%9C%BA%E6%99%AF/</link>
    <description>Recent content in Linux场景 on ukeate的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Aug 2022 13:53:50 +0800</lastBuildDate>
    <atom:link href="https://ukeate.com/categories/linux%E5%9C%BA%E6%99%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LinuxScene</title>
      <link>https://ukeate.com/docs/tool/linux/scene/</link>
      <pubDate>Thu, 11 Oct 2018 18:47:57 +0800</pubDate>
      <guid>https://ukeate.com/docs/tool/linux/scene/</guid>
      <description>&lt;h1 id=&#34;场景&#34;&gt;&#xA;  场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;路由&#34;&gt;&#xA;  路由&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b7%af%e7%94%b1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;查路由表&#xA;    ip ro&#xA;    route -n&#xA;改路由&#xA;    route del -net 192.168.0.0 netmask 255.255.255.0 gw 10.146.81.117&#xA;转发&#xA;    ip ro ad 192.168.0.0/24 via [主机ip]&#xA;    主机配置&#xA;        echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&#xA;        # etc/sysctl.conf&#xA;            net.ipv4.ip_forward = 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;方案&#34;&gt;&#xA;  方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;高并发&#34;&gt;&#xA;  高并发&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%ab%98%e5%b9%b6%e5%8f%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;查看当前TCP连接的状态和对应的连接数量：&#xA;    netstat -n | awk &#39;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&#39;&#xA;        # TIME_WAIT占用端口会影响后继新连接&#xA;初步优化（提升服务器的负载能力之外，还能够防御小流量程度的DoS、CC和SYN攻击。）&#xA;    /etc/sysctl.conf&#xA;        net.ipv4.tcp_syncookies = 1&#xA;            # 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；&#xA;        net.ipv4.tcp_tw_reuse = 1&#xA;            # 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；&#xA;        net.ipv4.tcp_tw_recycle = 1&#xA;            # 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭；&#xA;        net.ipv4.tcp_fin_timeout = 30&#xA;            # 修改系統默认的 TIMEOUT 时间。&#xA;    sysctl -p       # 生效&#xA;大流量下的优化&#xA;    # 如果你的连接数本身就很多，我们可以再优化一下TCP的可使用端口范围，进一步提升服务器的并发能力&#xA;    /etc/sysctl.conf&#xA;    net.ipv4.tcp_keepalive_time = 1200&#xA;        # 表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。&#xA;    net.ipv4.ip_local_port_range = 10000 65000&#xA;        # 表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为10000到65000。（注意：这里不要将最低值设的太低，否则可能会占用掉正常的端口！）&#xA;    net.ipv4.tcp_max_syn_backlog = 8192&#xA;        # 表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数。&#xA;    net.ipv4.tcp_max_tw_buckets = 6000&#xA;        # 表示系统同时保持TIME_WAIT的最大数量，如果超过这个数字，TIME_WAIT将立刻被清除并打印警告信息。默 认为180000，改为6000。对于Apache、Nginx等服务器，上几行的参数可以很好地减少TIME_WAIT套接字数量，但是对于Squid，效果却不大。此项参数可以控制TIME_WAIT的最大数量，避免Squid服务器被大量的TIME_WAIT拖死。&#xA;其它参数说明&#xA;    net.ipv4.tcp_max_syn_backlog = 65536&#xA;        # 记录的那些尚未收到客户端确认信息的连接请求的最大值。对于有128M内存的系统而言，缺省值是1024，小内存的系统则是128。&#xA;    net.core.netdev_max_backlog = 32768&#xA;        # 每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。&#xA;    net.core.somaxconn = 32768&#xA;        # web应用中listen函数的backlog默认会给我们内核参数的net.core.somaxconn限制到128，而nginx定义的NGX_LISTEN_BACKLOG默认为511，所以有必要调整这个值。&#xA;    net.core.wmem_default = 8388608&#xA;    net.core.rmem_default = 8388608&#xA;    net.core.rmem_max = 16777216           #最大socket读buffer,可参考的优化值:873200&#xA;    net.core.wmem_max = 16777216           #最大socket写buffer,可参考的优化值:873200&#xA;    net.ipv4.tcp_timestsmps = 0&#xA;        # 时间戳可以避免序列号的卷绕。一个1Gbps的链路肯定会遇到以前用过的序列号。时间戳能够让内核接受这种“异常”的数据包。这里需要将其关掉。&#xA;    net.ipv4.tcp_synack_retries = 2&#xA;        # 为了打开对端的连接，内核需要发送一个SYN并附带一个回应前面一个SYN的ACK。也就是所谓三次握手中的第二次握手。这个设置决定了内核放弃连接之前发送SYN+ACK包的数量。&#xA;    net.ipv4.tcp_syn_retries = 2&#xA;        # 在内核放弃建立连接之前发送SYN包的数量。&#xA;    #net.ipv4.tcp_tw_len = 1&#xA;    net.ipv4.tcp_tw_reuse = 1&#xA;        # 开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接。&#xA;    net.ipv4.tcp_wmem = 8192 436600 873200&#xA;        # TCP写buffer,可参考的优化值: 8192 436600 873200&#xA;    net.ipv4.tcp_rmem  = 32768 436600 873200&#xA;        # TCP读buffer,可参考的优化值: 32768 436600 873200&#xA;    net.ipv4.tcp_mem = 94500000 91500000 92700000&#xA;        # net.ipv4.tcp_mem[0]:低于此值，TCP没有内存压力。&#xA;        # net.ipv4.tcp_mem[1]:在此值下，进入内存压力阶段。&#xA;        # net.ipv4.tcp_mem[2]:高于此值，TCP拒绝分配socket。&#xA;        # 上述内存单位是页，而不是字节。可参考的优化值是:786432 1048576 1572864&#xA;    net.ipv4.tcp_max_orphans = 3276800&#xA;        # 系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。&#xA;        # 如果超过这个数字，连接将即刻被复位并打印出警告信息。&#xA;        # 这个限制仅仅是为了防止简单的DoS攻击，不能过分依靠它或者人为地减小这个值，&#xA;        # 更应该增加这个值(如果增加了内存之后)。&#xA;    net.ipv4.tcp_fin_timeout = 30&#xA;        #如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2状态的时间。对端可以出错并永远不关闭连接，甚至意外当机。缺省值是60秒。2.2 内核的通常值是180秒，你可以按这个设置，但要记住的是，即使你的机器是一个轻载的WEB服务器，也有因为大量的死套接字而内存溢出的风险，FIN- WAIT-2的危险性比FIN-WAIT-1要小，因为它最多只能吃掉1.5K内存，但是它们的生存期长些。&#xA;&#xA;    sysctl -w fs.file-max=12000000&#xA;    sysctl -w fs.nr_open=11000000&#xA;&#xA;    /etc/security/limits.conf&#xA;        nofile=10000000         # 文件句柄数&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
