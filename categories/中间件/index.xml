<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中间件 on ukeate的笔记</title>
    <link>https://ukeate.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
    <description>Recent content in 中间件 on ukeate的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 Jan 2025 08:31:29 -0700</lastBuildDate>
    <atom:link href="https://ukeate.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>中间件</title>
      <link>https://ukeate.com/docs/middleware/</link>
      <pubDate>Wed, 10 Oct 2018 14:36:50 +0800</pubDate>
      <guid>https://ukeate.com/docs/middleware/</guid>
      <description>&lt;h1 id=&#34;容器服务&#34;&gt;&#xA;  容器服务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%b9%e5%99%a8%e6%9c%8d%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;tomcat&#34;&gt;&#xA;  tomcat&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tomcat&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;## 介绍&#xA;    tomcat从7开始默认就是nio的&#xA;## 配置&#xA;    bin/startup.bat&#xA;            set JAVA_HOME=&#xA;                            # 设置tomcat运行jdk&#xA;    context.xml&#xA;        &amp;lt;Loader delegate=&amp;quot;true&amp;quot;/&amp;gt;&#xA;                # true表示使用java加载器的代理模式&#xA;                ## false代表永远先在Web应用程序中寻找&#xA;    web.xml&#xA;        Content-Type: text/x-zim-wiki&#xA;        Wiki-Format: zim 0.4&#xA;        Creation-Date: 2013-08-04T19:40:08+08:00&#xA;&#xA;        ====== web.xml文件 ======&#xA;        Created Sunday 04 August 2013&#xA;&#xA;        &amp;lt;servlet&amp;gt;&#xA;                &amp;lt;servlet-name&amp;gt;&#xA;                &amp;lt;servlet-class&amp;gt;&#xA;                &amp;lt;load-on-startup&amp;gt;1&#xA;                &amp;lt;init-param&amp;gt;&#xA;                        &amp;lt;param-name&amp;gt;&#xA;                        &amp;lt;param-value&amp;gt;&#xA;        &amp;lt;servlet-mapping&amp;gt;&#xA;                &amp;lt;servlet-name&amp;gt;&#xA;                &amp;lt;url-pattern&amp;gt;&#xA;&#xA;        &amp;lt;welcome-file-list&amp;gt;&#xA;                &amp;lt;welcome-file&amp;gt;&#xA;&#xA;        &amp;lt;filter&amp;gt;&#xA;                &amp;lt;filter-name&amp;gt;&#xA;                &amp;lt;filter-class&amp;gt;&#xA;                &amp;lt;init-param&amp;gt;&#xA;        &amp;lt;filter-mapping&amp;gt;&#xA;                &amp;lt;filter-name&amp;gt;&#xA;                &amp;lt;url-pattern&amp;gt;&#xA;&#xA;        &amp;lt;mime-mapping&amp;gt;&#xA;                &amp;lt;extension&amp;gt;bmp&#xA;                &amp;lt;mime-type&amp;gt;image/bmp&#xA;&#xA;        &amp;lt;error-page&amp;gt;&#xA;                &amp;lt;exception-type&amp;gt;异常类的完全限定名 /&amp;lt;error-code&amp;gt;错误码&#xA;                &amp;lt;location&amp;gt;以“/”开头的错误处理页面路径&#xA;&#xA;## 启动顺序&#xA;    web.xml中配置的启动顺序&#xA;            监听器&#xA;            过滤器&#xA;            servlet&#xA;                    load-on-startup属性值越小越先启动&#xA;&#xA;    tomcat的加载过程：        # 分析启动日志得到&#xA;            启动http协议&#xA;            启动catalina&#xA;            启动servlet引擎&#xA;            加载xml配置文件&#xA;            初始化日志配置&#xA;            初始化ContextListener&#xA;            初始化SessionListener&#xA;            部署web项目&#xA;                    spring监听器，加载xml配置(开始spring自己的日志记录)&#xA;                            实例化bean&#xA;                                    初始化c3p0连接池的记录显示&#xA;                                    初始化LocalSessionFactoryBean的记录显示&#xA;                    application监听器(监听器按配置顺序启动)&#xA;                    struts过滤器，加载xml配置(开始struts自己的日志记录)&#xA;                            struts-default.xml&#xA;                                    根据其中配置的bean属性加载类，并记录了日志&#xA;                            struts-plugin.xml                # 里面有加载spring-struts-plugin包&#xA;                                    初始化struts-spring 集成&#xA;                            struts.xml&#xA;## 目录&#xA;    LICENSE&#xA;    NOTICE&#xA;    RELEASE-NOTES&#xA;    RUNNING.txt&#xA;    bin&#xA;            bootstrap.jar&#xA;            commons-daemon.jar&#xA;            tomcat-juli.jar&#xA;            tomcat-native.tar.gz&#xA;            commons-daemon-native.tar.gz&#xA;            catalina.bat&#xA;            shutdown.bat&#xA;            startup.bat&#xA;            cpappend.bat&#xA;            digest.bat&#xA;            setclasspath.bat&#xA;            tool-wrapper.bat&#xA;            version.bat&#xA;            catalina.sh&#xA;            shutdown.sh&#xA;            startup.sh&#xA;            digest.sh&#xA;            setclasspath.sh&#xA;            tool-wrapper.sh&#xA;            version.sh&#xA;            catalina-tasks.xml&#xA;    conf&#xA;            catalina.policy&#xA;            catalina.properties&#xA;            logging.properties&#xA;            context.xml&#xA;            server.xml&#xA;            tomcat-users.xml&#xA;            web.xml&#xA;            Catalina&#xA;                    localhost&#xA;                            host-manager.xml&#xA;                            manager.xml&#xA;    lib&#xA;            annotations-api.jar&#xA;            catalina.jar&#xA;            catalina-ant.jar&#xA;            catalina-ha.jar&#xA;            catalina-tribes.jar&#xA;            el-api.jar&#xA;            jasper.jar&#xA;            jasper-el.jar&#xA;            jasper-jdt.jar&#xA;            jsp-api.jar&#xA;            servlet-api.jar&#xA;            tomcat-coyote.jar&#xA;            tomcat-dbcp.jar&#xA;            tomcat-i18n-es.jar&#xA;            tomcat-i18n-fr.jar&#xA;            tomcat-i18n-ja.jar&#xA;    log&#xA;            catalina.2013-07-28.log等等&#xA;    webapps&#xA;            ROOT&#xA;                    WEB-INF&#xA;                            web.xml&#xA;            docs&#xA;            examples&#xA;            manager&#xA;            host-manager&#xA;    tmp&#xA;    work&#xA;&#xA;    发布&#xA;            conf/server.xml 中8080端口 位置&#xA;            &amp;lt;Context path=&amp;quot;/bbs&amp;quot; reloadable=&amp;quot;true&amp;quot; docBase=&amp;quot;E:\workspace\bbs&amp;quot; workDir=&amp;quot;E:\workspace\bbs\work&amp;quot; /&amp;gt;&#xA;&#xA;    发布war文件：&#xA;            localhost:8080 -&amp;gt; tomcat manager -&amp;gt; WAR file to deploy&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;netty&#34;&gt;&#xA;  netty&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#netty&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    JBOSS提供，由Trustin Lee开发，比mina晚&#xA;    java开源框架&#xA;对比java nio&#xA;    java原生nio有bug(epoll bug)且编写困难, 网络可靠性自己处理&#xA;    netty设计优雅，使用方便，高性能、稳定&#xA;原理&#xA;    基于socket的数据流处理&#xA;        # socket数据流不是a queue of packets , 而是a queue of bytes, 所以分次传输的数据会成为a bunch of bytes&#xA;例子&#xA;    Handler&#xA;        ChannelHandler&#xA;            ChannelOutboundHandler&#xA;                    ChannelOutboundHandlerAdapter                        # 可作Encoder&#xA;                    MessageToByteEncoder&#xA;            ChannelInboundHandler                # 提供可重写的事件&#xA;                    ChannelInboundHandlerAdapter&#xA;                    ByteToMessageDecoder        # easy to deal with fragmentation issue&#xA;                            事件&#xA;                                    decode(ctx, in, out)                        # 内部处理过数据，堆积到了buffer(in)&#xA;                                                                            ## out中add了数据, 表示decode成功，则执行后抛弃in中数据&#xA;                                                                            # decode会被循环调用直到有一次out中没有add东西&#xA;                    ReplayingDecoder&#xA;                    事件&#xA;                            channelRead()                # 从client接收到数据时调用，数据的类型是ByteBuf&#xA;                                                    ## ByteBuf是 reference-counted object&#xA;                                                    ## 必须用ReferenceCountUtil.release(msg)或((ByteBuf) msg).release()来明确释放&#xA;                            exceptionCaught()        # 当抛出Throwable对象时调用&#xA;                            channelActive()                # as soon as a connection is established&#xA;            方法&#xA;                    handlerAdded()&#xA;                    handlerRemoved()&#xA;        ByteBuf&#xA;            方法&#xA;                    buf.writeBytes(m)                # 将m[ByteBuf]中的数据 cumulate into buf[ 定长的ByteBuf, 如ctx.alloc().buffer(4) ]&#xA;                    isReadable()                        # 返回ByteBuf中data的长度&#xA;        ChannelHandlerContext                # 用于触发一些i/o事件&#xA;            方法&#xA;                    write(msg)                # msg在flush后自动realease&#xA;                            write(msg, promise)                                # promise是ChannelPromise的对象，用来标记msg是否确切地写入到管道中&#xA;                    flush()&#xA;                    writeAndFlush(msg)                                        # 返回ChannelFuture&#xA;                    alloc()                                                        # 分配缓冲区来包含数据&#xA;        ByteBufAllocator&#xA;            buffer(4)                        # 返回存放32-bit Integer的ByteBuf&#xA;    Server&#xA;        EventLoopGroup&#xA;            NioEventLoopGroup                # 多线程 i/o eventloop&#xA;            方法&#xA;                    shutdownGracefully()                                                # 返回Funture类来通知group是否完全关闭并且所有group的channels都关闭&#xA;        ServerBootstrap                        # 建server的帮助类，链式编程&#xA;                                            ## 可以直接用Channel来建server&#xA;            方法&#xA;                group(bossGroup, workerGroup)                                # boss接收连接，worker处理boss中的连接&#xA;                        group(workerGroup)                                        # 只有一个参数时，该group即作boss也作worker&#xA;                channel(NioServerSocketChannel.class)                        # 用来接收连接的channel的类型&#xA;                        channel(NioSocketChannel.class)                        # create client-side channel&#xA;                childHandler(channelInitializer)                                # 新接收的channel总执行本handler&#xA;                                                                                ## 只有workerGroup时不用&#xA;                option(ChannelOption.SO_BACKLOG, 128)                        # channel实现的参数&#xA;                childOption(channelOption.SO_KEEPALIVE, true)                # option设置boss, childOption设置worker&#xA;                                                                                ## 在只有workerGroup时不用childOption,因为它没有parent&#xA;                bind(port)                                                        # 开始接收连接，返回的是ChannelFuture&#xA;                                                                                    ## 绑定网卡上的所有port端口，可以bind多次到不同的端口&#xA;        ChannelInitializer                        # 帮助设置channel, 如设置channel的pipeline中的handler&#xA;            实例&#xA;                new　ChannelInitializer&amp;lt;SocketChannel&amp;gt;(){&#xA;                        @Override&#xA;                        public void initChannel(SocketChannel ch) throws Exception{&#xA;                                ch.pipeline().addLast(new DiyHandler());&#xA;                        }&#xA;                }&#xA;        ChannelFuture&#xA;            方法&#xA;                sync()&#xA;                channel()                                                        # 返回Channel&#xA;                addListener(channelFutureListener)&#xA;        Channel&#xA;                closeFuture()                                                        # 返回ChannelFuture&#xA;        ChannelFutureListener&#xA;            实例&#xA;                new ChannelFutureListener(){&#xA;                    // 当请求结束时通知&#xA;                    @Override&#xA;                    public void operationComplete(ChannelFuture future){&#xA;                        assert f == future;&#xA;                        ctx.close();&#xA;                    }&#xA;                }&#xA;    client&#xA;        Bootstrap                        # for non-server channels such as a client-side or connectionless channel&#xA;            connect(host, port)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;netty-tcnative&#34;&gt;&#xA;  netty-tcnative&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#netty-tcnative&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;        tomcat native 的分支&#xA;特点&#xA;        简化本地库的分配和连接&#xA;        可以maven配置dependency&#xA;        提供openssl的支持&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;jetty&#34;&gt;&#xA;  jetty&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jetty&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 是开源的servlet容器，基于java, 可以给jsp和servlet提供运行环境&#xA;# jetty容器可以实例化成一个对象，迅速为一些独立运行(stand-alone)的java应用提供网络和web连接&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;apache&#34;&gt;&#xA;  apache&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#apache&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# http容器，可容纳php, python。一请求一线程&#xA;安装&#xA;    pacman -S apache&#xA;    mkdir /srv/http&#xA;    chown http:http /srv/http&#xA;编译安装&#xA;    ./configure&#xA;        --prefix=/全路径/install_path&#xA;        --with-apxs2=/全路径/apxs            # 模块&#xA;    make&#xA;    make install&#xA;命令&#xA;    httpd&#xA;        -f                                  # 指定配置&#xA;        -t                                  # 配置检查&#xA;        -k&#xA;            start&#xA;            restart&#xA;            graceful&#xA;            stop&#xA;            graceful-stop&#xA;    apachectl&#xA;        graceful                            # 重载配置&#xA;        -f /全路径/httpd.conf                # 指定配置&#xA;        -t                                  # 配置检查&#xA;配置&#xA;    /etc/httpd/conf/httpd.conf&#xA;        DocumentRoot &amp;quot;/srv/http&amp;quot;            # 项目路径&#xA;        Listen                              # 端口&#xA;案例&#xA;    php&#xA;        docker解决&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;lighttpd&#34;&gt;&#xA;  lighttpd&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lighttpd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;meteor&#34;&gt;&#xA;  meteor&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#meteor&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 包装node&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;ringojs&#34;&gt;&#xA;  ringojs&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ringojs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# jvm上commonJs规范的服务器&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;mina&#34;&gt;&#xA;  mina&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mina&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;apache提供， 由Trustin Lee开发，比netty更早&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;tomcat-native&#34;&gt;&#xA;  tomcat native&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tomcat-native&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 基于apr(apache portable runtime)技术，让tomcat在操作系统级别的交互上做的更好&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;tinyhttpd&#34;&gt;&#xA;  tinyHttpd&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tinyhttpd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;resin&#34;&gt;&#xA;  resin&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#resin&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 收费, 类似tomcat的java容器，性能提升&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;uwsgi&#34;&gt;&#xA;  uwsgi&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#uwsgi&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 一个web服务器，实现了wsgi, uwsgi, http等协议&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;weblogic&#34;&gt;&#xA;  weblogic&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#weblogic&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# oracle&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;was&#34;&gt;&#xA;  was&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#was&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# ibm服务器&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;gunicon&#34;&gt;&#xA;  gunicon&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gunicon&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# python wsgi http server&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;nodejs&#34;&gt;&#xA;  node.js&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nodejs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;openresty&#34;&gt;&#xA;  OpenResty&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openresty&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 基于Nginx扩展&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;tengine&#34;&gt;&#xA;  Tengine&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tengine&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 基于Nginx扩展&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数据库访问&#34;&gt;&#xA;  数据库访问&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e8%ae%bf%e9%97%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;druid&#34;&gt;&#xA;  Druid&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#druid&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;sharding-jdbc&#34;&gt;&#xA;  Sharding JDBC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sharding-jdbc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h1 id=&#34;缓存&#34;&gt;&#xA;  缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;缓存失效策略&#xA;&#x9;FIFO(First Input First Output)&#xA;&#x9;LRU(Least Recently Used)&#xA;&#x9;LFU(Least Frequently Used)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;客户端缓存&#34;&gt;&#xA;  客户端缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%a2%e6%88%b7%e7%ab%af%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Header&#xA;&#x9;Cache-Control: no-cache, no-store, max-age=0, must-revalidate&#xA;&#x9;Vary: Accept-Encoding&#xA;&#x9;Vary: Origin&#xA;&#x9;Vary: Access-Control-Request-Method&#xA;&#x9;Vary: Access-Control-Request-Headers&#xA;&#x9;Vary: Origin&#xA;&#x9;Vary: Access-Control-Request-Method&#xA;&#x9;Vary: Access-Control-Request-Headers&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;本地缓存&#34;&gt;&#xA;  本地缓存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%ac%e5%9c%b0%e7%bc%93%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Ehcache&#xA;&#x9;堆内、堆外、磁盘三级缓存，可按容量制定缓存策略&#xA;&#x9;可按时间、次数制定过期策略&#xA;Guava Cache&#xA;&#x9;堆内缓存&#xA;Nginx本地缓存&#xA;Nginx PageSpeed插件&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;缓存服务&#34;&gt;&#xA;  缓存服务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%93%e5%ad%98%e6%9c%8d%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;HTTP&#xA;&#x9;Nuster&#xA;&#x9;&#x9;基于HAProxy的HTTP缓存服务器&#xA;&#x9;Varnish&#xA;&#x9;&#x9;3台Varnish代替12台Squid&#xA;&#x9;Squid&#xA;Memcached&#xA;Redis&#xA;Tair&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;配置服务发现&#34;&gt;&#xA;  配置、服务发现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae%e6%9c%8d%e5%8a%a1%e5%8f%91%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;apollo&#34;&gt;&#xA;  Apollo&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#apollo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 支持推、拉模式更新&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;eureka&#34;&gt;&#xA;  Eureka&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#eureka&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;nacos&#34;&gt;&#xA;  Nacos&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nacos&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h1 id=&#34;rpc&#34;&gt;&#xA;  RPC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rpc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;dubbo&#34;&gt;&#xA;  Dubbo&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dubbo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;thrift&#34;&gt;&#xA;  Thrift&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#thrift&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;grpc&#34;&gt;&#xA;  gRPC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#grpc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h1 id=&#34;消息队列&#34;&gt;&#xA;  消息队列&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;消息重发&#xA;    状态表记录消息状态&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;pulsar&#34;&gt;&#xA;  pulsar&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#pulsar&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 雅虎开源, 存储和服务分离，高可用存储, 支持流&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;rabbitmq&#34;&gt;&#xA;  rabbitMQ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rabbitmq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    erlang开发, 重量级&#xA;    支持协议多，AMQP、XMPP、SMTP、STOMP&#xA;    Broker构架        # 消息在中心队列排队&#xA;install&#xA;        yum install rabbitmq-server&#xA;命令&#xA;        添加用户:&#xA;                rabbitmqctl add_user rainbird password&#xA;        添加权限:&#xA;                rabbitmqctl set_permissions -p &amp;quot;/&amp;quot; rainbird &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot;&#xA;        删除测试用户:&#xA;                rabbitmqctl delete_user guest&#xA;原理&#xA;    虚拟主机 virtual host: 用户通过虚拟主机进行权限控制(如禁止A组访问B组的交换机)&#xA;            ＃ 默认虚拟主机为&amp;quot;/&amp;quot;&#xA;            队列 queue: 由生产者(producers)通过程序建立，再通过消费者(consuming)连接取走&#xA;                    消息:&#xA;                            路由键 routing key&#xA;            交换机 exchange: 负责把消息放入队列&#xA;                    绑定 binding(路由规则): 如指明交换机中具有路由键&amp;quot;X&amp;quot;的消息要到名为&amp;quot;Y&amp;quot;的队列中去&#xA;                            # 如果同一个键对应多个队列，则复制后分别发送&#xA;&#xA;    功能&#xA;            持久化&#xA;                    队列和交换机创建时指定标志durable,指定队列和交换机重启生重建&#xA;                            ＃ 如果绑定了durable的队列和durable的交换机，该绑定自动保留&#xA;                            ＃ non-durable的交换机与durable的队列不能绑定&#xA;                            ＃ 一但创建durable标志，不能修改&#xA;                    消息发布到交换机时，指定标志Delivery Mode=2,这样消息会持久化&#xA;使用(原文http://adamlu.net/rabbitmq/tutorial-one-python)&#xA;        安装python 与插件支持&#xA;                pip&#xA;                python-pip git&#xA;                python-pika&#xA;        rabbitmq-server start&#xA;        send.py&#xA;            #!/usr/bin/env python&#xA;            import pika&#xA;&#xA;            connection = pika.BlockingConnection(pika.ConnectionParameters(&#xA;                    host=&#39;localhost&#39;))&#xA;            channel = connection.channel()&#xA;&#xA;            channel.queue_declare(queue=&#39;hello&#39;)&#xA;&#xA;            channel.basic_publish(exchange=&#39;&#39;,&#xA;                                routing_key=&#39;hello&#39;,&#xA;                                body=&#39;Hello World!&#39;)&#xA;            print &amp;quot; [x] Sent &#39;Hello World!&#39;&amp;quot;&#xA;            connection.close()&#xA;                    receive.py&#xA;                            #!/usr/bin/env python&#xA;            import pika&#xA;&#xA;            connection = pika.BlockingConnection(pika.ConnectionParameters(&#xA;                    host=&#39;localhost&#39;))&#xA;            channel = connection.channel()&#xA;&#xA;            channel.queue_declare(queue=&#39;hello&#39;)&#xA;&#xA;            print &#39; [*] Waiting for messages. To exit press CTRL+C&#39;&#xA;&#xA;            def callback(ch, method, properties, body):&#xA;                print &amp;quot; [x] Received %r&amp;quot; % (body,)&#xA;&#xA;            channel.basic_consume(callback,&#xA;                                queue=&#39;hello&#39;,&#xA;                                no_ack=True)&#xA;&#xA;            channel.start_consuming()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;jafka&#34;&gt;&#xA;  jafka&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jafka&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    基于kafka, 快速持久化(O(1)时间开销)&#xA;    高吞吐，一台普通服务器 100k/s&#xA;    完全分布式，Broker, Producer, Consumer原生支持分布式，自动负载均衡&#xA;    支持hadoop并行加载&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;kafka&#34;&gt;&#xA;  kafka&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    apache子项目，scala语言编写, 发布订阅队列&#xA;    相对activeMQ轻量&#xA;特点&#xA;    push/pull队列架构，适合异构集群&#xA;    分布式, 高吞吐率, 易扩展&#xA;    支持数据并行到hadoop&#xA;    分区有序&#xA;    批量压缩, 零拷贝, 内存缓冲, 磁盘顺序写入&#xA;    可持久化&#xA;工具&#xA;    manager # 监控&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;nsq&#34;&gt;&#xA;  nsq&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nsq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    go&#xA;工具&#xA;    admin   # 监控&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;memcacheq&#34;&gt;&#xA;  memcacheQ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#memcacheq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;zeromq&#34;&gt;&#xA;  zeroMQ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#zeromq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;activemq&#34;&gt;&#xA;  activeMQ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#activemq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    apache子项目, 类似zeroMQ&#xA;通信方式&#xA;    点到点&#xA;        不成功时保存在服务端&#xA;    发布订阅&#xA;        不成功消息丢失&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;beanstalkd&#34;&gt;&#xA;  beanstalkd&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#beanstalkd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;mqtt&#34;&gt;&#xA;  mqtt&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mqtt&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 最早由ibm提供的，二进制消息的mq&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;emqttd&#34;&gt;&#xA;  emqttd&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#emqttd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    mqtt broker&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;apollo-1&#34;&gt;&#xA;  apollo&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#apollo-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    apache mqtt broker&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;metaq&#34;&gt;&#xA;  metaq&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#metaq&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 阿里mq&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;定时任务&#34;&gt;&#xA;  定时任务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9a%e6%97%b6%e4%bb%bb%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cron&#34;&gt;&#xA;  Cron&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cron&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;xxl-job&#34;&gt;&#xA;  XXL Job&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#xxl-job&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;quartz&#34;&gt;&#xA;  quartz&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#quartz&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# java作业调度&#xA;配置applicationContext_job.xml&#xA;    job             # 任务内容&#xA;    jobDetail       # 调度方案&#xA;    trigger         # 时间&#xA;    scheduler       # jobDetail和trigger的容器&#xA;状态监控&#xA;    # 用日志表记录&#xA;    运行中&#xA;        JobListener监听器&#xA;    暂停中&#xA;        scheduler.pauseTrigger()&#xA;    等待中&#xA;        创建job时&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;celery&#34;&gt;&#xA;  celery&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#celery&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# python&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;rundeck&#34;&gt;&#xA;  rundeck&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rundeck&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# java&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;存储服务&#34;&gt;&#xA;  存储服务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%98%e5%82%a8%e6%9c%8d%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;存储的概念和术语&#xA;    scsi: 小型计算机系统接口(Small Computer System Interface)&#xA;    fc: 光纤通道(Fibre channel)&#xA;    das: 直连式存储(Direct-Attached Storage)&#xA;    nas: 网络接入存储(Network-Attached Storage)&#xA;    san: 存储区域网络(Storage Area Network)&#xA;        连接设备: 路由,  光纤交换机, 集线器(hub)&#xA;        接口: scsi fc&#xA;        通信协议: ip scsi&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;iscsi&#34;&gt;&#xA;  iscsi&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#iscsi&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# internet scsi&#xA;优点&#xA;    可以网络传输&#xA;    服务器数量无限&#xA;    在线扩容．动态部署&#xA;架构&#xA;    控制器架构: 专用数据传输芯片．专用RAID数据校验芯片．专用高性能cache缓存和专用嵌入式系统平台&#xA;    iscsi连接桥架构:&#xA;        前端协议转换设备(硬件)&#xA;        后端存储(scsi磁盘阵列．fc存储设备)&#xA;    pc架构&#xA;        存储设备搭建在pc服务器上，通过软件管理成iscsi, 通过网卡传输数据&#xA;        实现&#xA;            以太网卡 + initiator软件&#xA;            toe网卡 + initiator软件&#xA;            iscsi HBA卡&#xA;iscsi系统组成&#xA;    iscsi initiator 或　iscsi hba&#xA;    iscsi target&#xA;    以太网交换机&#xA;    一台或多台服务器&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;fastdfs&#34;&gt;&#xA;  fastdfs&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#fastdfs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 开源分布式文件系统&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;cdn&#34;&gt;&#xA;  cdn&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cdn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    流量不大时带宽比cdn便宜, 流量大时cdn便宜。&#xA;    界限为250Mbps左右，价格在9k/month&#xA;价格     50TB/月        100TB/月&#xA;阿里云   3.8w/月        6.9w/月&#xA;盛大云   9k/月          1.7w/月&#xA;网宿&#xA;蓝汛&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;aws-s3&#34;&gt;&#xA;  AWS S3&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#aws-s3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;命令&#xA;    aws&#xA;        s3&#xA;            cp --recursive bin s3://meiqia/crm-module/search/bin&#xA;                # 级联复制&#xA;            sync s3://meiqia/crm-module/search/bin bin&#xA;                # 下载&#xA;            rm --recursive s3://meiqia/crm-module/search&#xA;                # 级联删除&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;网关&#34;&gt;&#xA;  网关&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e5%85%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;zuul&#34;&gt;&#xA;  Zuul&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#zuul&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;spring-cloud-gateway&#34;&gt;&#xA;  Spring Cloud Gateway&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-gateway&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;kong&#34;&gt;&#xA;  Kong&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kong&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 基于OpenResty&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;日志&#34;&gt;&#xA;  日志&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%a5%e5%bf%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;elk&#34;&gt;&#xA;  ELK&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#elk&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# elasticsearch, logstash, kibana&#xA;FileBeat&#xA;    命令&#xA;    filebeat --environment systemd -c /etc/filebeat/filebeat.yml --path.home /usr/share/filebeat --path.config /etc/filebeat --path.data /var/lib/filebeat --path.logs /var/log/filebeat&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;logio&#34;&gt;&#xA;  log.io&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#logio&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h1 id=&#34;dns服务&#34;&gt;&#xA;  DNS服务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dns%e6%9c%8d%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;nscd&#34;&gt;&#xA;  Nscd&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nscd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;DNS本地缓存&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;实时计算&#34;&gt;&#xA;  实时计算&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9e%e6%97%b6%e8%ae%a1%e7%ae%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;阿里云Flink&#xA;&#x9;集群&#xA;&#x9;&#x9;计算单元&#xA;&#x9;&#x9;vertex拓扑&#xA;&#x9;名词&#xA;&#x9;&#x9;DataHub源表&#xA;&#x9;&#x9;RDS维表&#xA;&#x9;&#x9;RDS结果表&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
