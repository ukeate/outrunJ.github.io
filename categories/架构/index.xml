<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构 on ukeate的笔记</title>
    <link>https://ukeate.com/categories/%E6%9E%B6%E6%9E%84/</link>
    <description>Recent content in 架构 on ukeate的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 Jan 2025 18:53:51 -0800</lastBuildDate>
    <atom:link href="https://ukeate.com/categories/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>架构</title>
      <link>https://ukeate.com/docs/architect/</link>
      <pubDate>Wed, 10 Oct 2018 16:49:27 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/</guid>
      <description>&lt;h1 id=&#34;要求&#34;&gt;&#xA;  要求&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a6%81%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;quot;我这辈子收到的最好的职业建议是在日本实习时， 一位长者跟我说的：年轻人最重要的是建立好的自己名声。这里的名声不是指沽名钓誉。而是每一篇论文，每一次演讲，每份交接给同事的工作，凡是给别人看的东西，都要在能力范围内做到至善至美。慢慢养成习惯，就会越做越好。凡事糊弄人的人，是走不远的。&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;要求归纳&#34;&gt;&#xA;  要求归纳&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a6%81%e6%b1%82%e5%bd%92%e7%ba%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;个人&#xA;    责任心，抗压力&#xA;技术与产品&#xA;    专业知识，设计指导关键模块&#xA;    项目规划，架构前瞻性，风险管理，文档&#xA;人员管理&#xA;    部门结构，人员职责&#xA;    培养与考核&#xA;内部工具&#xA;    开发运维&#xA;    测试&#xA;销售目标&#xA;    营销团队组建及管理&#xA;    销售方案，品牌方案&#xA;    市场调研&#xA;    目标，考核，监督&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;招聘人员要求&#34;&gt;&#xA;  招聘人员要求&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8b%9b%e8%81%98%e4%ba%ba%e5%91%98%e8%a6%81%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;不是我负责的，态度也要积极&#xA;项目经历是否有帮助&#xA;人员稳定性&#xA;代码不挖坑&#xA;沟通总结能力(micheal)&#xA;工时制度管理&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>代码</title>
      <link>https://ukeate.com/docs/architect/code/</link>
      <pubDate>Wed, 10 Oct 2018 17:40:53 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/code/</guid>
      <description>&lt;h1 id=&#34;人类认知原理&#34;&gt;&#xA;  人类认知原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%ba%e7%b1%bb%e8%ae%a4%e7%9f%a5%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;原理&#xA;    模拟执行&#xA;负担&#xA;    概念量&#xA;        封装粒度大&#xA;        多态、运行时多态、静态多态&#xA;        临时状态&#xA;        用工作流, 而非队列&#xA;        日志(event)搜索/集中/回放&#xA;        抽出权限层&#xA;        非轻量级&#xA;            胶水层厚&#xA;            无稳定方案, 复用困难&#xA;    流程长度&#xA;最好&#xA;    单线程                  # 不插入行为&#xA;    上下文集中&#xA;        this.scene.commit()集中状态转移时间线&#xA;    单一方式&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;软件设计原则&#34;&gt;&#xA;  软件设计原则&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bd%af%e4%bb%b6%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;统一原则&#34;&gt;&#xA;  统一原则&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%9f%e4%b8%80%e5%8e%9f%e5%88%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;观念&#xA;    KISS(keep it simple stupid)&#xA;    YAGNI(You Ain’t Gonna Need It)&#xA;    取好名字占设计一半&#xA;    约定大于配置&#xA;    并发的世界，并发的软件&#xA;        分布式的世界，分布式的软件&#xA;        不可预测的世界，容错性强的软件&#xA;        复杂的世界，简单的软件&#xA;    代码即数据&#xA;        物体上绑定行为数据&#xA;        传递代码数据(函数一等公民)&#xA;    防御性编程&#xA;        接口前validator&#xA;        启动时自检断言&#xA;        异常处理&#xA;        不可过度&#xA;设计&#xA;    solid原则&#xA;        单一职则(single responsibility)&#xA;            一个类负责一个功能&#xA;        开闭(open/closed)&#xA;            对扩展开放，对修改关闭，如接口, 如数组扩展结构体状态&#xA;        里氏替换原则(liskov substitution)&#xA;            子类继承超类的所有&#xA;        接口分离(interface segregation)&#xA;            最小功能隔离&#xA;        依赖反转(dependency inversion)&#xA;            低层依赖高层, 具体依赖抽象&#xA;    非侵入     # non-intrusion&#xA;        将功能推入代码，而非代码拿到功能&#xA;        代码实现接口，而非继承类&#xA;    拆分&#xA;        边界&#xA;        正交&#xA;    unix rules&#xA;        模块化(modularity)          # 模块由精心设计的接口连接&#xA;        清晰化(clarity)             # 可读性、可维护性&#xA;        组合(composition)&#xA;        分离(separation)&#xA;        简单(simplicity)&#xA;        节俭(parsimony)             # 越小越好&#xA;        透明(transparency)          # log, tracing&#xA;        鲁棒(robustness)&#xA;        可展示(representation)      # 逻辑简单，数据复杂&#xA;        最小惊吓(least surprise)     # 少打破用户预期&#xA;        安静(silence)&#xA;        修复(repair)                # 产生足够报错&#xA;        经济(economy)               # 减少开发时间&#xA;        生成(generation)            # 避免手写, 用高阶抽象生成代码&#xA;        优化(optimization)            # 优化和收益平衡&#xA;        分化(diversity)             # 一开始设计不限制、优雅开放灵活&#xA;        扩展(extensibility)         # 协议可扩展&#xA;优化&#xA;    需要时再优化，设计时考虑扩展性&#xA;    dry(don&#39;t repeat yourself), 不可过度&#xA;    找瓶颈&#xA;产出&#xA;    设计清晰&#xA;    选型简单&#xA;    代码精炼&#xA;    抽象优雅&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;代码风格&#34;&gt;&#xA;  代码风格&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e9%a3%8e%e6%a0%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;命名&#xA;    包名类名为名词, 方法名为动词&#xA;    参数、方法名称在上下文语义中合理 , 像写文章一样&#xA;    横向代码单屏内分行&#xA;性能&#xA;    避免嵌套循环，特别是数据库操作&#xA;结构&#xA;    # 高内聚，低耦合&#xA;    抽取方法&#xA;    业务逻辑分层&#xA;    框架无侵入性&#xA;技巧&#xA;    注释驱动写复杂业务&#xA;    自解释代码&#xA;安全&#xA;    密码二次验证&#xA;    离机锁屏&#xA;    用户名、密码、ip、端口不提交&#xA;    代码安全, 如sql注入, XSS&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;代码质量&#34;&gt;&#xA;  代码质量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e8%b4%a8%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;代码&#xA;    功能、结构、资源&#xA;非遗留代码&#xA;    写了测试&#xA;改代码&#xA;    bug&#xA;    重构&#xA;        # 只改结构&#xA;    确定修改点&#xA;        找出测试点&#xA;        解依赖&#xA;            伪/仿对象&#xA;            接缝&#xA;                全局函数&#xA;                    提取重写方法&#xA;                宏预处理&#xA;                替换连接的代码&#xA;                对象&#xA;                    # 耦合对象不好初始化&#xA;                    子类化重写方法&#xA;                    接口提取&#xA;                    创建简化接口&#xA;                    创建简化类与对象，引用原对象&#xA;                    暴露静态方法&#xA;                    对象提取公共方法，只测公共方法&#xA;                传方法参数&#xA;        写测试&#xA;    优化&#xA;        # 只改资源&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;具体实现原则&#34;&gt;&#xA;  具体实现原则&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b7%e4%bd%93%e5%ae%9e%e7%8e%b0%e5%8e%9f%e5%88%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;数据结构&#34;&gt;&#xA;  数据结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;状态机解决流程问题&#xA;AST解决主义问题&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;面向对象object-oriented&#34;&gt;&#xA;  面向对象(Object Oriented)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1object-oriented&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;特性&#xA;ooad&#xA;    # Object Oriented Analysis and Design&#xA;    ooa     # analysis&#xA;        建立针对业务问题域的清晰视图&#xA;        列出核心任务&#xA;        针对问题域建立公共词汇表&#xA;        列出针对问题域的最佳解决方案&#xA;    ood     # design&#xA;        细化类关系，明确可见性&#xA;        增加属性&#xA;        分配职责(方法)&#xA;        消息驱动系统中消息传递方式&#xA;        局部应用设计模式&#xA;        类图时序图&#xA;    oop     # program&#xA;        抽象: abstract&#xA;            接口&#xA;                无实现&#xA;                可多重继承&#xA;            抽象类&#xA;                可以有私有方法变量&#xA;                实现部分方法&#xA;        封装: encapsulation&#xA;            # 数据和方法绑定&#xA;        继承: inheritance&#xA;        多态: polymorphism&#xA;            overload为编译时&#xA;            override为运行时&#xA;        关联: association&#xA;            # has a&#xA;            双向关联&#xA;                两个类互相知道对方公共属性和操作&#xA;            单向关联（大多数）&#xA;                一个类知道另一个类的公共属性和操作&#xA;            聚合: aggregation&#xA;                a包含b, b可以不在a创建时创建&#xA;            组合: composition&#xA;                比聚合强，a包含b, b在a创建时创建&#xA;        内聚与耦合: cohesion &amp;amp; coupling&#xA;            # 高内聚低耦合&#xA;        依赖: dependency&#xA;            # use a&#xA;        泛化: generalization&#xA;            # is a&#xA;            泛型&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;函数式&#34;&gt;&#xA;  函数式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%87%bd%e6%95%b0%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;数组&#xA;    [1, 1, 3, 5, 5].reduce(function(x, y){ return x + y;})&#xA;    [1, 4, 9].map(function(num){return num * 2;})&#xA;高阶函数(higher-order function)&#xA;    操作函数的函数, 接收函数作为参数, 返回函数&#xA;不完全函数(partial function)&#xA;    一次调用拆成多次调用，每次调用返回一个函数，如f(1,2)(3,4)(5,6)&#xA;        # 每次调用叫做不完全调用(partial application)&#xA;不变式&#xA;    循环不变式&#xA;        用于形式化证明正确性&#xA;        描述&#xA;            有循环变量&#xA;            算法初始、保持、终止时, 某特性不变, 如选择排序中, arr[0,...,j-1]一直有序&#xA;    类(或数据类型)不变式&#xA;        并发时, 不变的成员关系&#xA;            如, 并发临界区(同时只能一个线程占用)&#xA;cps(continuation passing style)&#xA;    传入处理函数, 处理函数中传处理函数&#xA;curry&#xA;    f(1,2,3)改写成f(1).f(2).f(3)&#xA;thunk&#xA;    触发函数, 如 f(){_f(1)}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>工程设计</title>
      <link>https://ukeate.com/docs/architect/project/</link>
      <pubDate>Wed, 10 Oct 2018 17:39:31 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/project/</guid>
      <description>&lt;h1 id=&#34;产品&#34;&gt;&#xA;  产品&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%a7%e5%93%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;愿景&#xA;    定义产品的目的和原因，将到达的地点&#xA;ux&#xA;    微交互                  # 细节决定成败&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;roadmap&#34;&gt;&#xA;  RoadMap&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#roadmap&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    到达愿景的策略路径，提供一系列与产品战略相一致的战术步骤&#xA;为什么&#xA;    简单、清晰的通讯文档&#xA;        少的多的会议&#xA;        健康的团队辩论：交付成果与目标联系起来&#xA;        做出每个人都理解的产品决定，不再打击创意&#xA;    高维度的概述&#xA;    动态演变&#xA;要素&#xA;    时间周期&#xA;        时间区间，只定时间范围&#xA;            big-view(product)&#xA;                全局理解产品的未来,  交付顺序&#xA;                统一视野(vision), 范围(scope)，时间期限(time line)&#xA;            pre-view(release)&#xA;                release中的产品功能, 和前几个迭代从backlog中要交付的工作项(item)&#xA;            now-view(iteration)&#xA;                团队在一次迭代中要交付的需求(requirements)&#xA;        优先级，留空间适应变化&#xA;    项目事件&#xA;        完成产品总体计划必要的工作项, 详尽且切合目的&#xA;        分解目的，制定步骤&#xA;    路标&#xA;        关键工作项完成的时间节点(里程碑)&#xA;        结果反馈：审视是否偏离，试验中改进&#xA;        确定在每个时间范围内实现可衡量的结果。定义为目标关键结果(OKR)、关键性能指标(KPI)&#xA;种类&#xA;    基于目标&#xA;        current&#xA;        near term&#xA;        future&#xA;    基于功能&#xA;        5000新用户&#xA;步骤&#xA;    确定目标&#xA;    分解目标，穷尽事项，组织，优先级排序&#xA;    使用优化框架&#xA;        effort / impact&#xA;        impact / goal&#xA;        卡洛斯模型?&#xA;注意&#xA;    定义战略主题(名词)，抓住核心用户行为的本质、产品能力、竞争优势、技术改进&#xA;    保持路线图战略，避免战术&#xA;    每个计划阶段都考虑优先级, 每个目标、动作、发布、特性的价值可见性&#xA;    始终在试验(ABE), 为了正确定义目标和后续特征&#xA;        先做出有根据的猜测&#xA;        测试&#xA;        基于反馈迭代&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;业务&#34;&gt;&#xA;  业务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%9a%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;目标&#xA;    降低人才素质需求&#xA;    减少开发时间&#xA;分类&#xA;    创造虚拟空间&#xA;    自动化&#xA;    辅助决策&#xA;思路&#xA;    逻辑: 因果(演绎), 时间, 空间, 优先&#xA;    方法: 5w2h(who, when, where, why, what, how, how much)&#xA;    建模:&#xA;        中心                                # 调整抽象领域和层次(视问题决定)&#xA;            自上而下                        # 问题明确，展开&#xA;            自下而上                        # 内容分类、剪枝、归纳&#xA;        分解&#xA;            MECE(mutually exclusive collectively exhaustive)&#xA;                正交&#xA;                穷尽&#xA;    经验&#xA;        优秀的产品都有全局把控感(confluence, jira)&#xA;        设计思想多源自: 操作系统、编译器、函数式&#xA;        深入一线(面对客户)&#xA;        思考全面, 全局&#xA;        考虑需求本质，考虑上下游全局&#xA;        想清楚再行动&#xA;过程&#xA;    发掘(discovery)&#xA;        价值定位(价值驱动)&#xA;        客户体验梳理和设计&#xA;        愿景&#xA;        干系人&#xA;        电梯演讲收敛&#xA;    定义(define)&#xA;        用户旅程，业务流程&#xA;        事件风暴 -&amp;gt; 映射技术 -&amp;gt; 架构&#xA;    设计(design)&#xA;        总体&#xA;            识别问题域, 归纳服务, 上下游关系&#xA;            架构图, api, 技术栈&#xA;            提升方向, 改进&#xA;        迭代&#xA;            价值/成本分布图&#xA;            milestone演进&#xA;            业务技术/需求拆解全景图(白板贴标)&#xA;            mvp(minimum viable product最小可行计划)迭代计划&#xA;    开发(develop)&#xA;        度量, 质量指标&#xA;        工具选择, 规范&#xA;        架构守护，治理&#xA;    实施策略&#xA;    交付&#xA;    产品生命周期管理&#xA;        目标, 资本&#xA;        机会点-&amp;gt;需求&#xA;角度决定设计&#xA;    找到不动点&#xA;    如对cache的设计&#xA;        业务角度&#xA;            选择简单易用的缓存框架&#xA;            有人会用，学习成本别太高&#xA;            关注数据模型结构设计&#xA;            缓存更新真麻烦&#xA;        paas角度&#xA;            声明式使用，配置文件设置&#xA;            缓存对比，选择强大且稳定的&#xA;            存取接口设计，方便易用&#xA;            数据变动监听，自动刷新缓存&#xA;        平台角度&#xA;            缓存服务器集群方式&#xA;            存储空间监控&#xA;            命中率监控&#xA;            避免缓存集中失效引起雪崩&#xA;不过度设计      # 不超出需求，不用复杂方式实现&#xA;                # 少就是多，应一减再减。简单才能强大，也会提高性能和扩展性&#xA;    范围减少    # 28原则，最小可行产品&#xA;    设计减少    # 易理解，低成本，可扩展&#xA;    实施减少    # 找开源-&amp;gt;找内部已实现-&amp;gt;找方案描述-&amp;gt;自己解决&#xA;    二八定律&#xA;墨菲定律&#xA;    事情不是表面看起来那么简单&#xA;    事情都会比预计时间长&#xA;    可能出错总会出错&#xA;    如果你担心发生，它更可能发生&#xA;维护&#xA;    设计时考虑扩展性&#xA;        DID(design, implement, deploy)(设计20倍, 实现3-20倍, 部署1.5-3倍)&#xA;    设计能够监控的应用&#xA;    版本升降      # 代码仓库&#xA;业务&#xA;    防重          # 重复提交，重复扣减，重复支付(异构系统无法防重，用退款处理)&#xA;        防重key, 防重表&#xA;    幂等          # 消息处理，第三方支付回调&#xA;    流程要抽象     # 如工作流&#xA;    状态与状态机&#xA;        订单系统&#xA;            # 状态多时用状态机驱动&#xA;            正向状态(待付款、待发货、已发货、完成)&#xA;            逆向状态(取消、退款)&#xA;            状态轨迹    # 跟踪和记日志，可回溯&#xA;            并发修改，状态变更有序，状态变更消息有序&#xA;前端&#xA;    减少dns查找     # dns可能查多个域&#xA;    减少对象        # 页面布局少，图片合并。对象不要过大，减少到浏览器并发连接数&#xA;    后台系统操作可反馈   # 便于确认效果&#xA;文档和注释&#xA;    设计架构&#xA;    设计思想&#xA;    数据字典/业务流程&#xA;    现有问题&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;设计&#34;&gt;&#xA;  设计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;分层做维度扩展&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;ddd&#34;&gt;&#xA;  DDD&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ddd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;dodaf20&#34;&gt;&#xA;  DODAF2.0&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dodaf20&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    美国国防部（DOD）&#xA;    项目立项和顶层架构间，建立跟踪机制&#xA;八种视图&#xA;    全视图&#xA;    数据与信息视图&#xA;    标准视图&#xA;    能力视图&#xA;    作战视图&#xA;    服务视图&#xA;    系统视图&#xA;    项目视图&#xA;业务组件化&#xA;    基本的、唯一的、不重复的，可单独运行&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;项目&#34;&gt;&#xA;  项目&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a1%b9%e7%9b%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;分层&#34;&gt;&#xA;  分层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;mv*&#xA;    mvc&#xA;        # view controller model, 单向循环&#xA;    mvp&#xA;        # view presenter model, presenter双向交互&#xA;    mvvm&#xA;        # view view-model model, view-model双向绑定&#xA;&#xA;验证&#xA;异常层&#xA;    # 封装每层异常为不同异常类&#xA;过滤层&#xA;监听器&#xA;日志&#xA;测试&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>AI</title>
      <link>https://ukeate.com/docs/architect/strategy/ai/</link>
      <pubDate>Wed, 10 Oct 2018 16:49:27 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/strategy/ai/</guid>
      <description>&lt;h1 id=&#34;基础&#34;&gt;&#xA;  基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;模型的作用&#xA;    调模型参数自动做特征工程 &#xA;交互&#xA;    用户数据 -&amp;gt; 向量化 -&amp;gt; 向量 -&amp;gt; 模型 -&amp;gt; 输出&#xA;算法分类&#xA;    离线: 复杂模型&#xA;    在线: 时间短&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;框架&#34;&gt;&#xA;  框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;tensorflow&#xA;    # 神经网络计算&#xA;convnet.js&#xA;    # js深度学习&#xA;scikit-learn&#xA;    # python机器学习&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;特征工程&#34;&gt;&#xA;  特征工程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%89%b9%e5%be%81%e5%b7%a5%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;向量化, 量化才能优化, bitmap存储(位数即维数)&#xA;one-hot: 太长，无序，歧义&#xA;业务导向存储&#xA;    分段标识，如年龄区间[0,1,0,0]&#xA;    需要经验及产品设计&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;模型&#34;&gt;&#xA;  模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;分类&#xA;    传统模型&#xA;        速度快&#xA;    深度模型&#xA;        业务复杂, 数据量大时用&#xA;模型&#xA;    线性回归&#xA;    逻辑回归&#xA;    朴素贝叶斯&#xA;    支撑向量机&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;用户画像&#34;&gt;&#xA;  用户画像&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e6%88%b7%e7%94%bb%e5%83%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;在Hive中存&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;场景&#34;&gt;&#xA;  场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;聊天机器人&#xA;    类型&#xA;        QA机器人&#xA;        闲聊机器人&#xA;        任务机器人: AIOps&#xA;        场景机器人&#xA;    实现类型&#xA;        基于检索&#xA;        基于生成模型&#xA;语音识别&#xA;知识图谱&#xA;生物特征识别&#xA;AIoT&#xA;AITest&#xA;视频行为分析&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>IoT</title>
      <link>https://ukeate.com/docs/architect/strategy/iot/</link>
      <pubDate>Wed, 10 Oct 2018 16:49:27 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/strategy/iot/</guid>
      <description>&lt;h1 id=&#34;场景&#34;&gt;&#xA;  场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;展示&#34;&gt;&#xA;  展示&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b1%95%e7%a4%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;dashboard&#xA;    在线设备&#xA;    消息量&#xA;    规则引擎消息流转次数&#xA;运维大盘&#xA;    产品品类&#xA;    地区排名&#xA;    指标趋势&#xA;    设备在线率&#xA;    设备排行&#xA;        事件数&#xA;        事件类型&#xA;        停用时长&#xA;        延迟&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;设备管理&#34;&gt;&#xA;  设备管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%be%e5%a4%87%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;接入&#xA;    多协议: MQTT、CoAP、HTTP&#xA;    多平台(设备端代码): c、node.js、java&#xA;    多网络: 2/3/4G、NB-IoT、LoRa&#xA;    多地域&#xA;通信&#xA;    双向通信&#xA;        稳定&#xA;        安全&#xA;    影子缓存                            # 设备与应用解耦, 网络不稳定时增加可靠性&#xA;安全&#xA;    认证(一机一密)&#xA;    传输: TLS&#xA;    权限: 设备权限&#xA;规则引擎&#xA;    数据流转&#xA;        M2M(machine to machine)            # 设备间通信&#xA;        数据结构化存储&#xA;        数据计算: 函数计算、流式计算、大规模计算&#xA;        数据mq转发&#xA;    联动触发&#xA;管理&#xA;    生命周期: 注册、分组、拓扑、标签、状态、数据采集、禁用删除&#xA;    模型&#xA;        数据标准化: 属性、事件、服务&#xA;        存储结构化&#xA;    远程&#xA;        设备调试&#xA;            实物&#xA;            模拟&#xA;        维护&#xA;            指令&#xA;            固件升级&#xA;            下发配置&#xA;        监控&#xA;            日志&#xA;            实时数据&#xA;        通知&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;数据分析&#34;&gt;&#xA;  数据分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;流计算实时分析&#xA;可视化&#xA;    三维设备关联&#xA;    二维(地图)分布, 实况， 搜索&#xA;数据源适配&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;产业&#34;&gt;&#xA;  产业&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%a7%e4%b8%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;车联网、智能家居、穿戴、媒体内容分发、环境监测、智慧农业&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;开发服务&#34;&gt;&#xA;  开发服务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%80%e5%8f%91%e6%9c%8d%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;Studio&#xA;    开发&#xA;        web&#xA;        移动&#xA;        自动化服务&#xA;    设备&#xA;        产品                        # 软硬分离的桥梁&#xA;            设备开发 -&amp;gt; 设备模拟(在线写c, js) -&amp;gt; 软件开发&#xA;    配置(使用移动端)&#xA;    运营运维&#xA;        后台&#xA;        监控&#xA;    插件开发&#xA;    服务编排&#xA;Studio OS&#xA;    # 高性能、极简开发、云端一体、丰富组件、安全防护&#xA;    项目生成&#xA;        领域模板&#xA;        插件选择&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;技术&#34;&gt;&#xA;  技术&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8a%80%e6%9c%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;AIoT&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;边缘计算&#34;&gt;&#xA;  边缘计算&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%be%b9%e7%bc%98%e8%ae%a1%e7%ae%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;优势&#xA;    就近计算&#xA;    实时&#xA;    离线运行&#xA;    快速编程&#xA;    降低成本&#xA;功能&#xA;    视频设备sdk&#xA;        边缘算法容器(接入方案)&#xA;    视频智能&#xA;        视频算法容器&#xA;驱动&#xA;    websocket、modbus、lightSensor、light、opcua&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;网络&#34;&gt;&#xA;  网络&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%bb%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;协议&#xA;    NB-IoT&#xA;        Narrow Band Internet of Things&#xA;        物理层/数据链路层, 蜂窝网络上，消耗和带宽低&#xA;        场景&#xA;            Standalone&#xA;            Guard-band&#xA;            In-band&#xA;    LoRa&#xA;        Long Range&#xA;    LoRaWAN&#xA;        物理层/数据链路层&#xA;    CoAP&#xA;        Constrained Application Protocol&#xA;        资源紧张的设备&#xA;    MQTT&#xA;        Message Queue Telemetry Transport&#xA;        低电量低带宽, 提供数据传输QoS, 可传任意类型数据, 有Session&#xA;    MQTT-SN&#xA;        MQTT for Sensor Network&#xA;        MQTT协议的传感器版本&#xA;    LwM2M&#xA;        Lightweight Machine-To-Machine&#xA;        轻量级RESTful&#xA;    ZigBee&#xA;    SigFox&#xA;    eMTC&#xA;        被NT-IoT取代&#xA;    DDS&#xA;    AMQP&#xA;    XMPP&#xA;    JMS&#xA;网关&#xA;凭证&#xA;无线&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;设备&#34;&gt;&#xA;  设备&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%be%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;统一网关&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;框架&#34;&gt;&#xA;  框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Internet of Things&#xA;Kaa&#xA;SiteWhere&#xA;    # tomcat, mongodb, hbase, influxdb, grafana&#xA;ThingSpeak&#xA;    # matlab可视化&#xA;DeviceHive&#xA;    # 开源, docker, k8s, es, spark, cassandra, kafka&#xA;Zetta&#xA;Thinger.io&#xA;wso2&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>IoT</title>
      <link>https://ukeate.com/docs/architect/strategy/meta/</link>
      <pubDate>Wed, 10 Oct 2018 16:49:27 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/strategy/meta/</guid>
      <description>&lt;h1 id=&#34;转变&#34;&gt;&#xA;  转变&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bd%ac%e5%8f%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;网页向虚拟世界转变&#xA;开发者创建向用户创建转变&#xA;    游戏即服务到游戏即平台&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;特点&#34;&gt;&#xA;  特点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%89%b9%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;是一个框架，代表多技术发展结合点&#xA;    实时流媒体，VR/AR&#xA;    UGC&#xA;    多人社交游戏，跨平台交互&#xA;    游戏作为社交媒体的趋势&#xA;    硬件、网络基础设施、可视化、空间计算、人工智能&#xA;    加密货币&#xA;各游戏的数字化打通, 跨平台无边界&#xA;内容变现&#xA;    UGC增长&#xA;    NFT数字所有权&#xA;人与人、人与社会的关系重构&#xA;不同世界IP融合&#xA;数字人自定义身份&#xA;数字世界和现实世界的融合&#xA;虚实结合&#xA;一体世界&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;技术&#34;&gt;&#xA;  技术&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8a%80%e6%9c%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;扩展现实&#xA;数字孪生&#xA;区块链&#xA;物联网&#xA;VR/AR/MR/XR&#xA;云可扩展性&#xA;人工智能生成内容&#xA;脑机接口&#xA;边缘计算&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;机构&#34;&gt;&#xA;  机构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%ba%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;《元宇宙生态系统信息图》&#xA;入口类&#xA;    Roblox&#xA;    The Sandbox&#xA;    Decentraland&#xA;    Hadean&#xA;    世纪华通(打造平台): LiveTopia、强化训练号&#xA;    中手游(打造IP): 仙剑无宇宙&#xA;    元境(云游戏)&#xA;技术类&#xA;    Nvdia: Omniverse数字工厂&#xA;    Unity: 元宇宙工厂&#xA;钱包&#xA;    Metamask&#xA;    Coinbase Wallet&#xA;    Bitski&#xA;    WalletConnect&#xA;    Venly&#xA;    Fortmatic&#xA;引擎&#xA;    Unity&#xA;互联网&#xA;    Meta&#xA;    微软: IVAS&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;应用领域&#34;&gt;&#xA;  应用领域&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8%e9%a2%86%e5%9f%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;游戏&#xA;    我的世界&#xA;    GTA5&#xA;    动物森友会&#xA;    第二人生&#xA;    Roblox&#xA;    VRChat&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;商业模式&#34;&gt;&#xA;  商业模式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%95%86%e4%b8%9a%e6%a8%a1%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;虚拟活动：虚拟音乐会、讲座&#xA;NFT: 非同质化代币、持久性数字物品&#xA;Play-to-Earn&#xA;Play-to-Collect&#xA;Pay-to-Socialize&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;市场营销&#34;&gt;&#xA;  市场营销&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%82%e5%9c%ba%e8%90%a5%e9%94%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;原生植入广告&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>中台</title>
      <link>https://ukeate.com/docs/architect/strategy/middle_platform/</link>
      <pubDate>Wed, 10 Oct 2018 16:49:27 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/strategy/middle_platform/</guid>
      <description>&lt;h1 id=&#34;业务中台&#34;&gt;&#xA;  业务中台&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%9a%e5%8a%a1%e4%b8%ad%e5%8f%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;权限&#34;&gt;&#xA;  权限&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%83%e9%99%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;类型&#xA;    ACL(access control list)                        # 访问权限列表&#xA;    RBAC(role base access control)                  # 基于角色的访问控制&#xA;    ABAC(attribute base access control)             # 基于属性(计算属性)的访问控制&#xA;    DAC(discretionary access control)               # 自主访问控制&#xA;        主体对所属对象有全部控制权&#xA;        主体执行的程序权限相同&#xA;        主体权限可分配给其它用户&#xA;    MAC(mandatory access control)                   # 强制访问控制&#xA;        管理分配权限，主体不能改变&#xA;        主体只能访问他的对象，也不能写低级别对象&#xA;成员&#xA;    user&#xA;    role&#xA;    group&#xA;访问权限&#xA;    权限1: 游客，用户，rememberMe&#xA;    权限2: uri前缀(功能模块)&#xA;    权限3: uri后缀(静态资源过滤)&#xA;    判断位置: 过滤器中&#xA;资源权限&#xA;    权限: kind:part1:part2...&#xA;    判断位置: 渲染数据前&#xA;数据权限&#xA;    资源层级&#xA;        权限: 2&#xA;        判断位置: 进方法前&#xA;    单表&#xA;        权限: 表名:列名:值&#xA;        判断位置: 写sql前&#xA;方法权限&#xA;    权限: 方法域:方法名&#xA;    判断位置: 进方法前&#xA;性能&#xA;    grantTable缓存u_id, res_id关系&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;审批&#34;&gt;&#xA;  审批&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%a1%e6%89%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;模板&#xA;    准入规则&#xA;    起始、终止节点&#xA;    节点, 节点成员, 替换成员, 节点事件(脚本), 跳转公式&#xA;审批流程&#xA;    创建, 状态查询&#xA;    审批&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;海&#34;&gt;&#xA;  海&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;type                    # 记录类型&#xA;    property            # 类型动作, 关联到节点, 记录进出节点的动作。如对成员可读、可写, 记录负责人，对记录执行脚本, 记录回收计划&#xA;model                   # 模式&#xA;    节点树、一个激活&#xA;节点&#xA;    节点组&#xA;    两节点方向&#xA;成员&#xA;    节点成员1对多&#xA;    成员分组(group, role)也是成员&#xA;记录&#xA;    节点记录1对1&#xA;流转                     # 记录按规则在节点流转, 指定某些节点, 或某些记录。动作流程短路&#xA;    motion               # 一次动作，如新建，移动，删除。&#xA;    规则                 # 该次动作对记录的验证&#xA;    fomula               # 计算motion次序&#xA;    历史                  # 动作历史&#xA;权限&#xA;    kind                 # pass或 type、model、property、节点、节点from, 节点to 的任意组合&#xA;    access              # 分不同kind划分具体权限, 如(节点from, 节点to)kind的转移权限&#xA;    pass权限             # 如创建type, 创建model, 某节点所有权限等&#xA;计划                     # 定时或周期的流转&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;适配器boss&#34;&gt;&#xA;  适配器boss&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%82%e9%85%8d%e5%99%a8boss&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;action                  # 存http地址，参数名，验证器&#xA;    code                # 业务，如用户套餐&#xA;    mode: get/post/put/delete               # 如获得套餐，添加套餐，修改套餐，删除套餐&#xA;    ctx                 # 参数map, action调用前后修改&#xA;    next                # 下个触发action&#xA;history_action          # action调用历史&#xA;suite                   # 带参action, thunk待触发&#xA;    price               # 标价&#xA;    tag                 # 用作商品分类&#xA;order                   # 用户关联到suite, 计费&#xA;category                # 生成action模板&#xA;    apps/plugins        # 由category生成, 多个带形参(如app_id)action, 封装成的模板。添加实例填入实参&#xA;role&#xA;permission              # action code&#xA;    type                # action, suite等&#xA;    access              # crud和其它自定义权限&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;工作流&#34;&gt;&#xA;  工作流&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e4%bd%9c%e6%b5%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;本质&#xA;    状态管理&#xA;    工作流重流程轻数据，业务重数据轻流程。工作流修改数据，数据触发工作流&#xA;标准&#xA;    BPMN                            # omg制定&#xA;    workflow&#xA;    XPDL                            # WfMC制定, xml, 复杂&#xA;思路&#xA;    # 模型驱动架构(MDA)&#xA;    petri nets&#xA;    有限状态机(FSM)                  # 并行(流水线)状态机&#xA;    活动图                          # JBoss使用&#xA;    事件过程驱动链(EPC)&#xA;    微内核                          # 安全性高, 降耦合&#xA;已有实现&#xA;    开源&#xA;        yawl, jbpm, activiti, osworkflow, jboss, shark, obe&#xA;    商业&#xA;        aws, salesforce, sap等&#xA;分层&#xA;    外设层                          # 交互协议&#xA;    网关(WAPI)&#xA;    交互代理                         # 网关与内核通信形式&#xA;    引擎                            # engine&#xA;        specification, case&#xA;        net&#xA;            netRunner&#xA;                continueIfPossible  # 遍历task, fire task,&#xA;        condition&#xA;        task&#xA;            join, split             # and所有, xor只一个, or规则&#xA;            workitem&#xA;        flow&#xA;        persisting&#xA;        gateway&#xA;    引擎运行服务                      # 为引擎提供服务, 如解析流程定义、流程实例存储、参与者(workItem)解析、脚本计算、事件监听等&#xA;    扩展实现&#xA;        支撑&#xA;            组织模型适配&#xA;                人工task实现人工接口&#xA;            流程实例存储&#xA;                执行器中嵌入&#xA;            其它应用适配              # 如邮件&#xA;                内核获取环境资源&#xA;                执行器定义扩展&#xA;                应用适配扩展接口&#xA;            操作流程定义&#xA;            任务分配&#xA;        辅助&#xA;            条件验证                 # 可以有外部验证器&#xA;                分支时判断&#xA;            事件处理/function处理&#xA;            抽象的客户操作            # 如退回、跳转等&#xA;        增强&#xA;            自定义策略(workItem), 如代理人处理、工作日历(任务期限)&#xA;                工作项分配、执行、提交&#xA;            事件监听&#xA;            超时处理&#xA;                订阅应用事件, 应用时间触发器&#xA;    基础组件&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数据中台&#34;&gt;&#xA;  数据中台&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e4%b8%ad%e5%8f%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>战略性技术</title>
      <link>https://ukeate.com/docs/architect/strategy/</link>
      <pubDate>Wed, 10 Oct 2018 16:49:27 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/strategy/</guid>
      <description></description>
    </item>
    <item>
      <title>知识图谱</title>
      <link>https://ukeate.com/docs/architect/strategy/ai/map/</link>
      <pubDate>Wed, 10 Oct 2018 16:49:27 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/strategy/ai/map/</guid>
      <description>&lt;h1 id=&#34;与深度学习区别&#34;&gt;&#xA;  与深度学习区别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%8e%e6%b7%b1%e5%ba%a6%e5%ad%a6%e4%b9%a0%e5%8c%ba%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;深度学习是显性模型，知识图谱是隐性模型&#xA;场景：人脸识别；语音助手&#xA;目前进展: 在一些任务上已超过人类；知识量超过人类，推理不如人类&#xA;任务范围：面向具体任务，难以迁移；广泛适用于不同任务&#xA;可解释性：较难解释；可解释性强&#xA;数据量：海量训练数据；海量知识数据&#xA;未来趋势：深度融合&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;历史&#34;&gt;&#xA;  历史&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%86%e5%8f%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;2010年: 微软构建Satori、Probase&#xA;2012年: 谷歌X实验室识别&amp;quot;猫&amp;quot;, 发布Google Knowledge Graph&#xA;2013年：百度布局&#xA;2015年：阿里布局&#xA;2016年：亚马逊布局&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;特点&#34;&gt;&#xA;  特点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%89%b9%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;视觉思维&#xA;关联&#xA;推理&#xA;结构识别&#xA;降维&#xA;概念图&#xA;网络模型&#xA;潜在领域寻迹&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;领域&#34;&gt;&#xA;  领域&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a2%86%e5%9f%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;宇宙图谱&#xA;    绘图学&#xA;    陆地地图&#xA;    天体图&#xA;    生物图谱&#xA;轨迹&#xA;    旅行商&#xA;    虚拟世界搜索&#xA;    信息觅食，过程建模&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;应用&#34;&gt;&#xA;  应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;内容理解&#xA;    篇章理解&#xA;    推荐场景&#xA;        路径推荐&#xA;        知识融入推荐&#xA;        广告&#xA;    召回排序&#xA;    智能营销&#xA;        画像&#xA;            用户画像&#xA;            产品画像&#xA;            场景画像&#xA;        库&#xA;            概念库&#xA;            语义本体库&#xA;            规则库&#xA;        建模分析&#xA;            分词、词性标注、命名实体识别&#xA;            句法分析、语义表示、概念发现&#xA;            用户打标、场景打标、产品打标&#xA;            语义匹配、指代消解、主题模型&#xA;搜索理解&#xA;    语义搜索&#xA;    演化分析&#xA;    场景化搜索&#xA;    路径召回&#xA;    对话理解&#xA;商家&#xA;    智能化商家运营&#xA;    商业大脑&#xA;        商业分析&#xA;可解释性&#xA;    图谱路径推荐理由&#xA;    知识融入生成推荐理由&#xA;实体卡片&#xA;    资源聚合&#xA;    内容分发&#xA;    产业链图谱&#xA;    用户画像&#xA;    高管画像&#xA;    价格图谱&#xA;    债券风险预警&#xA;    中小企业风控图谱&#xA;    营销获客图谱&#xA;    产品与工艺创新研发&#xA;    安全质量&#xA;    供应链&#xA;    社会关系图谱&#xA;    交易关系图谱&#xA;    网络图谱&#xA;    时空关系图谱&#xA;任务自动化&#xA;    维度：可发现、可移接、可推理&#xA;    自动化：自动数据结构化、流程自动化、业务服务化、服务开放化&#xA;推理&#xA;    本体推理&#xA;        概念补全&#xA;        商品品类上下位发现&#xA;        同质类目/属性项/属性值识别，新类目发现&#xA;        实体识别与分类&#xA;    关系抽取&#xA;        实体对齐&#xA;        实体链接&#xA;        商品分类、增量商品分类、商品标题&#xA;    常识推理&#xA;        关系推理与链接预测&#xA;        规则学习&#xA;        百科知识发现&#xA;        商品对齐&#xA;        可比价同款规则挖掘&#xA;    知识问答&#xA;        知识增强学习&#xA;        知识融入语言预训练&#xA;        人货匹配&#xA;网络安全&#xA;    专家系统-&amp;gt;感知智能-&amp;gt;认识智能-&amp;gt;决策智能&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;流程&#34;&gt;&#xA;  流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;数据爬取&#xA;    数据爬取平台&#xA;    知识获取&#xA;        实体识别&#xA;        概念、关系、属性抽取&#xA;        标签挖掘&#xA;        情感分析&#xA;        知识融合：概念层融合，数据层融合&#xA;        知识建模: 概念上下位关系生成、概念属性识别、规则建模、事件建模、时空建模&#xA;    多元异构数据&#xA;        非结构化文档&#xA;        半结构化数据&#xA;        结构化知识&#xA;    抽取模块&#xA;        基于规则&#xA;        基于模板   &#xA;        基于模型&#xA;            经典模型: PCNN、BiLSTM&#xA;            预训练模型: BERT、摩天&#xA;    预/后处理&#xA;        先验知识库: 规则库、领域词表、模板库、黑白名单&#xA;        数据集构建：人工标注、远程标注、数据集管理&#xA;知识融合&#xA;    Schema对齐(异构转同构)&#xA;    数据清洗&#xA;    实体对齐(去重，消岐)&#xA;    属性择优&#xA;知识关联&#xA;    规则推理&#xA;    建边模型&#xA;存储检索&#xA;    图引擎&#xA;        图存储引擎&#xA;        图学习引擎&#xA;        图查询引擎&#xA;    优化&#xA;        KV库&#xA;        索引库&#xA;        控制和数据分离&#xA;        Schema压缩&#xA;知识计算&#xA;    知识补全&#xA;    知识推理&#xA;    知识统计与图挖掘&#xA;知识图谱金字塔&#xA;    文本(text)-&amp;gt;标签(label、tag)-&amp;gt;表格(table)-&amp;gt;图(graph)-&amp;gt;模式(schema)-&amp;gt;本体(ontology)-&amp;gt;规则(rule)&#xA;技术&#xA;    计算：Spark&#xA;    中间存储：HIVE&#xA;    检索：ES&#xA;监控体系&#xA;    知识管理系统&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;框架&#34;&gt;&#xA;  框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;Spark&#xA;HIVE&#xA;ES&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;工具&#34;&gt;&#xA;  工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;CiteSpace&#xA;Jigsaw&#xA;Carrot&#xA;iOpener&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>前端</title>
      <link>https://ukeate.com/docs/architect/project/frontend/</link>
      <pubDate>Wed, 10 Oct 2018 14:51:24 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/project/frontend/</guid>
      <description>&lt;h1 id=&#34;组件化layout&#34;&gt;&#xA;  组件化Layout&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%84%e4%bb%b6%e5%8c%96layout&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;layout service&#xA;&#x9;# 缓存layout到redis&#xA;&#x9;crud layout功能&#xA;layout对象&#xA;&#x9;index&#xA;&#x9;&#x9;# 缩略信息&#xA;&#x9;plugins&#xA;&#x9;&#x9;components&#xA;&#x9;&#x9;&#x9;table&#xA;&#x9;&#x9;layout&#xA;&#x9;&#x9;&#x9;# 组合方式&#xA;&#x9;&#x9;&#x9;水平，垂直，tab&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://ukeate.com/docs/architect/manage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/architect/manage/</guid>
      <description>&lt;h1 id=&#34;合作办法&#34;&gt;&#xA;  合作办法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%88%e4%bd%9c%e5%8a%9e%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;苏格拉底法&#xA;不推动不会发生&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;执行力差的5大原因&#34;&gt;&#xA;  执行力差的5大原因&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%89%a7%e8%a1%8c%e5%8a%9b%e5%b7%ae%e7%9a%845%e5%a4%a7%e5%8e%9f%e5%9b%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;不知道干什么？-&amp;gt; 目标明确&#xA;不知道怎么干？ -&amp;gt; 培训到位&#xA;干起来不顺畅 -&amp;gt; 流程合理&#xA;干好了怎么样？ -&amp;gt; 激励公平&#xA;干不好又如何？ -&amp;gt; 考核有效&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;性格测试&#34;&gt;&#xA;  性格测试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%a7%e6%a0%bc%e6%b5%8b%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;MBTI&#xA;九型人格&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://ukeate.com/docs/architect/method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/architect/method/</guid>
      <description>&lt;h1 id=&#34;togaf&#34;&gt;&#xA;  TOGAF&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#togaf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    The Open Group Architecture Framework&#xA;    属于EAF(企业架构框架)的一种&#xA;目标&#xA;    统一语言&#xA;    免费，避免被绑架到各个专有解决方案&#xA;    全局思考，更有效利用资源&#xA;    提高ROI&#xA;架构域&#xA;    业务架构&#xA;        战略、组织&#xA;        关键流程&#xA;        治理和标准&#xA;    应用程序体系结构&#xA;        部署蓝图: 系统间交互、基本业务流程关系&#xA;    数据架构&#xA;        数据资产结构&#xA;        相关管理资源&#xA;    技术架构&#xA;        硬件、软件、网络架构&#xA;    架构开发模型(ADM)&#xA;        定制开发实际企业架构，可反复重用&#xA;    企业连续&#xA;        对架构跟踪&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;约定&#34;&gt;&#xA;  约定&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ba%a6%e5%ae%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;巴科斯范式&#34;&gt;&#xA;  巴科斯范式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%b4%e7%a7%91%e6%96%af%e8%8c%83%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;quot;word&amp;quot;  表示字符本身&#xA;double_quote    表示&amp;quot;本身&#xA;&amp;quot;&amp;quot;      外表示语法字符&#xA;&amp;lt;&amp;gt;      表示必选项&#xA;[]      表示可选项&#xA;{}      表示可重复0到多次&#xA;|       表示or&#xA;::=     表示“被定义为”&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://ukeate.com/docs/architect/strategy/block_chain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/architect/strategy/block_chain/</guid>
      <description>&lt;h1 id=&#34;历史&#34;&gt;&#xA;  历史&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%86%e5%8f%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;1.0: 2008年中本聪&#xA;&#x9;组成: 数字货币、分布式账本、块链式数据、梅克尔树、工作量证明&#xA;&#x9;产业: 挖矿、交易所、钱包&#xA;2.0: 2015年“世界计算机”Etereum上线&#xA;&#x9;组成: 智能合约(图灵完备)、虚拟机、去中心化、分布式应用&#xA;3.0: 大规模商业应用，区块链+&#xA;4.0: 行业基础设施，生态体系&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;组成&#34;&gt;&#xA;  组成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%84%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;区块链: 分布式基础架构、计算方式&#xA;&#x9;按照时间顺序,数据区块顺序相连链式存储&#xA;&#x9;&#x9;存储、验证&#xA;&#x9;&#x9;时间戳&#xA;&#x9;密码学方式保证&#xA;&#x9;&#x9;不可篡改不可伪造&#xA;&#x9;&#x9;数据传输和访问安全&#xA;&#x9;分布式节点(分布式账本)&#xA;&#x9;&#x9;共识算法：生成、更新数据&#xA;&#x9;&#x9;分布式存储 &#xA;&#x9;自动化脚本组成智能合约&#xA;&#x9;&#x9;编程、操作数据&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;链类型&#34;&gt;&#xA;  链类型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%93%be%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;类型&#xA;&#x9;联盟链: 数个机构有写权限&#xA;&#x9;私有链: 写权限在中心化组织内部&#xA;&#x9;公有链: 无需验证身份&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;发行方&#34;&gt;&#xA;  发行方&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%91%e8%a1%8c%e6%96%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;比特币&#xA;以太坊&#xA;EOS&#xA;Hyper Ledger&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;技术&#34;&gt;&#xA;  技术&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8a%80%e6%9c%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;核心&#xA;&#x9;分布式计算&#xA;&#x9;加密&#xA;&#x9;&#x9;环签名&#xA;服务层&#xA;&#x9;共识&#xA;&#x9;&#x9;PoW(工作量证明)&#xA;&#x9;&#x9;PoS(权益证明)&#xA;&#x9;&#x9;DPoS(股份授权证明)&#xA;&#x9;&#x9;PAXOS(分布式事务一致性协议)、PBFT(拜占庭容错算法)&#xA;&#x9;智能合约: 基于预定义事件触发、不可篡改、自动执行&#xA;&#x9;&#x9;高效引擎&#xA;&#x9;&#x9;合约算法库&#xA;&#x9;&#x9;预言机&#xA;协议层&#xA;&#x9;SHA256哈希算法&#xA;&#x9;ECDSA签名算法&#xA;&#x9;交易不匿名&#xA;&#x9;数据结构&#xA;&#x9;&#x9;链式DAG&#xA;P2P网络层&#xA;跨链技术&#xA;分片技术&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;应用特点&#34;&gt;&#xA;  应用特点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8%e7%89%b9%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;技术业务特点&#xA;&#x9;链&#xA;&#x9;&#x9;哈希加密、非对称加密&#xA;&#x9;&#x9;时间戳&#xA;&#x9;&#x9;P2P网络传输&#xA;&#x9;&#x9;共识算法、拜占庭容错&#xA;&#x9;&#x9;分布式存储&#xA;&#x9;去中心化: 无中心化硬件、管理机构、节点权利和义务均等&#xA;&#x9;&#x9;加密交易&#xA;&#x9;&#x9;交易隐私保护&#xA;&#x9;开放性: 除交易和私有信息被加密，数据对所有人公开&#xA;&#x9;&#x9;Token通证&#xA;&#x9;自治性: 基于协商一致规范和协议，对人的信任改成对机器的信任&#xA;&#x9;&#x9;去除信任&#xA;&#x9;信息不可篡改: 除非控制51%的节点&#xA;&#x9;&#x9;可溯源&#xA;&#x9;匿名性: 节点之交换遵循固定算法，数据交换无需信任，所以无须公开身份&#xA;&#x9;&#x9;隐私性&#xA;&#x9;&#x9;安全性&#xA;应用业务特点&#xA;&#x9;数据共享&#xA;&#x9;补充了互联网不安全的短板&#xA;&#x9;公平&#xA;&#x9;透明化&#xA;&#x9;唯一性&#xA;&#x9;确权性&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;应用&#34;&gt;&#xA;  应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;互联网基础数据&#xA;&#x9;多标识网络体系&#xA;&#x9;&#x9;掌控域名生成/管理&#xA;&#x9;&#x9;多模态标识解析体系，去IP&#xA;网络安全&#xA;&#x9;工业物联网设备安全&#xA;&#x9;身份认证与信任基础设施&#xA;&#x9;数据完整性保护&#xA;&#x9;多信任源安全基础设施&#xA;&#x9;&#x9;跨域协同信任服务&#xA;&#x9;&#x9;分布式PKI&#xA;&#x9;&#x9;可信DNS等网络基础设施&#xA;&#x9;网络安全数据可信&#xA;&#x9;&#x9;数据安全共享&#xA;&#x9;&#x9;网络安全威胁情报共享&#xA;&#x9;&#x9;网络行为追踪溯源&#xA;&#x9;网络防御协同激励&#xA;&#x9;&#x9;DDoS协同防御&#xA;&#x9;&#x9;众包漏洞挖掘&#xA;&#x9;网络安全态势感知&#xA;&#x9;&#x9;网络安全态势可信感知&#xA;&#x9;&#x9;态势数据融合与统一呈现&#xA;隐藏通信&#xA;&#x9;特点&#xA;&#x9;&#x9;交易量大、隐蔽性好&#xA;&#x9;&#x9;非定向发送、不经意接收&#xA;&#x9;&#x9;数据多副本、可溯源&#xA;金融：省去第三方中介, 可编程金融&#xA;&#x9;支付、数字货币&#xA;&#x9;股权、私募、信贷、风险&#xA;&#x9;钢材贸易担保、生物资产监管、农业联盟链&#xA;&#x9;供应链金融&#xA;&#x9;&#x9;融资、监管、信息共享&#xA;&#x9;&#x9;资方与平台直连&#xA;&#x9;财务结算&#xA;&#x9;金融大数据: 企业征信、智能风控引擎、知识产权评估、实控人征信、生产经营数据、履约表现&#xA;&#x9;银行链&#xA;&#x9;&#x9;融资：云链云信平台，资方平台直连&#xA;&#x9;共享经济&#xA;&#x9;&#x9;租车、租房、知识技能&#xA;&#x9;量化交易&#xA;商品溯源&#xA;&#x9;供应链&#xA;&#x9;物流&#xA;数据市场融通&#xA;&#x9;分布式云存储UGC&#xA;&#x9;供应商画像，应收款凭证，合同履约，预测分析&#xA;&#x9;处方流转&#xA;&#x9;电子印章&#xA;&#x9;IP授权&#xA;&#x9;跨境贸易直通车、国际快件&#xA;&#x9;零售批发小店&#xA;算力供应&#xA;隐私保护&#xA;&#x9;账本隔离: 分片、多通道&#xA;&#x9;私有数据: 同一通道隐私数据在小部分组织间共享&#xA;&#x9;数据加密授权访问：加密给指定人，同一通道内其他成员不能访问&#xA;监管科技，以链治链&#xA;&#x9;建设工程项目管理: 进度，质量，安监，申报，数据，信用&#xA;&#x9;&#x9;场景式存证，资金透明&#xA;&#x9;资金监管&#xA;&#x9;安全生产&#xA;&#x9;保险结算、审核支撑&#xA;&#x9;广告监播&#xA;公共服务领域：去中心化改造&#xA;认证、公证：不可篡改&#xA;数字版权&#xA;&#x9;专利、著作权、商标保护、软件、游戏、音频、视频、书籍许可证、艺术品证明&#xA;保险：去人力运营批准，自动触发理赔&#xA;公益慈善&#xA;疫情：结果证明材料上链存证&#xA;数字医疗链&#xA;&#x9;电子病历、健康管理&#xA;&#x9;隐私保护&#xA;教育链&#xA;&#x9;数据确权、安全存证、溯源审计&#xA;&#x9;档案管理、学生征信、学历证明、成就证明、产学合作&#xA;电子商务&#xA;&#x9;电子签约&#xA;司法&#xA;&#x9;电子证据溯源&#xA;电力链&#xA;&#x9;供应链、产业链上下游打通&#xA;&#x9;产融协同&#xA;&#x9;资源共享&#xA;营销&#xA;&#x9;积分卡券&#xA;农业&#xA;&#x9;农业产权交易&#xA;房地产&#xA;&#x9;上市、交易、产权登记&#xA;通信&#xA;&#x9;消息系统&#xA;社会管理&#xA;&#x9;代理投票、身份认证、档案管理、公证、遗产继承、个人社会信用、工商管理&#xA;文化娱乐&#xA;&#x9;视频版权、音乐版权、软件防伪、数字内容确权、软件传播溯源&#xA;物联网&#xA;&#x9;物品溯源、物品防伪、物品认证、网络安全、网络效率、网络可靠性&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;趋势&#34;&gt;&#xA;  趋势&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b6%8b%e5%8a%bf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;链融合&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;隐私保护计算&#34;&gt;&#xA;  隐私保护计算&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9a%90%e7%a7%81%e4%bf%9d%e6%8a%a4%e8%ae%a1%e7%ae%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;Privacy-Preserving Computing&#xA;目标&#xA;&#x9;数据聚合时，增强对数据的保护，降低数据泄露风险&#xA;&#x9;数据最小化，可用不可见&#xA;方法&#xA;&#x9;多方安全计算&#xA;&#x9;联邦学习&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://ukeate.com/docs/architect/strategy/datalake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/architect/strategy/datalake/</guid>
      <description>&lt;h1 id=&#34;愿景&#34;&gt;&#xA;  愿景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%84%bf%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;统一&#xA;&#x9;批流一体&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数据难点&#34;&gt;&#xA;  数据难点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e9%9a%be%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;SQL脚本拼凑，没有可视化工具&#xA;技术要求高，大量重复开发工作&#xA;数据稽核难: 勾稽关系不可见，数据校核不可见&#xA;数据运维困难：可读性差，难以调整，扩展困难&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;湖仓一体计划&#34;&gt;&#xA;  湖仓一体计划&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b9%96%e4%bb%93%e4%b8%80%e4%bd%93%e8%ae%a1%e5%88%92&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;思路&#xA;&#x9;分治&#xA;&#x9;计算向数据移动&#xA;&#x9;本地取数据&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数据仓库计划&#34;&gt;&#xA;  数据仓库计划&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e4%bb%93%e5%ba%93%e8%ae%a1%e5%88%92&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;采集 -&amp;gt; kafka -&amp;gt; ETL -&amp;gt; kafka -&amp;gt; 存储 -&amp;gt; OLAP&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;采集工具&#34;&gt;&#xA;  采集工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%87%87%e9%9b%86%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;业务数据&#xA;&#x9;ODS原始数据快照&#xA;&#x9;日志&#xA;&#x9;动态数据：用户推荐数据，用户行为&#xA;&#x9;第三方数据：用户征信、广告投放数据、企业信息&#xA;技术&#xA;&#x9;RPC同步&#xA;&#x9;ETL拉取&#xA;&#x9;日志采集&#xA;&#x9;爬虫&#xA;实时&#xA;&#x9;trigger、日志&#xA;&#x9;&#x9;canel&#xA;准实时&#xA;&#x9;日志&#xA;非实时&#xA;&#x9;任务调度&#xA;&#x9;&#x9;quartz, xxl-job, 大数据&#xA;技术&#xA;&#x9;Flume&#xA;&#x9;&#x9;日志采集&#xA;&#x9;Sqoop&#xA;&#x9;&#x9;数据库ETL&#xA;&#x9;&#x9;etl, sql-to-Hadoop, MapReduce程序, 支持Hive, HDFS&#xA;&#x9;OoZie&#xA;&#x9;&#x9;任务调度&#xA;&#x9;Azkaban&#xA;&#x9;&#x9;任务调度&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;存储工具&#34;&gt;&#xA;  存储工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%98%e5%82%a8%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;HDFS&#xA;HBase&#xA;Hive&#xA;&#x9;数据仓库&#xA;&#x9;封装的HDFS和MapReduce&#xA;ClickHouse&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;运维工具&#34;&gt;&#xA;  运维工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%90%e7%bb%b4%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;Ambari&#xA;&#x9;安装、部署、配置和管理&#xA;Flume&#xA;&#x9;cloudera开源, 日志收集&#xA;Ganglia&#xA;&#x9;分布式监控系统，php页面&#xA;HUE&#xA;&#x9;web管理Hadoop&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;处理工具&#34;&gt;&#xA;  处理工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%84%e7%90%86%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;离线计算批处理&#34;&gt;&#xA;  离线计算(批处理)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%a6%bb%e7%ba%bf%e8%ae%a1%e7%ae%97%e6%89%b9%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;MapReduce&#xA;&#x9;每个task启动一个jvm&#xA;Pig&#xA;&#x9;数据流处理语言，类SQL, 脚本转换为MapReduce任务&#xA;Mahout&#xA;&#x9;数据挖掘, 机器学&#xA;Tez&#xA;&#x9;用DAG(有向无环图)组织多个MR任务&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;流式计算&#34;&gt;&#xA;  流式计算&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%81%e5%bc%8f%e8%ae%a1%e7%ae%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Impala&#xA;&#x9;# cloudrea开源,实时视图计算框架, 分布式查询引擎。直接从HDFS或Hbase中用select, join, 支持事务, 需要kafka&#xA;S4&#xA;&#x9;# 分布式流计算，允许请求丢失&#xA;Storm&#xA;&#x9;只能流式计算&#xA;Spark&#xA;Flink&#xA;Kafka Stream&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数据管理工具&#34;&gt;&#xA;  数据管理工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;分类&#xA;&#x9;资产大屏&#xA;&#x9;元数据管理&#xA;&#x9;任务管理：管理、编排、调度、监测&#xA;&#x9;数据质量、数据治理&#xA;Yarn&#xA;&#x9;介绍&#xA;&#x9;&#x9;Yet Another Resource Negotiator, 任务管理, 调度算力资源, 在HDFS上运行计算框架(如MapReduce, Storm, Spark)&#xA;&#x9;组成&#xA;&#x9;&#x9;ResourceManager(RM)&#xA;&#x9;&#x9;&#x9;处理请求&#xA;&#x9;&#x9;&#x9;监控NodeManager&#xA;&#x9;&#x9;&#x9;启动、监控ApplicationMaster&#xA;&#x9;&#x9;&#x9;资源分配调度&#xA;&#x9;&#x9;&#x9;常驻&#xA;&#x9;&#x9;NodeManager(NM)&#xA;&#x9;&#x9;&#x9;常驻&#xA;&#x9;&#x9;ApplicationMaster(AM)&#xA;&#x9;&#x9;&#x9;数据切分&#xA;&#x9;&#x9;&#x9;为应用程序申请资源再分配给内部任务&#xA;&#x9;&#x9;&#x9;任务监控、容错&#xA;&#x9;&#x9;&#x9;非常驻，job拉起&#xA;&#x9;&#x9;Container&#xA;&#x9;&#x9;&#x9;运行APP&#xA;&#x9;&#x9;&#x9;某节点上多维度的资源&#xA;&#x9;&#x9;&#x9;由NodeManager调度&#xA;&#x9;&#x9;&#x9;非常驻&#xA;Mesos&#xA;Tachyon&#xA;&#x9;分布式缓存&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;分析展示工具&#34;&gt;&#xA;  分析展示工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%9e%90%e5%b1%95%e7%a4%ba%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;Mllib&#xA;&#x9;machine learning library, Spark机器学习库&#xA;Giraph&#xA;&#x9;大规模图分布式计算&#xA;GraphX&#xA;&#x9;Spark分布式图处理框架&#xA;Superset&#xA;Metabase&#xA;Redash&#xA;BIRT&#xA;Kylin&#xA;Davinci&#xA;DBus-allinone&#xA;HAWQ&#xA;&#x9;# Hadoop原生sql查询引擎&#xA;phoenix&#xA;&#x9;# OLTP, 支持Hbase和HDFS, jdbc, 更快sql查询&#xA;Shark&#xA;&#x9;# sql on Spark, 并行job处理比MapReduce快100倍&#xA;Presto&#xA;&#x9;# 分布式sql查询, facebook开源, 称比Hive快10倍&#xA;Drill&#xA;&#x9;# Apache, Dremel的开源版本, 对多数据库生成query plan&#xA;Dremel&#xA;&#x9;介绍&#xA;&#x9;&#x9;google的交互式数据分析系统，构建于gfs上&#xA;&#x9;特点&#xA;&#x9;&#x9;嵌套型数据的列存储, 多层查询&#xA;&#x9;&#x9;减少查询的处理数据量&#xA;Kylin&#xA;&#x9;# OLAP, Apache, 支持Cube类查询&#xA;Doris&#xA;GridGain&#xA;&#x9;网格计算框架，提供平行计算能力&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数仓建模&#34;&gt;&#xA;  数仓建模&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e4%bb%93%e5%bb%ba%e6%a8%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;分层&#xA;&#x9;ODS层(数据源): 多源接入&#xA;&#x9;&#x9;业务库，集团数据，流量日志，三方数据&#xA;&#x9;IDL层(数据集成): 屏蔽底层影响，还原业务，统一标准&#xA;&#x9;CDL层(数据组件): 指标口径统一，重复计算&#xA;&#x9;MDL层(数据集市): 数据分析查询，数据应用支持&#xA;&#x9;ADL层(数据应用): 多维数据分析&#xA;工具&#xA;&#x9;基础层工具: 元数据中心维护业务过程，表关联关系、实体对象、识别分析对象、数据组件&#xA;&#x9;自助查询工具: 逻辑宽表、生成查询语句、查询情况反馈建模&#xA;&#x9;应用层工具: 拼接小模型&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://ukeate.com/docs/architect/strategy/edge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/architect/strategy/edge/</guid>
      <description>&lt;h1 id=&#34;应用&#34;&gt;&#xA;  应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;监控行为计算&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>这些年我做过的技术</title>
      <link>https://ukeate.com/docs/architect/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/architect/summary/</guid>
      <description>&lt;p&gt;13年毕业以来，做技术有9年了。加上大学4年学计算机，已经13年的时间做技术了。虽然没什么成就，但也想学别人写出来看一看，起码也为自己的时间做一个交代。&lt;/p&gt;&#xA;&lt;h1 id=&#34;背景经历&#34;&gt;&#xA;  背景经历&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%83%8c%e6%99%af%e7%bb%8f%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;2009年-2013年：上学幻想期。幻想的意思是，那时技术是学来玩的，大部分时间在搞Linux，安装各种多系统和发行版，配Conky, 配各种Compiz 3D桌面，安装各种攻击工具。还买了《深入Linux内核架构》、《鸟哥的Linux私房菜》、《Linux与UNIX Shell编程指南》、《算法导论》可惜最终基础没看多少，大概与牛人的差距就是从看不完这些书体现出来的。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;2013年-2015年: 入门乱学期。毕业后在C++与Java中做了Java。从此书变成了Java系列，还去学了Java线下课。可能天生的好奇心体现了出来，Java工作不久就用刚流行的Node.js改造了公司的消息推送程序，又学起了新兴的WebGL与Three.js。还改用Dell的平板装了Linux来开发。可能做的东西太过于玄幻，成为了公司的架构师。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;2015年-2018年: 技术学习期。可能源于对各种技术的探索，走上了全栈开发的道路，用Node.js做起了Proxy和后端，全栈体系里用MongoDB做了业务库，并在前端不断寻求Web3D的应用，还扬言计算机交互必将从一维的Command和二维的Window发展到三维的3D界面，被打脸到现在。之后做了Golang的企业微服务，自我感觉到此才算学会了负起责任,真的承担了TeamLeader的责任与架构师工作，从追求各种代码的特性和代码的优雅，转到了追求设计的优雅，并开始系统研究各种中间件。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;2018年-至今: 架构探索期。此期间的职位头衔是基础服务架构师、技术专家和架构师Manager。得益于知识的全面性和折腾的各种经验，主要做了几件事。一是从0到1的基础服务平台建设，二是解决中型SaaS系统开发维护中的各种问题，三是设计各种微服务系统并给咨询方出解决方案。技术方向一个是系统设计，另一个是折腾K8S和DevOps与测试的各种问题。折腾的方向似乎升级到了战略性，IoT、AI、湖仓一体、区块链、元宇宙。然后惊奇的发现技术栈竟然挺吻合，阻碍没想象中的大，大概得益于多年用Linux工作的基础和什么都折腾一下的经历。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;思维方式&#34;&gt;&#xA;  思维方式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%9d%e7%bb%b4%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;业务经验很重要，各个行业的经验要小心全面的积累下来，甚至比技术更重要一些，因为它更贴近实用，也有更长久的不变性。&lt;/li&gt;&#xA;&lt;li&gt;技术实现方面设计是主题，可能设计能力是评价一个工程师最主要的方面，当然前提是有写可靠代码的能力。&lt;/li&gt;&#xA;&lt;li&gt;基础知识是演绎的关键，凡是别人说学这个有什么用的，一定要抓紧学一学。&lt;/li&gt;&#xA;&lt;li&gt;靠工具解决问题&#xA;&lt;ul&gt;&#xA;&lt;li&gt;大型系统的提效，完善测试是关键。可能这就是所说的抓手，也是降本增效的着力点。它前边直接对应需求，后边促进运维体系和开发体系。并本身体现出系统质量。&lt;/li&gt;&#xA;&lt;li&gt;企业知识库是核心，体现知识的结构化和历史变化，降低了沟通成本并提供了信息一致性保障。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;持续关注业界解决方案，有渠道无遗漏的过重要信息，保持敏感性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;后记&#34;&gt;&#xA;  后记&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%8e%e8%ae%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;互联网公司陷入增长瓶颈&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;但AI的应用发展日新月异&lt;/li&gt;&#xA;&lt;li&gt;其实元宇宙的概念很好的统一了现在科技应用的增长点，创造了需求&lt;/li&gt;&#xA;&lt;li&gt;当然马斯克代表的多行星发展的方向暂时与我没有关系&lt;/li&gt;&#xA;&lt;li&gt;量子计算似乎也有了可工业化的迹象&#xA;我首先要避免的是变成修蒸汽机的人&amp;ndash;只会解决曾经的问题。其次要成为完整的人，在技术外的场景也寻求人生的意义。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
