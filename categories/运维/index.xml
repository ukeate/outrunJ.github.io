<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>运维 on ukeate的笔记</title>
    <link>https://ukeate.com/categories/%E8%BF%90%E7%BB%B4/</link>
    <description>Recent content in 运维 on ukeate的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 Jan 2025 08:50:36 -0700</lastBuildDate>
    <atom:link href="https://ukeate.com/categories/%E8%BF%90%E7%BB%B4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LinuxTool</title>
      <link>https://ukeate.com/docs/tool/linux/linux_tool/</link>
      <pubDate>Thu, 11 Oct 2018 18:47:57 +0800</pubDate>
      <guid>https://ukeate.com/docs/tool/linux/linux_tool/</guid>
      <description>&lt;h1 id=&#34;辅助&#34;&gt;&#xA;  辅助&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%be%85%e5%8a%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;快捷键&#34;&gt;&#xA;  快捷键&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e6%8d%b7%e9%94%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;ctrl alt f1/f2/...      # 终端切换&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;帮助&#34;&gt;&#xA;  帮助&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%ae%e5%8a%a9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;man&#xA;    -f                  # 简要介绍&#xA;    -k                  # 通配搜索&#xA;whatis                  # man -f&#xA;apropos                 # man -k&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;命令行&#34;&gt;&#xA;  命令行&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%91%bd%e4%bb%a4%e8%a1%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;clear&#xA;pwd                     # 当前路径&#xA;bash&#xA;    -c                  # 执行命令字符串&#xA;    set -o              # 设置快捷键模式，默认emacs&#xA;&#xA;    快捷键&#xA;        &amp;lt;Tab&amp;gt; bash补全&#xA;        &amp;lt;C-c&amp;gt; 中断&#xA;        &amp;lt;C-d&amp;gt; eof&#xA;        &amp;lt;C-tab&amp;gt; ls&#xA;        &amp;lt;C-l&amp;gt; clean&#xA;        &amp;lt;C-a&amp;gt; 移到行首&#xA;        &amp;lt;C-e&amp;gt; 移到行尾&#xA;        &amp;lt;C-u&amp;gt; 删除到行首&#xA;        &amp;lt;C-k&amp;gt; 删除到行尾&#xA;        &amp;lt;C-p&amp;gt; 上一个命令&#xA;        &amp;lt;C-n&amp;gt; 下一个命令&#xA;        &amp;lt;C-r&amp;gt; 查看历史      # &amp;lt;C-s&amp;gt; 向前查看历史&#xA;        &amp;lt;C-s&amp;gt; 冻结&#xA;        &amp;lt;C-q&amp;gt; 解冻&#xA;        &amp;lt;C-t&amp;gt; 交换字符&#xA;        &amp;lt;C-w&amp;gt; 删word&#xA;        &amp;lt;C-z&amp;gt; 暂停到后台&#xA;        &amp;lt;C-\&amp;gt; 中断&#xA;        &amp;lt;C-/&amp;gt; 撤消&#xA;        &amp;lt;C-_&amp;gt; 删除一行&#xA;        &amp;lt;M-r&amp;gt; 取消历史变更&#xA;    场景&#xA;        禁用&amp;lt;C-s&amp;gt;&amp;lt;C-q&amp;gt;, 以使&amp;lt;C-s&amp;gt;变为向前查看历史&#xA;            stty -ixon -ixoff&#xA;            stty STOP ^w            # 把原&amp;lt;C-s&amp;gt;改成&amp;lt;C-w&amp;gt;&#xA;zsh&#xA;fish&#xA;tmux&#xA;    session&#xA;    window&#xA;    pane&#xA;    ~/.tmux.conf&#xA;&#xA;    快捷键prefix &amp;lt;C-b&amp;gt;&#xA;&#xA;    系统&#xA;        prefix&#xA;            ?        # 帮助&#xA;            :        # 命令模式&#xA;            [        # 复制模式&#xA;        tmux&#xA;            kill-server&#xA;            source a&#xA;    session&#xA;        prefix&#xA;            d        # 脱离&#xA;            D        # 选择脱离&#xA;            r        # 重绘&#xA;            s        # 选择&#xA;            ~        # 信息历史&#xA;&#xA;        tmux&#xA;            ls&#xA;            attach a&#xA;                # 返回session&#xA;                -t name&#xA;            rename-session a&#xA;            switch -t a&#xA;    window&#xA;        prefix&#xA;            c        # 新建&#xA;            &amp;amp;        # 关闭&#xA;            ,        # 命名&#xA;            .        # 编号&#xA;            w        # 选择&#xA;            [0-9]        # 切换&#xA;            n        # 向后切换&#xA;            p        # 向前切换&#xA;            l        # 置换&#xA;            f        # 所有window查找&#xA;    pane&#xA;        prefix&#xA;            &amp;quot;            # 横分&#xA;            %            # 竖分&#xA;            x            # 关闭&#xA;            !            # 移到新window&#xA;            方向          # 切换&#xA;            o            # 切换到下一个&#xA;            &amp;lt;C-o&amp;gt;        # 向下旋转&#xA;            &amp;lt;M-o&amp;gt;        # 向上旋转&#xA;            {            # 向前置换&#xA;            }            # 向后转换&#xA;            &amp;lt;C-方向&amp;gt;      # 调整size&#xA;            &amp;lt;M-方向&amp;gt;      # 5倍调整size&#xA;            空格          # 切换布局&#xA;            &amp;lt;M-[0-5]&amp;gt;    # 选择布局&#xA;            q            # 显示编号&#xA;&#xA;    内置命令&#xA;        source-file a&#xA;screen&#xA;    -ls                 # 查看所有session&#xA;    -r                  # 进入id&#xA;echo&#xA;watch -n 1 -d netstat  -ant         # 监视&#xA;forturn                 # 随机名言&#xA;toilet                  # 彩虹字&#xA;cowsay                  # 牛说&#xA;source                  # 当前shell执行&#xA;figlet                  # 大写字&#xA;sl                      # 火车&#xA;cal 9 1752              # 打印日历&#xA;date +%Y/%m/%d/%H:%M&#xA;bc&#xA;maxima                  # 符号计算&#xA;factor                  # 分解质因数&#xA;expect                  # 为运行的脚本预填表单&#xA;    o-&amp;gt; 结束&#xA;    #!/usr/bin/expect&#xA;&#xA;    spawn ssh outrun@192.168.1.103&#xA;    expect &amp;quot;*password&amp;quot;&#xA;    send &amp;quot;asdf\n&amp;quot;&#xA;    expect eof&#xA;&#xA;    o-&amp;gt; 交互&#xA;    #!/usr/bin/expect -f&#xA;    spawn sudo /usr/local/mysql/bin/mysqld_safe --user=mysql&#xA;    expect &amp;quot;*password:*&amp;quot;&#xA;    send -- &amp;quot;asdf&amp;quot;&#xA;    send -- &amp;quot;\n&amp;quot;&#xA;&#xA;    interact            # interact留下交互, exit退出&#xA;&#xA;    o-&amp;gt; 后台执行        # 不要expect eof&#xA;    if [fork]!=0 exit&#xA;    disconnect&#xA;script/scriptreply      # 终端录制&#xA;    script -t 2&amp;gt;timing.log -a output.log&#xA;    scriptreply timing.log output.log&#xA;jobs                    # 后台作业&#xA;fg                      # 后台作业调度到前台&#xA;bg                      # 继续执行后台作业&#xA;nohup&#xA;    nohup *** &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp; &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;文字处理&#34;&gt;&#xA;  文字处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%87%e5%ad%97%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;uniq                    # 删除重复列&#xA;cat file1 file2         # 上下拼接&#xA;paste file1 file2       # 左右拼接&#xA;    -d &#39;-&#39;              # 加分隔符&#xA;tac                     # 倒转行显示&#xA;wc                      # 统计行, 单词, 字符&#xA;grep&#xA;    -v grep         # 过滤掉grep&#xA;    常用&#xA;        grep -nr --exclude-dir={.git, res, bin} &#39;a&#39; .&#xA;            # 递归查找&#xA;xargs&#xA;    -d &amp;quot;\t&amp;quot;         # 定义分隔符&#xA;    -t              # -t打印执行的命令&#xA;    -L 1            # 1行执行一次&#xA;    -n 1            # 一次使用1项&#xA;    -I arg1 sh -c &#39;echo arg1; mkdir arg1&#39;       &#xA;        # 执行多命令&#xA;    --max-procs 0   # 并行执行，不限数量&#xA;    常用&#xA;        代码行数&#xA;            find -name &amp;quot;*.go&amp;quot; -or -name &amp;quot;*.py&amp;quot; |xargs grep -v &amp;quot;^$&amp;quot; |wc -l&#xA;        复制最近修改的文件&#xA;            ls -rt | tail -4 | xargs -i cp -r {} ~/sdb/work/ryxWork/架构/&#xA;awk&#xA;    awk &#39;{print $1}&#39;&#xA;    awk &#39;{cmd=&amp;quot;kubectl delete pvc &amp;quot;$1;system(cmd)}&#39;&#xA;        # 按行执行命令&#xA;sed&#xA;    sed -i &#39;1i\new line&#39;&#xA;        # 第一行前插入&#xA;    常用&#xA;        替换文本&#xA;            sed -i &amp;quot;s/a/b/g&amp;quot; `grep -rl &amp;quot;a&amp;quot; ./`&#xA;sort&#xA;    -r                  # reverse&#xA;    -n                  # 显示行号&#xA;more&#xA;less&#xA;iconv&#xA;    -l                  # 列出已知的编码&#xA;    -f gbk -t utf-8 -c orig.txt -o tgt.txt      # 转码&#xA;head -2&#xA;tail -2&#xA;    -f&#xA;paste file1 file2       # 合并两个文件或两栏内容&#xA;    -d &#39;+&#39;              # 分隔符&#xA;nano&#xA;strings                 # 打印可打印字符&#xA;jq . a.json             # 验证json格式&#xA;pv -qL 10               # 文件缓慢显示&#xA;aview                   # 图片文件化&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;媒体处理&#34;&gt;&#xA;  媒体处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%aa%92%e4%bd%93%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;convert                 # 转换图片&#xA;    convert a.jpg a.png # 转格式&#xA;&#xA;    -resize 1024x768&#xA;        convert -resize a.jpg a1.jpg&#xA;    -sample 50%x50%     # 缩略图&#xA;    -rotate 270         # 顺时针旋转270度&#xA;    -flip               # 左右翻转&#xA;    -paint 4            # 旋转角度&#xA;&#xA;    -draw               # 加文字&#xA;        convert -fill black -pointsize 60 -font helvetica -draw &#39;text 10,80 &amp;quot;A&amp;quot; ‘  a.jpg  a1.jpg&#xA;            # 用黑色, 60磅, helvetica字体, 在位置10,80 写A&#xA;    -raise 5x5          # 右下增加&#xA;    +raise 5x5          # 左上增加&#xA;    -bordercolor red -border 5x5                # 红色边框&#xA;    -mattecolor black -frame 5x5                # 黑色边框&#xA;&#xA;    -noise 3            # 油画&#xA;    -monochrome         # 噪声&#xA;    -blur 80            # 高斯模糊&#xA;    -flop               # 底片&#xA;    -negate             # 黑白&#xA;    -charcoal 2         # 炭笔&#xA;    -spread 30          # 漩涡&#xA;    -swirl 67           # 凸起&#xA;ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;系统&#34;&gt;&#xA;  系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;启动与任务&#34;&gt;&#xA;  启动与任务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%af%e5%8a%a8%e4%b8%8e%e4%bb%bb%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;grub&#xA;    /etc/default/grub       # 设置文件&#xA;    grub2-mkconfig -o /boot/grub2/grub.cfg      # 使设置生效，update-grub 是debian下做的包装&#xA;upstart                     # 状态 waiting, starting, pre-start, spawned, post-start,running,pre-stop, stopping, killed, post-stop&#xA;systemv&#xA;systemd&#xA;systemctl&#xA;    status&#xA;    daemon-reload           # 修改service文件后重载&#xA;    systemctl list-units                        # list known units&#xA;    systemctl list-unit-files                   # 已知的services&#xA;    systemctl list-sockets                      # list socket units ordered by the listening address&#xA;    systemctl enable NAME                       # 设置开机启动, 生成service脚本命令&#xA;    systemctl disable NAME&#xA;    systemctl start NAME&#xA;    systemctl stop NAME&#xA;    systemctl restart NAME&#xA;    systemctl reload NAME&#xA;service&#xA;    service start&#xA;    service restart&#xA;    service stop&#xA;    service status&#xA;    service --status-all&#xA;chkconfig iptables on/off   # 设置服务启动&#xA;    --level 2345 iptables off                   # 查看各level服务状态&#xA;    --list iptables&#xA;at                      # 某时间运行一次&#xA;osmo                    # 计划任务软件&#xA;reap                    # 用于定时删除目录中文件，并打印日志&#xA;    -h                  # 打印帮助信息&#xA;    -t                  # 后台运行, 并设置时间间隔&#xA;    -s                  # single 单次运行&#xA;cron&#xA;    介绍&#xA;        crond服务在systemd中被timer取代&#xA;&#xA;    使用&#xA;        $ service crond start&#xA;        $ service crond stop&#xA;        $ service crond restart&#xA;        $ service crond reload                      # 重载配置&#xA;        $ crontab crontest.cron                     # 添加定时任务。打印的文件在用户根目录下&#xA;        $ crontab -l                                # 列出用户目前的crontab&#xA;        $ crontab -u                                # 设定某个用户的cron服务&#xA;        $ crontab -r                                # 删除某个用户的cron服务&#xA;        $ crontab -e                                # 编辑某个用户的cron服务&#xA;            # crontab -u root -l   查看root的设置&#xA;&#xA;        /etc/crontab                                # 系统配置文件&#xA;        /etc/cron.hourly&#xA;        /etc/cron.daily&#xA;        /etc/cron.weekly&#xA;        /etc/cron.monthly                           # 每小时、天、周、月执行的脚本&#xA;&#xA;        定时格式&#xA;            M H D m d cmd&#xA;                M: 分钟（0-59）每分钟用*或者 */1表示&#xA;                H: 小时（0-23）&#xA;                D: 天（1-31）&#xA;                m: 月（1-12）&#xA;                d: 一星期内的天（0~6，0为星期天）&#xA;                cmd: 如 ~/a.sh&#xA;    例子&#xA;        crontest.cron文件中&#xA;            15,30,45,59 * * * * echo &amp;quot;aa..........&amp;quot; &amp;gt;&amp;gt; aa.txt&#xA;                # 每15分钟执行一次打印&#xA;        0 */2 * * * date                            # 每两个小时&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;日志&#34;&gt;&#xA;  日志&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%a5%e5%bf%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;dmesg                   # 启动日志&#xA;rsyslog                 # 日志管理, syslog的实现, 在systemd中被systemd-journal取代&#xA;mcelog                  # machine check exception log&#xA;journalctl              # 日志查看&#xA;    -x                  # 显示解释&#xA;    -e                  # 显示到底部&#xA;    -u                  # 指定unit名, 如kubelet&#xA;    --no-pager          # 不输出到管道来分页&#xA;    -f                  # 追加显示&#xA;    -q                  # 只显示warn以上信息&#xA;    --user-unit         # 指定用户&#xA;    --since &amp;quot;2018-03-26&amp;quot; &#xA;    --until &amp;quot;2018-03-26 03:00&amp;quot;&#xA;    场景&#xA;        journalctl -f --user-unit onedrive&#xA;        journalctl -xefu kubelet --no-pager&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;电源&#34;&gt;&#xA;  电源&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%b5%e6%ba%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;poweroff                # 立即关机&#xA;shutdown -h now&#xA;    -h                  # 关机&#xA;    -r                  # 重启&#xA;pm-suspend              # 挂起电脑&#xA;halt&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;用户&#34;&gt;&#xA;  用户&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e6%88%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;w                       # 在线用户名, 终端号, 登录时间, 空闲时间, 终端连接所有进程时间, 当前进程时间, 当前命令&#xA;id outrun               # 用户信息&#xA;su&#xA;    常用&#xA;        切换登录&#xA;            sudo -i su outrun&#xA;sudo&#xA;id                      # 用户信息, 所在组&#xA;passwd                  # 修改密码&#xA;useradd outrun          # 创建用户&#xA;    -g outrun           # 指定组&#xA;    -r                  # 是系统用户&#xA;    -d /home/outrun     # 指定登录目录&#xA;    -u 544              # 指定id&#xA;userdel -r user1        # 完全删除用户&#xA;groups user1            # 查看组&#xA;groupadd ftp            # 创建组&#xA;usermod                 # 修改用户状态&#xA;    -a -G root outrun   # 加入组&#xA;    -l newuser user1    # 改名&#xA;    -L user1            # 锁定&#xA;    -U user1            # 解锁&#xA;    -d /home/ftp ftp    # 改登录目录&#xA;        -u 123 outrun       # 修改id&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;内核&#34;&gt;&#xA;  内核&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%85%e6%a0%b8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;uname -a                # 查看版本&#xA;modprobe vboxdrv                    # 内核&#xA;lsmod                               # 显示当前系统加载的模块，如systemctl中start了的模块&#xA;dkms&#xA;    status&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;配置&#34;&gt;&#xA;  配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;env                     # 查看所有环境变量&#xA;envsubst                # 编译文件中环境变量&#xA;    envsubst &#39;${THREAD_NUM}&#39; &amp;lt; decoder.conf.template &amp;gt; decoder.conf&#xA;getent                  # 查看系统数据库中数据&#xA;    group docker        # 查看docker用户组&#xA;ulimit -s unlimited     # 限制shell启动资源, 不限制堆栈大小&#xA;    -a 显示各种限制&#xA;    -u 10000 最大用户数&#xA;    -n 102400 文件句柄数&#xA;    -d unlimited 数据段长度&#xA;    -m unlimited 内存大小&#xA;    -t unlimited cpu时间&#xA;    -v unlimited 虚拟内存&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;系统设备&#34;&gt;&#xA;  系统设备&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e8%ae%be%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;接口查看&#34;&gt;&#xA;  接口查看&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%a5%e5%8f%a3%e6%9f%a5%e7%9c%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;lspci&#xA;lsusb&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;显示器&#34;&gt;&#xA;  显示器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%98%be%e7%a4%ba%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;xrandr&#xA;    # 多显示器布局&#xA;    -q                         # 列出所有屏幕&#xA;    --verbose                   # 列出所有屏幕详情&#xA;    --output eDP1               # 指定屏幕&#xA;    --off                       # 禁用屏幕&#xA;    --primary                   # 指定主显示器&#xA;    --mode                      # 分辨率&#xA;    --pos                       # 指定屏幕在背景板的位置, 根据各屏幕分辨率、位置算&#xA;    --rotate                    # 旋转屏幕&#xA;        normal&#xA;        left&#xA;        right&#xA;        inverted&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;声卡&#34;&gt;&#xA;  声卡&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a3%b0%e5%8d%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;amixer set Master 100%  # 调节音量&#xA;alsamixer               # 调节声音&#xA;alsactl                 # 设置alsamixer&#xA;    store                      # 保存&#xA;    restore                    # 加载&#xA;aplay -l&#xA;    /etc/asound.conf&#xA;        defaults.pcm.card 1&#xA;        defaults.pcm.device 1&#xA;        defaults.ctl.card 1&#xA;pactl&#xA;    场景&#xA;        默认声卡&#xA;            pactl list short sources&#xA;            pactl list short sinks&#xA;            pactl set-default-source alsa_input.pci-0000_00_1b.0.analog-stereo&#xA;            pactl set-default-sink alsa_output.pci-0000_00_1b.0.analog-stereo&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;系统监控&#34;&gt;&#xA;  系统监控&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e7%9b%91%e6%8e%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;综合监控&#34;&gt;&#xA;  综合监控&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%bc%e5%90%88%e7%9b%91%e6%8e%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;uptime                  # 当前时间, 运行时间, 用户数, 系统负载&#xA;tload                   # 系统负载图(用字符画)&#xA;top&#xA;    top -d 1 -p pid [,pid ...]&#xA;htop&#xA;    按键&#xA;        h               # 帮助&#xA;atop&#xA;btop&#xA;nmon&#xA;glances&#xA;netdata&#xA;vmstat                  # 获得有关进程、swap、内存、cpu等系统信息&#xA;dstat                   # 定时收集系统信息&#xA;sar                     # 全面的系统活动情况&#xA;    -u 3 5              # 查CPU负载, 3秒一次共5次 &#xA;    -d                  # 磁盘&#xA;    -r                  # 内存&#xA;    -W                  # SWAP&#xA;    -n DEV              # 网络接口&#xA;    -n SOCK             # socket连接信息&#xA;    -n TCP              # TCP连接&#xA;    -b                  # I/O速率&#xA;    -q                  # 平均负载&#xA;lxtask                  # GUI监控CPU、内存&#xA;sysdig&#xA;    sysdig&#xA;        -c&#xA;            topprocs_cpu            # 进程cpu top&#xA;                evt.cpu=0           # 只统计cpu0&#xA;            topprocs_net            # 进程带宽 top&#xA;            topprocs_file           # 进程硬盘i/o top&#xA;            topfiles_bytes          # 文件读写 top&#xA;                proc.name=httpd     # 指定进程名&#xA;            topfiles_time           # 文件时间 top&#xA;            topprocs_errors         # 进程error top&#xA;            topfiles_errors         # 文件error top&#xA;            topscalls_time          # 系统调用时间 top&#xA;            topscalls &amp;quot;evt.failed=true&amp;quot;                 # 系统调用出错 top&#xA;            topconns                # 网络连接 top&#xA;            fdcount_by&#xA;                proc.name &amp;quot;fd.type=file&amp;quot;                # 进程文件描述符&#xA;            fdbytes_by&#xA;                fd.directory &amp;quot;fd.type=file&amp;quot;             # 目录读写 top&#xA;                fd.filename &amp;quot;fd.directory=/tmp/&amp;quot;        # /tmp目录文件 读写top&#xA;                fd.type             # fd type i/o&#xA;            echo_fds &amp;quot;fd.filename=passwd&amp;quot;               # 所有名为passwd文件的i/o&#xA;            stdout&#xA;                proc.name=bash      # 进程标准输出&#xA;            fileslower 1            # 文件i/o 大于1ms&#xA;            spy_users               # 命令执行情况&#xA;&#xA;        -A                          # 只显示可读数据&#xA;        -s 4096                     # 指定 data buffer 字节&#xA;        -r trace.scap               #  指定trace file&#xA;        -pc                         # 详情&#xA;    csysdig                         # 交互式工具&#xA;        -vcontainers                # 容器资源&#xA;        -pc                         # 详情&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;内存&#34;&gt;&#xA;  内存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%85%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;slabtop                 # 内核片缓存信息&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;cpu&#34;&gt;&#xA;  CPU&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cpu&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;powertop                # intel开发，找到高功率进程&#xA;mpstat                  # cpu统计信息&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;进程&#34;&gt;&#xA;  进程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%9b%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;pidstat -p 434  # 进程使用资源的情况&#xA;    -u 1        # CPU&#xA;    -r 1        # 内存&#xA;    -d 1        # 磁盘&#xA;    -w          # 上下文切换&#xA;ps&#xA;    aux                 # 用在unix style中, BSD格式显示&#xA;    ef                  # 用在system v style中, 标准格式显示&#xA;pstree                  # 进程关系&#xA;pwdx [pid]              # 查看进程工作目录&#xA;    ll /proc/[pid]/cwd&#xA;pmap [pid]              # 进程&#xA;&#xA;kill 1024&#xA;    -9&#xA;        # 3 QUIT 退出(同ctrl + \)&#xA;        # 1 HUP 终端断线&#xA;        # 2 INT 中断(同ctrl + c)&#xA;        # 9 KILL 强制终止&#xA;        # 15 TERM 终止&#xA;        # 18 CONT 继续(与STOP相反, 同fg/bg)&#xA;        # 19 STOP 暂停(同ctrl + z)&#xA;    -l                  # 列出所有信号名称和编号&#xA;    常用&#xA;        删除名字的进程&#xA;            ps -ef|grep -v &amp;quot;grep&amp;quot;|grep aurora/app.js |awk &#39;{print $2}&#39;| xargs kill -9&#xA;pkill Xorg              # kill 所有包含&#xA;killall Xorg            # kill 所有包含&#xA;xkill                   # 运行后 在xwindow点击kill窗口&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;网络&#34;&gt;&#xA;  网络&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%bb%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;配置-1&#34;&gt;&#xA;  配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;hostname&#xA;nmtui                   # 设置网卡&#xA;nmcli                       # 设置网络连接&#xA;    sudo nmcli c mod &#39;Wired connection 1&#39; ipv4.never-default false&#xA;        # 解决manual ip不能设置路由的问题&#xA;wpa_supplicant&#xA;iwlist                  # 列出无线网&#xA;iwconfig                # 无线网卡设置&#xA;wifi-menu&#xA;pppoe                   # 宽带&#xA;ifconfig&#xA;    打开, 关闭网卡&#xA;        ifconfig eth0 up&#xA;        ifconfig eth0 down&#xA;    临时修改ip&#xA;        ifconfig eth0 192.168.0.1 netmask 255.255.255.0 up&#xA;            # up表示立即激活&#xA;    临时mac&#xA;        ifconfig enp0s20u6u3 hw ether 00:50:56:c0:00:02&#xA;    虚拟网卡&#xA;        ifconfig wlp7s0:1 ip netmask&#xA;            # 共用一个ip&#xA;netctl                  # 配置网卡服务&#xA;route                   &#xA;    -n                  # 查看路由表 &#xA;    //添加到主机的路由&#xA;    route add –host 192.168.168.110 dev eth0&#xA;    route add –host 192.168.168.119 gw 192.168.168.1&#xA;    //添加到网络的路由&#xA;    route add –net IP netmask MASK eth0&#xA;    route add –net IP netmask MASK gw IP&#xA;    route add –net IP/24 eth1&#xA;    //添加默认网关&#xA;    route add default gw IP&#xA;    //删除路由&#xA;    route del –host 192.168.168.110 dev eth0&#xA;arp -n                  # 显示局域网 ip mac表&#xA;    -s ip mac           # 设置ip mac表&#xA;ip                      # 网卡与ip信息&#xA;    添加路由&#xA;        ip route add 10.146.81.0/24 via 10.146.81.29&#xA;    配置ip段互斥的宿主机转发&#xA;        服务器&#xA;            ip link set up dev tun0&#xA;            sysctl net.ipv4.ip_forward=1&#xA;            /etc/sysctl.d/30-ipforward.conf&#xA;                net.ipv4.ip_forward=1&#xA;                net.ipv6.conf.default.forwarding=1&#xA;                net.ipv6.conf.all.forwarding=1&#xA;        客户端&#xA;            ip addr add 192.168.123.201/24 dev eth0             # 要转发的网段&#xA;            ip link set up dev eth0&#xA;            ip route add default via 192.168.123.100 dev eth0   # 服务器ip&#xA;hostapd                 # 无线热点&#xA;    yum install hostapd&#xA;    vi /etc/hostapd/hostapd.conf&#xA;        wpa_passphrase=asdfasdf&#xA;        ssid=myflowers&#xA;        interface=p3p1&#xA;&#xA;    yum install dhcp&#xA;    vi /etc/dhcp/dhcpd.conf&#xA;        option domain-name-servers 192.168.0.1,8.8.8.8;         # 自己的dns提供商&#xA;        option routers 192.168.0.42;    # 本机ip&#xA;        option domain-name &amp;quot;mydhcp&amp;quot;;&#xA;        option domain-name-servers 192.168.0.1;&#xA;        log-facility local7;&#xA;        subnet 192.168.0.0 netmask 255.255.255.0 {&#xA;            range  192.168.0.160 192.168.0.170;&#xA;            option broadcast-address 192.168.0.255;&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;测试工具&#34;&gt;&#xA;  测试工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%8b%e8%af%95%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;ab                      # 压测&#xA;    ab -c 10 -n 100 https://www.baidu.com/&#xA;        # 10并发100次, url结尾要有/&#xA;mtr                     # myTrace, 合并ping与traceroute，默认发送ICMP包, 做持续探测, 避免节点波动的影响&#xA;traceroute              # 做一次探测, 默认UDP包, 发包TTL值逐渐增大&#xA;    -I                  # 使用ICMP包&#xA;ping&#xA;telnet&#xA;nslookup                    # 查域名ip&#xA;dig                     # 域名解析&#xA;nmblookup -A ip             # 查ip域名&#xA;nmap&#xA;    -sP ip/24           # 查看网内所有ip&#xA;    -p1-65535           # 扫描所有端口&#xA;    常用&#xA;        nmap 192.168.100.1/24 -p1-65535&#xA;nc                      # netcat, 功能全面&#xA;    -U a.sock           # 指定socket&#xA;    -v                  # 显示详情&#xA;    -z                  # 只测试连通&#xA;    -u                  # 使用udp&#xA;&#xA;    o-&amp;gt; 测试udp端口&#xA;    nc -vzu 127.0.0.1 1194&#xA;    o-&amp;gt; 文件传输&#xA;    nc -l -p 9999 | tar xf -&#xA;    tar cf - $(find . -name &amp;quot;*&amp;quot;) | nc -v 10.99.11.44 9999&#xA;rinetd                  # TCP端口转发&#xA;    rinetd.conf&#xA;        0.0.0.0 80 192.168.1.2 80    &#xA;    rinetd -c /etc/rinetd.conf&#xA;simplehttp&#xA;    python -m SimpleHTTPServer 8080&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;请求工具&#34;&gt;&#xA;  请求工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%b7%e6%b1%82%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;curl&#xA;    curl -v             # 详细头信息&#xA;    curl -H &amp;quot;Cookie: foo=bar; baz=val&amp;quot;          # 发送cookie&#xA;    curl -X post -k http://localhost:9090/a -H &amp;quot;Content-Type: text/plain&amp;quot; -d &#39;{&amp;quot;name&amp;quot;: &amp;quot;a&amp;quot;}&#39;&#xA;        # post请求&#xA;    curl -O http://104.223.142.166/isu80        # 抓文件&#xA;wget&#xA;    -i filelist.txt         # 下载一个文件中的所有url&#xA;    -x  # 强制创建目录&#xA;    -P  # 目录prefix&#xA;    -r  # 递归下载&#xA;    -l  # 最大递归深度, inf或0代表无限制&#xA;    -k  # 修改链接，指向本地文件&#xA;    -p  # 下载所有用于显示页面的资源, 如图片&#xA;    -L  # 只跟踪relative链接&#xA;    -N  # 只获取比本地新的文件&#xA;    -np # 不追踪父目录&#xA;    -m  # 缩写-N -r -l inf --no-remove-listing&#xA;    --no-remove-listing         # 不删除listing文件&#xA;&#xA;    常用&#xA;        爬网站&#xA;            wget -x -P curSite -r -l 100 -k -L -np http://nodeapi.ucdok.com/api/&#xA;            带cookie&#xA;                wget --post-data=&amp;quot;username=u1&amp;amp;password=asdf&amp;quot; --save-cookies=cookie --keep-session-cookies &amp;quot;http://www.abc.com/logging.php&amp;quot;&#xA;                wget -x -P curSite -r -l 1 -k -L -np --load-cookies=cookie --keep-session-cookies &amp;quot;https://www.abc.com/display/1&amp;quot;&#xA;ssh&#xA;    ssh 10.1.10.2 -L 9901:localhost:5901&#xA;        # 用ssh建tunnel访问内部端口&#xA;    ssh -t -L 5900:localhost:5900 remote_host &#39;x11vnc -localhost -display :0&#39;&#xA;        # 本机执行命令并端口映射&#xA;sshpass&#xA;    sshpass -p asdf ssh root@47.74.230.238&#xA;sshfs -o allow_other root@ip:~ /mnt                 # 挂载远程目录&#xA;scp a.txt root@ip:~&#xA;w3m                     # 命令行浏览器&#xA;vnc                     # 远程桌面&#xA;    Virtual Network Computing&#xA;    相关文章&#xA;        linux 自带远程桌面--VNC服务配置说明&#xA;    安装&#xA;        yum install vnc*&#xA;&#xA;        yum install *vnc-server*&#xA;    启动&#xA;        vncserver :1&#xA;    登录&#xA;        vncviewer        # fedora 下gnome自带的vncviewer名为:Remote Desktop Viewer&#xA;            输入192.168.0.62:1                      # 实际端口号为5901, 如果服务号为2则为5902&#xA;        或者浏览器java-plugin&#xA;            localhost:5801                          # 需要安装java&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;监控&#34;&gt;&#xA;  监控&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%91%e6%8e%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;iftop -n                # 流量监控&#xA;ntop                    # 流量监控, web界面&#xA;    # localhost:3000&#xA;    -W 3001&#xA;                        # Loss%丢包率, Snt每秒包数, Last最近一次延迟, Avg平均值, Best最小值, Worst最大值, StDev标准差&#xA;    -u                  # 使用udp包&#xA;    --no-dns            # 不对ip做域名反解析&#xA;    -4                  # 只用ipv4&#xA;    -6                  # 只用ipv6&#xA;    结果&#xA;        1,2,3,4 本地网络&#xA;        5,6 运营商骨干网络&#xA;        7,8,9,10 目标服务器本地网络&#xA;            8 链路负载均衡&#xA;tcpdump&#xA;    -v                          # verbose输出&#xA;    -vvv            # 最详细输出&#xA;    -n                          # 网络地址显示数字&#xA;    -nn                         # ip和端口显示&#xA;    -i                          # 指定网卡&#xA;    -c 100                      # 100条后退出&#xA;    -w file1                    # 保存到文件&#xA;    -r file1 tcp                # 从文件读取，指定tcp协议&#xA;    -G 5 -w /opt/capfile-%Y_%m%d_%H%M_%S        # 滚动日志&#xA;    greater 200                 # 报文字节大于200&#xA;    host 192.168.0.1            # 包含ip&#xA;    port 80                     # 包含端口&#xA;    port !80&#xA;    dst host 192.168.0.1        # 目标ip&#xA;    dst port 80                 # 目标端口&#xA;    src host&#xA;    src port&#xA;    net 192.168.0.1/32          # 包含网段&#xA;    udp/tcp/icmp/igmp/arp       # 指定协议&#xA;    ip                          # ip协议&#xA;    ip proto ospf               # 类型为ospf的ip包&#xA;    ip[9]=6                     # ip包头第10字节为6（tcp协议）&#xA;    ether multicast                             # 二层类型为多播&#xA;    ether src host 00:0c:29:9a:1f:4e            # 二层mac&#xA;    常用&#xA;        tcpdump -i eth0 -vnn \(src host 8.8.8.8 and port 80 \) or \(src host 10.10.10.10 and dst port 443\)&#xA;        tcpdump -n tcp port 8383 -i lo and src host 183.14.132.117&#xA;iotop                   # 实时监视io&#xA;    p                   # 显示pid&#xA;    o                   # 只显示活跃&#xA;iostat                  # 负载情况&#xA;lsof -i:8080            # 列出当前系统打开的文件，必须root运行才准确&#xA;    -i                  # 端口&#xA;    -P                  # 显示端口号而非名称&#xA;    -n                  # 显示ip而非域名&#xA;    -i -n -P            # 查看进程句柄数&#xA;nicstat                 # 网络流量统计&#xA;netstat&#xA;    -a                  # 显示所有&#xA;    -n                  # 显示数字，而不是别名&#xA;    -t                  # 仅显示tcp&#xA;    -u                  # 仅显示udp&#xA;    -p                  # 显示建立链接的程序名&#xA;    -l                  # 仅列出listen的服务&#xA;    -o                  # 显示timer, 如keepalive&#xA;    -antpu              # 端口&#xA;tapestat                # 磁带驱动器信息&#xA;ss                      # 端口，性能高&#xA;    -l                  # listening&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;防火墙&#34;&gt;&#xA;  防火墙&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%98%b2%e7%81%ab%e5%a2%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;getenforce              # 查看selinux状态&#xA;sestatus -v             # 查看selinux状态&#xA;setenforce 0            # 临时关闭selinux&#xA;    1                   # 启用&#xA;ufw                     # ubuntu, 简化防火墙&#xA;iptables [-t 表] -命令 匹配 操作&#xA;    参数&#xA;        -t                  # 要操作的匹配表&#xA;        命令&#xA;            -P                  # 策略, INPUT等&#xA;            -A                  # append, 添加&#xA;            -I 1                # 在第2条前添加&#xA;            -D 1                # delete, 删除&#xA;            -R 1                # 替换&#xA;&#xA;            -L                  # list 显示&#xA;            -n                  # 端口以数字显示&#xA;            -v                  # verbose, 显示更多信息&#xA;            -F                  # flush&#xA;            -X                  # 清除自定chain&#xA;            -Z                  # 清除统计数&#xA;        规则&#xA;            -p                  # 协议&#xA;            -i                  # 指定网卡流入&#xA;            -o                  # 指定网卡流出&#xA;            -s                  # 来源ip, !表示排除&#xA;            -d                  # 目标ip&#xA;            --sport             # 源端口&#xA;            --dport             # 目标端口&#xA;            -m                  # 使用模块, 会根据-p选择模块&#xA;        动作&#xA;            -j                  # 跳转&#xA;                ACCEPT&#xA;    四表(table)&#xA;        raw             # 跟踪&#xA;        mangle          # 标记&#xA;        nat             # 修改ip、port&#xA;        filter          # 过滤, 默认&#xA;    五链(chain)&#xA;        PREROUTING&#xA;        FORWORD         # INPUT前转发到POSTROUTING&#xA;        INPUT&#xA;        OUTPUT&#xA;        POSTROUTING &#xA;    策略(policy)&#xA;        ACCEPT          # 通过&#xA;        REJECT          # 拒绝，返回数据&#xA;            返回数据包&#xA;                ICMP port-unreachable&#xA;                ICMP echo-reply&#xA;                tcp-reset&#xA;            iptables -A  INPUT -p TCP --dport 22 -j REJECT --reject-with ICMP echo-reply&#xA;        DROP            # 丢弃&#xA;        REDIRECT        # 导向端口(PNAT)&#xA;            iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT--to-ports 8081&#xA;        MASQUERADE      # 改写来源ip为本机ip, 可指定目标端口范围&#xA;            iptables -t nat -A POSTROUTING -p TCP -j MASQUERADE --to-ports 21000-31000&#xA;        LOG             # 日志, 记在/var/log&#xA;            iptables -A INPUT -p tcp -j LOG --log-prefix &amp;quot;input packet&amp;quot;&#xA;        ULOG&#xA;        SNAT            # 改写源地址, 只适用POSTROUTING&#xA;            iptables -t nat -A POSTROUTING -p tcp-o eth0 -j SNAT --to-source 192.168.10.15-192.168.10.160:2100-3200&#xA;        DNAT            # 改写目标地址, 只适用POSTROUTING&#xA;            iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 --dport 80 -j DNAT --to-destination 192.168.10.1-192.168.10.10:80-100&#xA;        TOS&#xA;        MIRROR          # 对调源ip与目标ip后返回&#xA;        QUEUE           # 封包入队列待处理，实现功能如：计算联机费用&#xA;        RETURN          # 退出当前规则链, 返回主规则链&#xA;        TTL&#xA;        MARK            # 对包做标记数字&#xA;            iptables -t mangle -A PREROUTING -p tcp --dport 22 -j MARK --set-mark 22&#xA;    规则(rule)          # 自定义的条件&#xA;    配置文件&#xA;        /etc/sysconfig/iptables&#xA;        /usr/libexec/iptables/iptables.init&#xA;            save&#xA;        rules.v4        # 自定义配置&#xA;            *filter&#xA;            :INPUT ACCEPT [186:19951]&#xA;            :FORWARD ACCEPT [0:0]&#xA;            :OUTPUT ACCEPT [71:11164]&#xA;            -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT&#xA;            -A INPUT -p tcp -m tcp --dport 23 -j ACCEPT&#xA;            -A INPUT -p tcp -m tcp --dport 24 -j ACCEPT&#xA;            COMMIT&#xA;    命令&#xA;        systemctl enable iptables.service&#xA;        service iptables save&#xA;        service iptables restart&#xA;        iptables-restore &amp;lt; rules.v4&#xA;            # 导入配置&#xA;    案例&#xA;        关iptables&#xA;            service iptables stop&#xA;            chkconfig iptables off&#xA;        查看&#xA;            iptables -L -n -v --line-numbers&#xA;        查nat表&#xA;            iptables -t nat -L&#xA;        flush, 生效&#xA;            iptables -F&#xA;        service命令&#xA;            service iptables save&#xA;            service iptables stop&#xA;            service iptables start&#xA;            service iptables restart&#xA;        开机启动&#xA;            /etc/network/if-pre-up.d/iptables&#xA;                iptables-restore &amp;lt; rules.v4&#xA;&#xA;        插入规则&#xA;            iptables -I INPUT 2 -s 202.54.1.2 -j DROP&#xA;        删除规则&#xA;            iptables -D INPUT 4&#xA;        开放所有input/output&#xA;            iptables -P INPUT ACCEPT&#xA;            iptables -P OUTPUT ACCEPT&#xA;        开放input/output tcp 22&#xA;            iptables -A INPUT -p tcp --dport 22 -j ACCEPT&#xA;            iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT&#xA;        vpn转发&#xA;            iptables -t nat -A POSTROUTING -s 192.168.252.0/24 -j SNAT --to-source 10.171.83.146&#xA;        屏蔽私有地址&#xA;            iptables -A INPUT -i eth1 -s 192.168.0.0/24 -j DROP&#xA;            iptables -A INPUT -i eth1 -s 10.0.0.0/8 -j DROP&#xA;        屏蔽ip&#xA;            iptables -A INPUT -s 1.2.3.4 -j DROP&#xA;            iptables -A INPUT -s 192.168.0.0/24 -j DROP&#xA;            iptables -A OUTPUT -d 192.168.1.0/24 -j DROP&#xA;            iptables -A OUTPUT -o eth1 -d 192.168.1.0/24 -j DROP&#xA;        屏蔽端口&#xA;            iptables -A INPUT -p tcp -s 1.2.3.4 --dport 80 -j DROP&#xA;            iptables -A INPUT -i eth1 -p tcp -s 192.168.1.0/24 --dport 80 -j DROP&#xA;        记录并屏蔽&#xA;            iptables -A INPUT -i eth1 -s 10.0.0.0/8 -j LOG --log-prefix &amp;quot;IP_SPOOF A: &amp;quot;&#xA;            iptables -A INPUT -i eth1 -s 10.0.0.0/8 -j DROP&#xA;        mac屏蔽&#xA;            iptables -A INPUT -m mac --mac-source 00:0F:EA:91:04:08 -j DROP&#xA;            # *only accept traffic for TCP port # 8080 from mac 00:0F:EA:91:04:07 * ##&#xA;            iptables -A INPUT -p tcp --destination-port 22 -m mac --mac-source 00:0F:EA:91:04:07 -j ACCEPT&#xA;        屏蔽icmp&#xA;            iptables -A INPUT -p icmp --icmp-type echo-request -j DROP&#xA;            iptables -A INPUT -i eth1 -p icmp --icmp-type echo-request -j DROP&#xA;        开启范围端口&#xA;            iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 7000:7010 -j ACCEPT&#xA;        开启范围ip&#xA;            iptables -A INPUT -p tcp --destination-port 80 -m iprange --src-range 192.168.1.100-192.168.1.200 -j ACCEPT&#xA;        nat&#xA;            iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j SNAT --to 123.4.5.100&#xA;                # 改写来自192.168.1.0/24的包, 源ip为123.4.5.100&#xA;            iptables -t nat -A PREROUTING -s 192.168.1.0/24 -i eth1 -j DNAT --to 123.4.5.100&#xA;                # 改写来自192.168.1.0/24的包, 目标ip为123.4.5.100&#xA;            iptables -t nat -A POSTROUTING -s 172.27.0.0/16 -d 10.0.0.1 -p tcp --dport 80 -j SNAT --to-source MASQUERADE&#xA;                # 改写来自172.27.0.0/16去向10.0.0.1:80的tcp包, 源ip为本机ip&#xA;            iptables -t nat -A PREROUTING -d 192.168.1.1 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.1&#xA;                # 改写去向192.168.1.1:80的tcp包, 目标ip为10.0.0.1&#xA;&#xA;firewall&#xA;    systemctl start firewalld&#xA;&#xA;    o-&amp;gt; ftp&#xA;    firewall-cmd --zone=public --add-port=20/tcp --permanent&#xA;    firewall-cmd --zone=public --add-port=21/tcp --permanent&#xA;    firewall-cmd --permanent --add-port=1000-2000/tcp&#xA;    firewall-cmd --complete-reload&#xA;&#xA;    o-&amp;gt; 8080&#xA;    firewall-cmd --query-port=8080/tcp&#xA;        --add-port=8080/tcp --permanent --zone=public&#xA;        --reload&#xA;        --get_active-zones&#xA;        --list-all&#xA;        --set-default-zone=public&#xA;    o-&amp;gt;&#xA;    firewall-cmd --permanent --remove-port=8080/tcp&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;存储&#34;&gt;&#xA;  存储&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%98%e5%82%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;硬盘&#34;&gt;&#xA;  硬盘&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%a1%ac%e7%9b%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;fdisk -l&#xA;cfdisk&#xA;sfdisk&#xA;parted&#xA;mkfs&#xA;mkswap&#xA;&#xA;testdisk /dev/sdb1&#xA;e2fsck -a /dev/sdb1         # 修复ext2&#xA;ntfsfix -d -b /dev/sdb1     # 修复ntfs坏扇区和脏标记&#xA;fsck /dev/sda1              # 检查并修复&#xA;&#xA;udisks --detach 设备编号     # 移除磁盘&#xA;&#xA;mount  /dev/sdb1 /mnt&#xA;    -o acl                  # 打开acl功能&#xA;    -o loop x.iso           # 挂载文件&#xA;    -o iocharset=utf8       # 指定编码&#xA;    -t vfat                 # 指定类型&#xA;umount&#xA;    -n                      # 执行umount却不写入&#xA;    -l                      # lazy&#xA;    -f                      # force&#xA;&#xA;df -h                       # 已挂载分区列表&#xA;    -T                      # 查看分区类型&#xA;blktrace                    # 磁盘访问情况&#xA;lsblk                       # 查看挂载的分区&#xA;lvs&#xA;    LVM逻辑卷的创建流程如下：&#xA;        将一个磁盘或分区格式化为物理卷：pvcreate /dev/sdb1&#xA;        将物理卷添加到一个卷组中：vgcreate linuxcast-vg /dev/sdb1 /dev/sdb2&#xA;        基于卷组创建一个逻辑卷mylv：lvcreate -L 10G -n mylv  linuxcast-vg&#xA;        格式化逻辑卷：mkfs.ext4 /dev/linuxcast-vg/mylv&#xA;        挂载使用：mount /dev/linuxcast-vg/mylv  /mnt&#xA;    逻辑卷查看命令：&#xA;    pvdisplay&#xA;    pvs&#xA;    vgdisplay&#xA;    vgs&#xA;    lvdisplay&#xA;    lvs&#xA;    删除一个逻辑卷：&#xA;    lvremove /dev/linuxcast-vg/mylv&#xA;    删除一个卷组：&#xA;    vgremove linuxcast-vg&#xA;    删除一个物理卷：&#xA;    pvremove /dev/sda1&#xA;nfsiostat               # nfs驱动器信息&#xA;cifsiostat              # CIFS信息&#xA;growpart                # 磁盘热扩容&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;文件操作&#34;&gt;&#xA;  文件操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%87%e4%bb%b6%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;fuser                   # 查看文件被谁使用&#xA;    -u                  # 列出使用者用户名&#xA;    -uk                 # 终止文件的所有进程&#xA;    -n tcp 8080         # 列出端口的进程号&#xA;ldd /bin/ls             # 查看可执行文件动态引用模块&#xA;rename &#39;s/\.bak$//&#39; *.bak           # 重命名&#xA;rm -rf&#xA;touch&#xA;    -t 0712250000 file              # 修改文件时间戳(YYMMDDhhmm)&#xA;ls *[0-9]*&#xA;    -t                  # 时间排序&#xA;    -R                  # 递归显示文件&#xA;    -l                  # 详情&#xA;    -S                  # 按大小排列&#xA;    -r                  # reverse&#xA;    -h                  # 自动大小单位&#xA;    -F                  # 加后缀标识类型&#xA;    -Z                  # 显示文selinux状态&#xA;tree&#xA;mkdir&#xA;rmdir&#xA;cd&#xA;    ~&#xA;    -&#xA;cp&#xA;    -r                  # 递归&#xA;    -p                  # 带权限复制&#xA;    -d                  # 保留链接&#xA;    -a                  # -dpr&#xA;mv&#xA;whereis&#xA;which&#xA;find .&#xA;    maxdepth 1&#xA;    -name &amp;quot;*.go&amp;quot;&#xA;    -type f&#xA;    -atime +100         # 100天未使用过的执行文件&#xA;    -mtime -10          # 10天内创建或修改的文件&#xA;    -exec chmod +x      # 对找到的文件执行命令&#xA;    -xdev               # 忽略块设备&#xA;file                    # 探测文件类型&#xA;    file 可执行文件     # 可查看是否静态编译&#xA;ln&#xA;du -d 1 -h&#xA;    -s                  # 只返回汇总情况&#xA;    -k                  # 统一单位&#xA;tar xf&#xA;    cfzv x.tar.gz x     # 压缩&#xA;    xfzv x.tar.gz       # 解压&#xA;    --exclude=/proc&#xA;gzip x                  # 压缩&#xA;    -d x                # 解压&#xA;unzip&#xA;    常用&#xA;        unzip中转码&#xA;            unzip -P “$(echo 中文 | iconv -f utf-8 -t gbk)”&#xA;unzip-beta              # 解压并转码中文&#xA;diff        # 改变以匹配第二个文件&#xA;    diff -y a b&#xA;    diff dir1 dir2&#xA;&#xA;    diff -uN a b &amp;gt; b.patch&#xA;    patch -p0 &amp;lt; b.patch&#xA;    patch -RE -p0 &amp;lt; b.patch&#xA;&#xA;    diff -uNra a b &amp;gt; b.patch&#xA;    cd a&#xA;    patch -p1  &amp;lt; ../b.patch&#xA;    patch -RE -p1 &amp;lt; ../b.patch&#xA;rsync -av --exclude=.git --exclude=logs/* ./* 192.168.0.14:/data/app/ext-marketing/&#xA;vimdiff a b&#xA;&#xA;mucommander             # 跨平台文件管理软件&#xA;shred                   # 文件粉碎&#xA;rclone                  # 云存储同步&#xA;    config              # 配置向导&#xA;    ls [name]:          # 显示文件&#xA;    lsd [name]:         # 显示文件夹&#xA;    copy a [name]:a     # 上传&#xA;    cleanup             # 只保留最新版本&#xA;    sync                # 本地向远程同步&#xA;    mount               # 双向一致同步&#xA;        fusermount -u /path/to/local/mount&#xA;            # umount&#xA;rclone-browser          # rclone GUI&#xA;onedrive&#xA;    onedrive --resync&#xA;    常用命令&#xA;        systemctl --user enable onedrive&#xA;        systemctl --user start onedrive&#xA;        journalctl --user-unit onedrive -f&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;权限&#34;&gt;&#xA;  权限&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%83%e9%99%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;chmod ugo+rwx           # u拥有者, g群组, o其他人, +添加, -删除, r读、w写、x执行&#xA;    chmod a+rwx         # a指所有人&#xA;chattr +i file          # 改变属性&#xA;lsattr file&#xA;chown -R outrun:outrun .&#xA;chgrp -R outrun .&#xA;getfacl                 # 查看一个文件的ACL设置&#xA;setfacl [-bkndRLP] { -m|-M|-x|-X ... } file ...&#xA;    -b                  # 去掉所有acl设置&#xA;    -m u:sudo:rwx   filename    # 配置用户权限&#xA;    -m g:sudo:r-x  filename     # 配置组的权限&#xA;    -x u:user1 filename         # 删除一个ACL设置&#xA;    -d -m g:sudo:rwx            # 指定default&#xA;chcon                   # 修改文件安全上下文&#xA;    -R                  # 递归&#xA;    -t                  # type&#xA;    -u                  # user&#xA;    -r                  # role&#xA;    --reference         # 参照更新&#xA;    chcon -R -t mysqld_db_t /data&#xA;    chcon -R --reference=/var/lib/mysql /data&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;功能软件&#34;&gt;&#xA;  功能软件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8a%9f%e8%83%bd%e8%bd%af%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;包管理&#34;&gt;&#xA;  包管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8c%85%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;snap&#xA;    list                    # 列已安装&#xA;    info                    # 查看仓库所有版本&#xA;    find                    # 搜索&#xA;    install&#xA;    remove&#xA;    refresh                 # 更新&#xA;        refresh all&#xA;    revert                  # 还原到上个版本&#xA;        --revision          # 指定版本&#xA;    run                     # 运行命令&#xA;    start                   # 运行service&#xA;        --enable            # 开机启动&#xA;    stop                    # 停止service&#xA;    save                    # 存配置快照&#xA;    saved                   # 列出所有快照&#xA;rpm                         # 源 rpm fusion&#xA;    -i 安装&#xA;    -e 卸载&#xA;    -qa 查看安装的包名&#xA;    -ql 包名, 查看安装的文件&#xA;    -qc 包名, 查看软件的配置文件&#xA;pacman&#xA;    命令 pacman&amp;lt;操作&amp;gt; [选项] [目标]&#xA;        操作&#xA;            -Q                      # 查询&#xA;            -S                      # 安装&#xA;            -R                      # 删除&#xA;            -D                      # 数据库&#xA;            -F                      # 文件&#xA;        选项&#xA;        选项-S, -R, -U&#xA;            -s&#xA;        选项-S, -U&#xA;        选项-Q&#xA;            -s                      # 搜索&#xA;            -e                      # 明确指定的&#xA;            -n                      # 本地的&#xA;            -q                      # 静默&#xA;            -i                      # 详情, 两个i显示备份文件和修改状态, 显示依赖&#xA;            -l                      # 列出文件&#xA;            -o                      # 显示拥有此文件的包名&#xA;        选项-R&#xA;            -s                      # 递归&#xA;            -c                      # 级联依赖此包的包&#xA;            -n                      # 不记录备份信息&#xA;        选项-S&#xA;            -s                      # 搜索&#xA;            -y                      # 刷新, 两个y强制升级所有包数据库&#xA;            -q                      # 静默&#xA;            -u                      # 系统升级&#xA;            -c                      # 清理, 一个c清理未安装包, 两个c清理所有cache&#xA;        选项-D&#xA;        选项-F&#xA;        目标&#xA;&#xA;    常用&#xA;        -Qeq | pacman -S -                  # 重新安装所有包&#xA;        -S $(pacman -Qnq)                   # 重新安装所有包&#xA;        -Ss ^ibus-*                         # 通配search&#xA;        -S $(pacman -Ssq fcitx*)            # 通配安装&#xA;        -R $(pacman -Qsq fcitx)             # 通配删除&#xA;        -Rcns plasma                        # 删除plasma&#xA;        -Rns                                # 删依赖并删配置&#xA;        -Scc                                # 清除缓存&#xA;        -Qii zsh                            # 包信息&#xA;        -Ql zsh                             # 查看安装的文件&#xA;        -Qo /bin/zsh                        # 查看文件属于的包&#xA;        -Qdt                                # 查孤儿包 &#xA;&#xA;    源&#xA;        mirrors.163.com&#xA;apt&#xA;    源&#xA;        阿里云mirror: https://developer.aliyun.com/mirror&#xA;        ubuntu&#xA;            sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list &#xA;downgrade                               # 用于给pacman安装过后软件降级&#xA;yum&#xA;    list                                # 列出所有包&#xA;        updates                         # 列可更新的包&#xA;        installed                       # 列已安装&#xA;        extras                          # 已安装但不在yum repository的包&#xA;    search&#xA;    install&#xA;    remove&#xA;    info                                # 包详情&#xA;        updates&#xA;        installed&#xA;        extras&#xA;    provides                            # 包文件&#xA;    whatprovides &#39;bin/isstat&#39;           # 查看命令属性哪个包&#xA;    history&#xA;        list&#xA;        redo 序号                        # 重新做序号&#xA;        undo 序号                        # 恢复历史中执行的动作&#xA;    groups list                         # 查看安装的组&#xA;&#xA;&#xA;    设置代理&#xA;        /etc/yum.conf&#xA;        proxy=http://XXX.XXX.XXX.XXX：XXXX&#xA;        或&#xA;        proxy=FTP://XXX.XXX.XXX.XXX:XXXX&#xA;        proxy_username=你的用户名&#xA;        proxy_password=你的用户名的密码&#xA;    编译用包&#xA;        build-essential                     # yum中基本编译依赖包&#xA;        yum install make cmake apr* autoconf automake curl-devel gcc gcc-c++ zlib-devel openssl openssl-devel pcre-devel gd  kernel keyutils  patch  perl kernel-headers compat* mpfr cpp glibc libgomp libstdc++-devel ppl cloog-ppl keyutils-libs-devel libcom_err-devel libsepol-devel libselinux-devel krb5-devel zlib-devel libXpm* freetype libjpeg* libpng* php-common php-gd ncurses* libtool* libxml2 libxml2-devel patch freetype-devel ncurses-devel libmcrypt libtool flex pkgconfig libevent glib libgnomeui-devel&#xA;dpkg                        # 管理deb包程序&#xA;    -i                      # 安装&#xA;    -r                      # 删除&#xA;pkgfile                     # 查看命令所需的包&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;编译&#34;&gt;&#xA;  编译&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%96%e8%af%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;:() { :|:&amp;amp; };:              # fork bombmake&#xA;make&#xA;    注意&#xA;        缩进只能用tab&#xA;    命令&#xA;        make&#xA;        make install&#xA;        make glide&#xA;    条目里执行shell&#xA;        @echo $(shell $(SHELL_PATH))&#xA;&#xA;    o-&amp;gt;&#xA;    TESTS = test/*.js&#xA;    REPORTER = spec&#xA;    TIMEOUT = 10000&#xA;    MOCHA_OPTS =&#xA;&#xA;    test:&#xA;        @NODE_ENV=test ./node_modules/mocha/bin/mocha \&#xA;            --reporter $(REPORTER) \&#xA;            --timeout $(TIMEOUT) \&#xA;            $(MOCHA_OPTS)&#xA;            $(TESTS)&#xA;&#xA;    test-cov&#xA;        @$(MAKE) test MOCHA_OPTS=&#39;--require blanket&#39; REPORTER=html-cov &amp;gt; coverage.html&#xA;&#xA;    test-all: test test-cov&#xA;&#xA;    .PHONY: test&#xA;&#xA;    o-&amp;gt;&#xA;    TESTS = $(shell ls -S `find test -type f -name &amp;quot;*.js&amp;quot; -print`)&#xA;    TESTTIMEOUT = 5000&#xA;    MOCHA_OPTS =&#xA;    REPORTER = spec&#xA;&#xA;    install:&#xA;        @$PYTHON=`which python2.6` NODE_ENV=test npm install&#xA;&#xA;    test:&#xA;        @NODE_ENV=test ./node_modules/mocha/bin/mocha \&#xA;            --reporter $(REPORTER) \&#xA;            --timeout $(TIMEOUT) \&#xA;            $(MOCHA_OPTS) \&#xA;            $(TESTS)&#xA;&#xA;    test-cov:&#xA;        @$(MAKE) test REPORTER=dot&#xA;        @$(MAKE) test MOCHA_OPTS=&#39;--require blanket&#39; REPORTER=html-cov &amp;gt; coverage.html&#xA;        @$(MAKE) test MOCHA_OPTS=&#39;--require blanket&#39; REPORTER=travis-cov&#xA;&#xA;    reinstall: clean&#xA;        @$(MAKE) install&#xA;&#xA;    clean:&#xA;        @rm -rf ./node_modules&#xA;&#xA;    build:&#xA;        @./bin/combo views .&#xA;&#xA;    .PHONY: test test-cov clean install reinstall&#xA;cmake&#xA;makepkg                 # 创建软件包&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;调试&#34;&gt;&#xA;  调试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b0%83%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;perf                    # 性能调优&#xA;strace                  # 跟踪系统调用&#xA;itrace                  # linux系统编程中跟踪进程的库函数调用&#xA;    -S ./hello          # 跟踪所有系统调用&#xA;dtrace                  # 应用程序动态跟踪&#xA;bpftrace                # btrace2.0&#xA;gdb&#xA;SystemTap               # 内核动态探针&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;图形程序&#34;&gt;&#xA;  图形程序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%be%e5%bd%a2%e7%a8%8b%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;桌面&#34;&gt;&#xA;  桌面&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a1%8c%e9%9d%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kde&#xA;xfce&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;gnome&#34;&gt;&#xA;  gnome&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gnome&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;启动&#xA;    .xinitrc&#xA;        exec gnome-session&#xA;    startx&#xA;gnome3应用程序列表&#xA;    /usr/share/applications&#xA;取消ctrl+alt+down/up&#xA;    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-down &amp;quot;[&#39;&#39;]&amp;quot;&#xA;    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-up &amp;quot;[&#39;&#39;]&amp;quot;&#xA;gnome-shell&#xA;    alt + f2后输入lg&#xA;gnome terminate&#xA;    ctrl + shift + c/v                  # 复制/粘贴&#xA;    ctrl + shift + t/n                  # 打开新标签/新窗口&#xA;    ctrl + w 或 alt + backspace          # 删除最后的word&#xA;    ctrl + shift + w/q                  # 关闭当前term/所有term&#xA;    ctrl + shift + f/g/h                # 搜索/搜索下一个/搜索上一个&#xA;    ctrl + pageUp/pageDown              # 切换标签&#xA;    ctrl + shift + pageUp/pageDown      # 移动标签&#xA;    alt + 1/2/3/..../0                  # 切换到第1/2/3/....../10个标签&#xA;系统快捷键&#xA;    右键快捷键&#xA;        shift + f10&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;i3&#34;&gt;&#xA;  i3&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#i3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;启动&#xA;    .xinitrc&#xA;        exec i3&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;awesome&#34;&gt;&#xA;  awesome&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#awesome&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;启动&#xA;    .xinitrc&#xA;        exec /usr/bin/awesome &amp;gt;&amp;gt; ~/.cache/awesome/stdout 2&amp;gt;&amp;gt; ~/.cache/awesome/stderr&#xA;命令&#xA;    awesome&#xA;    awesome-client&#xA;配置&#xA;    配置模板&#xA;        /etc/xdg/awesome/rc.lua&#xA;    .config/awesome/rc.lua&#xA;        Variable definitions            # 可定义布局优先级&#xA;        Menu                            # 右键菜单&#xA;        Wibar                           # 生成screen, 设壁纸&#xA;        Mounse bindings                 # 鼠标键绑定函数&#xA;        Key bindings                    # 快捷键&#xA;        Rules                           # client规则, 如在哪个screen显示&#xA;        Signals                         # client启动信号触发动作&#xA;        自定义&#xA;    API&#xA;        文档地址&#xA;            https://awesomewm.org/apidoc/&#xA;        快捷键简写&#xA;            modkey                      # win键&#xA;            Mod1                        # alt&#xA;        gears                           # 工具组件&#xA;        wibox                           # wibar&#xA;            widget&#xA;            layout&#xA;        beautiful                       # theme&#xA;            init(gears.filesystem.get_configuration_dir() .. &amp;quot;/themes/default/theme.lua&amp;quot;)&#xA;                # 主题&#xA;            useless_gap = 5             # 窗口间隔&#xA;            theme.lua文件&#xA;                theme.wallpaper = &amp;quot;~/.config/awesome/themes/awesome-wallpaper.png&amp;quot;&#xA;                    # 背景&#xA;&#xA;        naughty&#xA;            notify({ preset = naughty.config.presets.critical, title = &amp;quot;Oops, there were errors during startup!&amp;quot;, text = awesome.startup_errors })&#xA;        menubar&#xA;            menu_gen&#xA;        hotkeys_popup&#xA;        awful&#xA;            layout&#xA;            tag({ &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;8&amp;quot;, &amp;quot;9&amp;quot; }, s, awful.layout.layouts[1])&#xA;            key({ modkey }, &amp;quot;F12&amp;quot;, function () awful.spawn{ &amp;quot;xlock&amp;quot; } end)&#xA;                # 快捷键&#xA;                awful.key({ &amp;quot;Mod1&amp;quot; }, &amp;quot;Escape&amp;quot;, function () awful.menu.menu_keys.down = { &amp;quot;Down&amp;quot;, &amp;quot;Alt_L&amp;quot; } awful.menu.clients({theme = { width = 250 }}, { keygrabber=true, coords={x=525, y=330} }) end),&#xA;            widget&#xA;            rules&#xA;            spawn(&amp;quot;firefox&amp;quot;, { tag = mouse.screen.selected_tag })&#xA;            util.spawn_with_shell(&amp;quot;~/.config/awesome/autorun.sh&amp;quot;)&#xA;                # 随桌面启动脚本&#xA;    autorun.sh&#xA;        #!/usr/bin/env bash&#xA;&#xA;        # nothing to use&#xA;        function run {&#xA;            if ! pgrep $1 ; then&#xA;                $@&amp;amp;&#xA;            fi&#xA;        }&#xA;&#xA;        if randr | grep -q &#39;eDP1 connected&#39; ; then&#xA;            run xrandr --output VIRTUAL1 --off --output eDP1 --mode 1920x1080 --pos 0x720 --rotate normal --output DP1 --off --output DP2-1 --mode 2560x1080 --pos 3360x720 --rotate normal --output DP2-2 --off --output DP2-3 --off --output HDMI2 --off --output HDMI1 --primary --mode 2560x1440 --pos 1920x0 --rotate left --output DP2 --off&#xA;        fi&#xA;&#xA;        run ibus-daemon -d -x&#xA;        run nm-applet&#xA;插件&#xA;    revelation          # 全局client&#xA;    shifty              # 动态tag&#xA;    naughty             # 通知&#xA;    vicious             # widgets&#xA;    obvious             # widgets&#xA;    bashets             # widgets&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;小程序&#34;&gt;&#xA;  小程序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b0%8f%e7%a8%8b%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;cmatrix                 # 终端黑客帝国&#xA;screenfetch&#xA;import                  # 截图&#xA;    import a.png        # 选取区域&#xA;    -pause 3 -frame a.png                       # 截窗口, 延迟3秒(为了选定)&#xA;xgamma -gamma .75       # 调整屏幕色值&#xA;display                 # 显示图片&#xA;    display *.png       # 幻灯片&#xA;    -delay 5            # 5百分之秒切换&#xA;&#xA;    快捷键&#xA;        空格            # 下一张&#xA;        退格            # 上一张&#xA;        h               # 水平翻转&#xA;        v               # 垂直翻转&#xA;        /               # 顺时针翻转90度&#xA;        \               # 逆时针旋转90度&#xA;        &amp;gt;               # 放大&#xA;        &amp;lt;               # 缩小&#xA;        f7              # 模糊&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;任务栏&#34;&gt;&#xA;  任务栏&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%bb%e5%8a%a1%e6%a0%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;nm-applet&#xA;    # 联网&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;输入法&#34;&gt;&#xA;  输入法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%be%93%e5%85%a5%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;fcitx&#xA;ibus&#xA;ibus-daemon -d -x -r        # ibus后台运行&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;模拟&#34;&gt;&#xA;  模拟&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a8%a1%e6%8b%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;wine&#xA;winetricks                  # 安装wine的各种依赖&#xA;cabextract                  # microsoft cabinet获取工具&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;资源管理&#34;&gt;&#xA;  资源管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b5%84%e6%ba%90%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;nautilus&#xA;    快捷键&#xA;        &amp;lt;Ctrl+L&amp;gt;            # 路径编辑&#xA;        &amp;lt;Ctrl+W&amp;gt;            # 关闭tab&#xA;        &amp;lt;Ctrl+Shift+W&amp;gt;      # 关闭所有tab&#xA;        &amp;lt;Ctrl+T&amp;gt;            # 新建tab&#xA;        &amp;lt;F9&amp;gt;                # 侧边栏&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Monitor</title>
      <link>https://ukeate.com/docs/tool/ops/monitor/</link>
      <pubDate>Thu, 11 Oct 2018 18:47:57 +0800</pubDate>
      <guid>https://ukeate.com/docs/tool/ops/monitor/</guid>
      <description>&lt;h1 id=&#34;基础&#34;&gt;&#xA;  基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;监控的方式&#xA;    主动、被动、旁路（舆情）&#xA;监控类型&#xA;    服务端监控、客户端监控&#xA;目标&#xA;    全、块、准&#xA;指标&#xA;    请求量、成功率、耗时    &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;统计&#34;&gt;&#xA;  统计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%9f%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;指标&#xA;    访问、访客&#xA;    停留时长&#xA;    跳出率&#xA;    退出率&#xA;    转化率&#xA;    参与度&#xA;显示方式&#xA;    选时间段&#xA;        时序数据表&#xA;        max、min、avg&#xA;埋点&#xA;    通过可视化工具配置，非硬编码&#xA;第三方&#xA;    友盟&#xA;    百度移动&#xA;    魔方&#xA;    App Annie&#xA;    talking data&#xA;    神策数据&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;物理机&#34;&gt;&#xA;  物理机&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%89%a9%e7%90%86%e6%9c%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;load-average&#34;&gt;&#xA;  Load Average&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#load-average&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    数字n表示n倍&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;cpu&#34;&gt;&#xA;  cpu&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cpu&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Usage: 100%&#xA;    system&#xA;    user&#xA;    IO wait&#xA;Saturation: 1.0core&#xA;Max Core Usage: 1.0core&#xA;Interrupts and Context Switches: 10k&#xA;Processes: 10ops&#xA;    create(Forks)&#xA;    Runnable&#xA;    Blocked&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;mem&#34;&gt;&#xA;  mem&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mem&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Physical Memory: RAM(Random-Access Memory)存储器&#xA;    used&#xA;    free&#xA;    buffers&#xA;Virtual Memory&#xA;    介绍&#xA;        映射到RAM或Disk&#xA;    used&#xA;    available&#xA;Swap Space&#xA;    used&#xA;    free&#xA;Swap Activity&#xA;    swap in(read)&#xA;    swap out(write)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;disk&#34;&gt;&#xA;  disk&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#disk&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;space&#xA;    增长趋势&#xA;I/O Activity&#xA;    read(page in)&#xA;    write(page out)&#xA;File Descriptors: 1Milion&#xA;    limit&#xA;    allocated&#xA;I/O Latency: 5ms&#xA;    write&#xA;    read&#xA;I/O Load: 3&#xA;    write&#xA;    read&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;network&#34;&gt;&#xA;  network&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#network&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;traffic: MB/s&#xA;    inbound&#xA;    outbound&#xA;Utillization Hourly: GB&#xA;    sent&#xA;    received&#xA;Local Network Errors: 0ops&#xA;    transmit drop&#xA;    receive drop&#xA;    transmit errors&#xA;TCP Retransmission&#xA;    segments retransmitted: 0ops&#xA;    retransmit ratio: 0%&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;应用监控&#34;&gt;&#xA;  应用监控&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8%e7%9b%91%e6%8e%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;Prometheus&#xA;    # 监控, go实现&#xA;Grafana&#xA;    # 监控&#xA;Zabbix&#xA;    # 分布式监控&#xA;Nagios&#xA;    # 监控&#xA;Ganglia&#xA;Zenoss&#xA;Open-falcon&#xA;emq&#xA;    # mqtt broker, erlang开发, 管理控制台&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;apm&#34;&gt;&#xA;  APM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#apm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Application Performance Management&#xA;SkyWalking&#xA;CAT&#xA;Jaeger&#xA;Pinpoint&#xA;Zipkin&#xA;Dapper&#xA;    # C#&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;mysql&#34;&gt;&#xA;  Mysql&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;总览&#xA;    Services: 38&#xA;    Min MySQL Uptime: 20 hours&#xA;    Max MySQL Uptime: 2.4 years&#xA;    Total Current QPS: 3.4k ops&#xA;    Total InnoDB Buffer Pool Size: 431GiB&#xA;    Top Service Used Connections: 800&#xA;    Top Service Used Connections: 80%&#xA;    Top Service Client Threads Connected: 60%&#xA;    Top Service Active Client Threads: 99%&#xA;    Top Service Threads Cached: 100%&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;单节点&#34;&gt;&#xA;  单节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%95%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;总计 &#xA;    Uptime: 29 weeks&#xA;    Version: 5.7.26&#xA;    Current QPS: 32&#xA;    InnoDB Buffer Pool Size: 3GiB&#xA;    Buffer Pool Size of Total RAM: 10%&#xA;Connections&#xA;    Connections&#xA;        Max Connections&#xA;        Max Used Connections&#xA;        Connections&#xA;    Aborted Connections&#xA;        Aborted Connects(attempts): 0 ops&#xA;        Aborted Clients(timeout): 0 ops&#xA;Client Threads&#xA;    Clients Threads Activity&#xA;        Peak Threads Connected: 22&#xA;        Peak Threads Running: 2&#xA;    Thread Cache&#xA;        Thread Cache Size&#xA;        Threads Cached&#xA;        Threads Created&#xA;Temporary Objects &amp;amp; Slow Queries&#xA;    Temporary Objects&#xA;        Created Tmp Tables: 5&#xA;        Created Tmp Disk Tables: 0.3&#xA;        Created Tmp Files: 0&#xA;    Slow Queries: 0 ops&#xA;Select Types &amp;amp; Sorts&#xA;    Select Types&#xA;        Select Scan: 14 ops&#xA;        Select Range: 4 ops&#xA;    Sorts&#xA;        Sort Rows: 1 ops&#xA;        Sort Scan: 0 ops&#xA;        Sort Range: 0 ops&#xA;Table Locks &amp;amp; Questions&#xA;    Table Locks Immediate: 0.6 ops&#xA;    Table Locks Waited: 0 ops&#xA;Questions: 32&#xA;Network&#xA;    Network Traffic&#xA;        Outbound: 70 KBs&#xA;        Inbound: 15 KBs&#xA;    Newtwork Usage Hourly&#xA;        Sent: 240 MiB&#xA;        Received: 52 MiB&#xA;Memory&#xA;    System Memory: 31 GiB&#xA;    InnoDB Buffer Pool Data: 2 GiB&#xA;    InnoDB Log Buffer Size: 32 MiB&#xA;    Key Buffer Size: 8 MiB&#xA;    Query Cache Size: 1 MiB&#xA;Command, Handlers, Processes&#xA;    Top Command Counters&#xA;        select: 25&#xA;        set option: 4&#xA;        rollback: 0.6&#xA;        commit: 28&#xA;        stmt_prepare: 28&#xA;        stmt_execute: 28&#xA;        stmt_close: 28&#xA;        begin: 28&#xA;        show variables: 0.2&#xA;        alter_table: 0&#xA;        delete: 0.2&#xA;        insert: 3&#xA;        replace: 0&#xA;        update: 40&#xA;    Top Command Counters Hourly: 100k&#xA;    Handlers&#xA;        read_md_next: 800ops&#xA;        write: 150ops&#xA;        read_key: 100ops&#xA;        read_next: 100ops&#xA;        external_lock: 60ops&#xA;        read_first: 13ops&#xA;        update: 2ops&#xA;        delete: 1ops&#xA;        read_prev: 0ops&#xA;        read_md: 0ops&#xA;    Transaction Handlers&#xA;        commit: 25ops&#xA;        rollback: 0.6&#xA;    Process States&#xA;        idle: 20&#xA;        other: 1&#xA;        executing: 1&#xA;        sending data: 1&#xA;        statistics: 0&#xA;        preparing: 0&#xA;        init: 0&#xA;Query Cache&#xA;    Query Cache Memory&#xA;        query cache size: 1 MiB&#xA;        free memory: 1 MiB&#xA;    Query Cache Activity&#xA;        not cached: 25&#xA;        queries in cache: 0&#xA;        prunes: 0&#xA;Files and Tables&#xA;    File Openings: 0.2&#xA;    Open Files: 65k&#xA;Table Openings&#xA;    Open Cache Status&#xA;        Hits: 40ops&#xA;        Misses due to Overflows: 17&#xA;        Misses: 16&#xA;    Open Tables&#xA;        Table Open Cache: 2k&#xA;        Open Tables: 2k&#xA;Table Definition Cache&#xA;    Table Definition Cache Size: 1k&#xA;    Open Table Definitions: 700&#xA;    Opened Table Definitions: 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;node-summary&#34;&gt;&#xA;  Node Summary&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#node-summary&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;总计&#xA;    Node Name&#xA;    Uptime: 1.4 years&#xA;    Load Average: 0.6&#xA;    RAM: 32GiB&#xA;    Memory Available: 63%&#xA;    Virtual Memory: 48GiB&#xA;    Disk Space: 2.3TiB&#xA;    Min Space Available: 26%&#xA;CPU Usage&#xA;    iowait: 28%&#xA;    user: 10%&#xA;    system: 2%&#xA;CPU Saturation and Max Core Usage&#xA;    Normalized CPU Load: 0.8&#xA;    Max Cpu Core Utilization: 30%&#xA;Disk I/O and Swap Activity&#xA;    Disk Writes(page out): 30 MBs&#xA;    Disk Reads(page in): 30 MBs&#xA;    Swap Out(writes): 0&#xA;Network Traffic&#xA;    Outbound: 3MBs&#xA;    Inbound: 330 kBs&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;innodb&#34;&gt;&#xA;  InnoDB&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#innodb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;总计&#xA;    Buffer Pool Size: 16GiB&#xA;    Buffer Pool Size of Total RAM: 52%&#xA;    Total Redo Log Space: 900 MiB&#xA;    Max Log Space Used&#xA;    Max Transaction History Length: 300k&#xA;    Data Bandwidth: 23MBs&#xA;    Fsync Rate: 40ops&#xA;    Row Lock Blocking: 0.02%&#xA;Activity&#xA;    Row Reads: 20k&#xA;    Row Writes: 100&#xA;    Read-Only Transactions: 0&#xA;    Read-Write Transactions: 0&#xA;    Transactions Information(RW): 0&#xA;    Misc Transactions Information: 0&#xA;Storage Summary&#xA;    Tables: 1014&#xA;    Data Buffer Pool Fit: 2%&#xA;    Avg Row Size: 900B&#xA;    Index Size Per Row: 700B&#xA;    Space Allocated: 900GiB&#xA;    Space Used: 900 GiB&#xA;    Data Length: 500 GiB&#xA;    Index Length: 400 GiB&#xA;    Estimated Rows: 600 Mil&#xA;    Indexing Overhead: 80%&#xA;    Free Space Percent: 0.4%&#xA;    Free: 4GiB&#xA;Disk IO&#xA;    总计&#xA;        InnoDB Page Size: 16 KiB&#xA;        Avg Data Read Rq Size: 16 KiB&#xA;        Avg Data Write Rq Size: 20KiB&#xA;        Avg Log Write Rq Size: 4 KiB&#xA;        Data Written Per Fsync: 70 KiB&#xA;        Log Written Per Fsync: 20 KiB&#xA;        Data Read Per Row Read: 27B&#xA;        Data Written Per Row Written: 66 KiB&#xA;        Auto Extend Increment: 64MiB&#xA;        Double Write: ON&#xA;        Fast Shutdown: OFF&#xA;        Open Files: 2k&#xA;        File Use: 100%&#xA;    InnoDB Data I/O&#xA;        Data Reads: 37 ops&#xA;        Data Writes: 25 ops&#xA;    InnoDB Data Bandwidth&#xA;        Data Read: 10 MBs&#xA;        Data Written: 10 MBs&#xA;    InnoDB Log IO&#xA;        Log Written: 40 kBs&#xA;        Log Writes: 4 ops&#xA;    InnoDB FSyncs&#xA;        Data Fsyncs: 7 ops&#xA;        Log Fsyncs: 2 ops&#xA;    InnoDB Pending IO&#xA;        Pending Data Reads: 0&#xA;        Pending Data Writes: 0&#xA;        Pending Log Writes: 0&#xA;    InnoDB Pending Fsyncs: 0&#xA;IO Objects&#xA;    Targets Bandwidth&#xA;    Targets Load&#xA;    Targets Read&#xA;    Targets Read Load&#xA;    Targets Write&#xA;    Targets Write Load&#xA;    Targets Read Latency&#xA;    IO Targtes Write Latency&#xA;    Reads by Page Type&#xA;    Writes by Page Type&#xA;Buffer Pool&#xA;    总计&#xA;        Buffer Pool Size: 2GiB&#xA;        Buffer Pool Size of Total RAM&#xA;        NUMA Interleave&#xA;        Buffer Pool Activity: 215 ops&#xA;        BP Data&#xA;        BP Data Dirty&#xA;        BP Miss Ratio: 0.32%&#xA;        BP Write Buffering: 4&#xA;        Pool Chunk Size: 128 MiB&#xA;        Buffer Pool Instances: 8&#xA;    Buffer Pool Pages&#xA;        data: 120k&#xA;        free: 8k&#xA;        misc: 2k&#xA;    Buffer Pool Data&#xA;        data total: 2GiB&#xA;        Estimated Dirty Data Limit: 1GiB&#xA;        Data Dirty: 5MiB&#xA;    Buffer Pool Page Activity: &#xA;        Pages Read: 40 ops&#xA;        Pages Written: 20 ops&#xA;        Pages Created: 3 ops&#xA;    Buffer Pool Requests&#xA;        read requests: 10k ops&#xA;        wite requests: 200 ops&#xA;    Read-Ahead&#xA;        Pages Fetched by Linear Read Ahead: 3ops&#xA;        Paged Fetched by Read Ahead but Never Accessed: 0.01 ops&#xA;        Paged Fetched by Random Read Ahead: 0ops&#xA;    Buffer Pool LRU Sub-Chain Churn&#xA;Buffer Pool - Replacement Management&#xA;Checkpointing and Flushing&#xA;Logging&#xA;Locking&#xA;Undo Space and Purging&#xA;Page Operations&#xA;Adaptive Hash Index&#xA;Change Buffer&#xA;Contention&#xA;Misc&#xA;Online Operations(MariaDB)&#xA;    Defragmentation&#xA;    Online DDL&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;&#xA;  Overview&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#overview&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;I/O Thread Running&#xA;SQL Thread Running&#xA;Read Only&#xA;Connections&#xA;    Service Used Connections: 750&#xA;    Service Aborted Connections: 15&#xA;Threads&#xA;    Service Client Threads Connected: 500&#xA;    Service Active Client Threads: 25&#xA;    Service Thread Cached: 55&#xA;Queries &amp;amp; Questions&#xA;    总计&#xA;        Top Service Queries: 9.3k ops&#xA;        Top Service Questions: 3k ops&#xA;        Top InnoDB I/O Data Reads: 99.9%&#xA;        Top InnoDB I/O Data Writes: 100%&#xA;        Top Data Fsyncs: 50%&#xA;    Top Service Queries: 2.5k&#xA;    Top Service Questions: 0.5k&#xA;InnoDB I/O&#xA;    Top Service Data Reads: 2k rps&#xA;    Top Service Data Writes: 1.5k wps&#xA;    Top Service Data Fsyncs: 100 ops&#xA;Temporary Objects&#xA;    Service Temporary Objects: 150&#xA;    Top Service Selects&#xA;Sorts&#xA;    Top Service Sorts: 50k&#xA;Locks&#xA;    Top Service Table Locks: 3 ops&#xA;Network&#xA;    总计&#xA;        Top Service Incoming Network Traffic: 10 MBs&#xA;        Top Service Outgoing Network Traffic: 30 MBs&#xA;    Service Incoming Network Traffic: 2 MBs&#xA;    Service Outgoing Network Traffic: 5 MBs&#xA;Query Cache&#xA;    总计 &#xA;        Top Service Used Query Cache: 99%&#xA;    Service Query Cache Size: 100 MiB&#xA;Files&#xA;    总计&#xA;        Top Percentage of File Openings to Opened Files: 100%&#xA;        Top Percentage of Opened Files to the Limit: 0.25%&#xA;    Service File Openings: 250&#xA;    Service Opened Files: 160&#xA;Table Openings&#xA;    总计&#xA;        Top Open Cache Miss Ratio: 85%&#xA;    Lowest Service Open Cache Hit Ratio: 60%&#xA;Open and Cached Table Definitions&#xA;    总计 &#xA;        Min Service Opened Table Definitions: 0&#xA;        Top Service Opened Table Definitions: 230 ops&#xA;        Top Service Open Table Definitions 1.5k ops&#xA;        Top Open Table Definitions to Definition Cache: 100%&#xA;    Service Table Definition Cache: 1.5 KiB&#xA;    Service Opened Table Definitions: 210 ops&#xA;    Service Open Table Definitions: 1.4k&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;主从复制&#34;&gt;&#xA;  主从复制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%bb%e4%bb%8e%e5%a4%8d%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Replication Delay:  10&#xA;Binlogs Size:  10GiB&#xA;Binlog Data Written Hourly&#xA;Binlogs Count: 30&#xA;Binlog Cache Use Hourly: 300k&#xA;Relay Log Space: 300MiB&#xA;Relay Log Written Hourly&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;oracle&#34;&gt;&#xA;  Oracle&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#oracle&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;状态: alive&#xA;活动会话(user)&#xA;进程计数&#xA;执行计数、提交计数、回滚计数&#xA;等待时间&#xA;    并发等待: 200ms&#xA;    提交等待: 50ms&#xA;    应用等待: 50ms&#xA;    网络等待: 10ms&#xA;    系统I/O等待: 100ms&#xA;    用户I/O等待: 1s&#xA;    组态等待: 2ms&#xA;    scheduler等待: 500ms&#xA;表空间&#xA;    表空间类型：持久、临时、重做&#xA;    使用率&#xA;    剩余空间: 100GB&#xA;资源利用率&#xA;    branches&#xA;    cmtcallbk&#xA;    dml_locks&#xA;    enqueue_locks&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;postgresql&#34;&gt;&#xA;  PostgreSQL&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#postgresql&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;总览&#xA;    services个数&#xA;    Active Connections&#xA;    Total Disk-Page Buffers: 32MiB&#xA;    Total Memory Size for Each Sort: 16MiB&#xA;    Total Shared Buffers: 128GiB&#xA;    Services Autovacuum: 100%&#xA;Connections&#xA;    Top5 Service Connections: 600&#xA;    Top5 Service Active Connections: 5&#xA;    Service Idle Connections&#xA;    Service Active Connections&#xA;Autovacuum&#xA;    Service Value: Yes&#xA;Tuples&#xA;    总计&#xA;        Total: 170M ops&#xA;        Max Fetched: 6M ops&#xA;        Max Returned: 6M ops&#xA;        Max Inserted: 485 ops&#xA;        Max Updated: 560 ops&#xA;        Max Deleted: 371 ops&#xA;    Service Fetched Tuples Rate: 2M ops&#xA;    Service Returned Tuples Rate: 2M ops&#xA;    Service Inserted Tuples Rate: 100 ops&#xA;    Service Updated Tuples Rate: 100 ops&#xA;    Service Deleted Tuples Rate: 50 ops&#xA;Transactions&#xA;    总计&#xA;        Total: 7.5k ops&#xA;        Max Commits: 270 ops&#xA;        Max Rollback: 0.2 ops&#xA;        Max Duration: 55 s&#xA;    Service Commits: 100 ops&#xA;    Service Rollbacks: 0.05 ops&#xA;    Service Duration of Active Transactions: 850 ms&#xA;    Service Duration of Other Transactions: 760 ms&#xA;Temp Files&#xA;    总计&#xA;        Max Number of Temp Files: 17k&#xA;        Max Size of Temp Files: 178GiB&#xA;    Service Numbers: 17k&#xA;    Service Size: 178GiB&#xA;Conflicts &amp;amp; Locks&#xA;    总计&#xA;        Total Locks: 6.5k&#xA;        Total Deadlocks: 0&#xA;        Total Conflicts: 0&#xA;    Service Locks: 100&#xA;    Service Deadlocks: 0&#xA;    Service Conflicts: 0&#xA;Cache Hit&#xA;    总计&#xA;        Min Cache Hit Ratio: 97%&#xA;        Max Cache Hit Ratio: 100%&#xA;    Service Lowest Cache Hit Ratio: 100%&#xA;Canceled Queries&#xA;    Service Canceled Queries: 0&#xA;Blocks Operations&#xA;    总计&#xA;        Total Blocks Operations: 0 ops&#xA;        Max Blocks Writes: 0 ops&#xA;        Max Blocks Reads: 0 ops&#xA;    Servcie Blocks Reads: 0 ops&#xA;    Service Blocks Writes: 0 ops &#xA;Buffers Operations&#xA;    总计&#xA;        Max Allocaetd Bufferes: 38&#xA;    Service Allocated Buffers: 10 ops&#xA;    Service Fsync Calls by a Backend: 0 ops&#xA;    Service Written Directly by a Backend: 5 wps&#xA;    Service Written by the Background Writer: 0 wps&#xA;    Service Written During Checkpoints: 50 wps&#xA;Checkpoint Stats&#xA;    总计&#xA;        Total Written Files to Disk: 140k&#xA;        Total Files Synchronization to Disk: 27&#xA;    Service Files Synchronization to Disk: 0.1 ops&#xA;    Service Written Files to Disk: 400 wps&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>VIM</title>
      <link>https://ukeate.com/docs/tool/develop/vim/</link>
      <pubDate>Thu, 11 Oct 2018 18:31:16 +0800</pubDate>
      <guid>https://ukeate.com/docs/tool/develop/vim/</guid>
      <description>&lt;h1 id=&#34;编译&#34;&gt;&#xA;  编译&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%96%e8%af%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;--with-features=tiny                # 只包含最基本功能。small, normal, big, huge, :h feature-list查看&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;命令&#34;&gt;&#xA;  命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;vim -u NONE -N                      # -u NONE 不加载配置文件和插件，并进入vi兼容模式&#xA;    -u code/essential.vim           # 加载指定配置文件&#xA;    -N set nocompatible             # 不进入vi兼容模式&#xA;    --version                       # 可查看特性&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;mode&#34;&gt;&#xA;  mode&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mode&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;普通模式&#xA;插入模式&#xA;可视模式&#xA;    v/V                             # 面向字/面向行 可视模式&#xA;    &amp;lt;C - v&amp;gt;                         # 面向块 可视模式&#xA;    gv                              # 重选上次选区&#xA;    o                               # 切换到选区的开头, 再按切换回尾端　&#xA;替换模式&#xA;    R&#xA;命令行模式(Ex命令)&#xA;    :                               # 可视模式中选定范围，切换到命令行时，自动输入range&#39;&amp;lt;,&#39;&amp;gt;代表选中区&#xA;操作符待决模式                         # operator 与 motion之间的空闲时期&#xA;                                    # 两个字符的operator, 字符间的空闲时期不是该模式，是命名空间，是普通模式的扩充&#xA;                                    # 有了这个模式，能创建自定义映射项来激活或终结操作符待决模式，就可以自定义operator和motion&#xA;选择模式                              # 类似windows中选中&#xA;    &amp;lt;C - g&amp;gt;在可视和选择模式切换&#xA;历史&#xA;    q:                              # 命令历史&#xA;    q/                              # 搜索历史&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;operate&#34;&gt;&#xA;  operate&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#operate&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;思想&#xA;    {operator}{motion}&#xA;    {operator}{text-objects}&#xA;shortcut key&#xA;    ctrl + c                        # 同Esc&#xA;motions&#xA;    .                               # 重复前一次修改, 目标做到一键移动，一键执行。修改是指: 一个normal模式下的按键, 插入内容, &amp;lt;ESC&amp;gt;; 或一组normal模式下按键&#xA;    K                               # 当前单词的:h 手册&#xA;    ga                              # 当前字符的unicode码&#xA;Ex command                          # 可视模式下选中行, : 时前面有&#39;&amp;lt;,&#39;&amp;gt; 表示对选中的行执行操作&#xA;    :h e 或 :help e                 # 查看e的帮助&#xA;        vimtutor 查看教程&#xA;        operator 查看operator&#xA;        map-operator 查看自定义operator&#xA;        omap-info 查看自定义motion&#xA;        digraphs-default&#xA;        digraphs&#xA;        digraphs-table 查看二合字符表&#xA;        ex-cmd-index 查看所有Ex命令&#xA;        vi-differences vim 相对vi的特性&#xA;    :version                        # 查看版本和支持的功能&#xA;    :! command                      # 执行某shell命令(CR返回)&#xA;        !! 执行前一个命令&#xA;        r!command 执行结果插入当前位置&#xA;        w!command 当前文件作为输入执行&#xA;    :cd directory                   # 修改工作目录&#xA;    :sh                             # 跳到shell, 再执行exit返回&#xA;    :map bbc ia                     # 定义命令序列ia的别名为bbc&#xA;    :pwd                            # 显示当前目录&#xA;    :normal A;                      # 执行普通模式命令A;, 添加分号到行尾&#xA;    系统命令&#xA;        :grep t * # 在当前所有文件中匹配t, 自动加-n参数(显示行号)&#xA;        :ls&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;locate-oper&#34;&gt;&#xA;  locate oper&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#locate-oper&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;motion&#xA;    ^/$/0/&amp;lt;home&amp;gt;/g_/h/l/j/k/w/W/e/E/b/B/ge/gE/gg/G/[[/]]/(/)/{/}/nH/M/nL/点鼠标&#xA;        # 移动motion&#xA;        ge同b, 停在单词尾部&#xA;        &amp;lt;home&amp;gt;同0, 到行开始, ^则到本行第一个字符&#xA;        gg同[[，G同]]，10G跳到第10行&#xA;        fx 移动到下一个x, F反向查找, tx 移动到x的前一个字符&#xA;&#xA;        nG 跳到第n行&#xA;    f/F/t/T                         # 行搜索motion         重复查找(以相反方向重复搜索)&#xA;    ;                               # 重复移动上次f/F/t/T的字符&#xA;    ,                               # 撤销上次f/F/t/T移动&#xA;    *                               # 查找当前词&#xA;    nzz/nz-                         # 跳到指定行, 显示在屏幕中间/底部&#xA;        zz 当前屏幕到中间&#xA;    可视模式&#xA;        $                           # 块可视模式中，表示所有行尾&#xA;        i/a                         # 块可视模式中有不同含义&#xA;operator&#xA;    3G                              # 跳到第3行&#xA;    /text　　                        # 查找text，按n健查找下一个，按N健查找前一个。&#xA;    ?text　　                        # 查找text，反向查找，按n健查找下一个，按N健查找前一个。&#xA;    *或#                            # # *相当于/，#相当于?&#xA;        g* 搜索子串&#xA;        gd  同* 但跳到第一个匹配序列&#xA;    %                               # 搜索对应括号&#xA;&#xA;    o-&amp;gt; marks&#xA;    ``                              # 跳回&#xA;        `&amp;quot; 最后编辑的位置&#xA;        `[ 最后修改的开始位置&#xA;        `] 最后修改的结束位置&#xA;        &#39;. `. 跳到上次编辑位置&#xA;    &#39;&#39;                              # 跳回到第一个非空白字符&#xA;    marks                           # 显示系统全部书签&#xA;    ma                              # mark当前光标位置为a，小写字母不同文件标记不同行, 大写字母全局标记，但webstorm中ideaVim不行&#xA;    `a                              # 跳到a的位置&#xA;Ex command&#xA;    :10                             # 跳到第10行, 同10G, 0位于第一行上方&#xA;    :jumps                          # 输出能跳往的位置列表，可跳转多个文件&#xA;    :$                              # 文件结尾&#xA;    :.                              # 当前位置&#xA;    :%                              # 文件中的所有行&#xA;    :&#39;&amp;lt;                             # 选中区开始&#xA;    :&#39;&amp;gt;                             # 选中区结尾&#xA;    :&#39;m                             # 位置标记为m的行&#xA;    :/&amp;lt;html&amp;gt;/,/&amp;lt;\html&amp;gt;/             # 模式匹配范围&#xA;    : 1+1, 5-1                      # 开始向下偏移一行，结尾向上偏移一行&#xA;    :vim[grep] abc test             # 在test文件中grep匹配abc&#xA;shortcut key&#xA;    &amp;lt;c - e&amp;gt;/y                       # 向下/上滚动一行&#xA;    &amp;lt;c - d&amp;gt;/u                       # 向下/上滚动半屏&#xA;    &amp;lt;c - f&amp;gt;/b                       # 向下/上滚动一屏&#xA;    &amp;lt;c - i&amp;gt;/o                       # 到下个/上个跳动过的位置&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;edit-oper&#34;&gt;&#xA;  edit oper&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#edit-oper&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;shortcut key&#xA;    &amp;lt;C - r&amp;gt;                         # 撤销的撤销&#xA;    &amp;lt;C - a&amp;gt;/x                       # 数字增加/减少1, 对0开关数字进行八进制操作, 0x进行十进制操作。可以设置nrformats改变&#xA;    插入模式/命令模式&#xA;        &amp;lt;C - h&amp;gt;                     # 删除前一个字符&#xA;        &amp;lt;C - w&amp;gt;                     # 命令模式可用，删除前一个单词&#xA;        &amp;lt;C - u&amp;gt;                     # 命令模式可用，删至行首&#xA;        &amp;lt;C - [&amp;gt;                     # 返回普通模式&#xA;        &amp;lt;C - o&amp;gt;                     # 到插入-普通模式&#xA;        &amp;lt;C - v&amp;gt;                     # 命令模式可用，插入编码对应的字符&#xA;            065                     # 两位的编码&#xA;            u00bf                   # 超过3位的unicode码&#xA;            非数字                   # 直接插入, 如expandtab开启后插入tab&#xA;        &amp;lt;C - k&amp;gt;{char1}{char2}       # 命令模式可用，插入以二合字母表示的字符&#xA;            12&#xA;            &amp;lt;&amp;lt;&#xA;            ?I&#xA;        &amp;lt;C - r&amp;gt;{register}           # 命令模式可用，插入寄存器内容&#xA;    补全&#xA;        &amp;lt;C - n&amp;gt;/p                   # 自动补全下/上&#xA;&#xA;        &amp;lt;C - x&amp;gt; 接着按如下&#xA;            &amp;lt;C - L&amp;gt;                 # 整行补全&#xA;            &amp;lt;C - N&amp;gt;                 # 根据当前文件里关键字补全&#xA;            &amp;lt;C - K&amp;gt;                 # 根据字典补全&#xA;            &amp;lt;C - T&amp;gt;                 # 根据同义词字典补全&#xA;            &amp;lt;C - I&amp;gt;                 # 根据头文件内关键字补全&#xA;            &amp;lt;C - ]&amp;gt;                 # 根据标签补全&#xA;            &amp;lt;C - F&amp;gt;                 # 补全文件名&#xA;            &amp;lt;C - D&amp;gt;                 # 补全宏定义&#xA;            &amp;lt;C - V&amp;gt;                 # 补全vim命令&#xA;            &amp;lt;C - U&amp;gt;                 # 用户自定义补全方式&#xA;            &amp;lt;C - S&amp;gt;                 # 拼写建议&#xA;operator                            # num + operator 来多次操作, 合并命令如A(同$a), 是为了普通模式下一个按键进行插入，这样能够在.命令中重复&#xA;    @:                              # 重复Ex命令&#xA;    &amp;amp;                               # 重复substitute命令&#xA;    x/X                             # 删除当前字符/删除前一个字符， x等于dl，X 等于dh&#xA;    u/U                             # 撤销(Undo)/撤销对整行的操作&#xA;    r/R                             # 替换一个字符/持续替换字符，tab是一个字符&#xA;        gR                          # 一个tab由tabstop个字符才能替换&#xA;        gr&#xA;    y/yy/Y                          # yank 复制/复制一行/同yy&#xA;        :y&#xA;    p/P                             # 粘贴/前面粘贴&#xA;        :p&#xA;    a/A                             # s当前字符后插入&#xA;        A同$a, 行尾插入&#xA;    o/O                             # 向后插入行&#xA;        o同A&amp;lt;CR&amp;gt;&#xA;        O同ko, 向前插入行&#xA;    s/S                             # 替换当前字符/替换当前行&#xA;        s同cl&#xA;        S同^C&#xA;    i/I                             # 当前字符前插入/行首插入&#xA;        I同^i &#xA;    c/cc/C                          # 替换/替换一行/同cc&#xA;        :0,10c 与 :c&#xA;        C同c$&#xA;    d/dd/D                          # 删除/删除一行/删到行尾&#xA;        dd 同 :d&#xA;        10d表示删除10行&#xA;        D同d$&#xA;        :0,10d 与 :d&#xA;    &amp;lt;&amp;lt;/&amp;gt;&amp;gt;&#xA;        可视模式下 &amp;lt;/&amp;gt;&#xA;        命令下 1&amp;gt;&amp;gt;2 表示从1行开始, 作用2行&amp;gt;&amp;gt;, 可以1&amp;gt;&amp;gt;&amp;gt;&amp;gt;2&#xA;        1,2&amp;gt; 表示 1到2行&amp;gt;&amp;gt;, 可以1,2&amp;gt;&amp;gt;&#xA;        &amp;gt;G 缩进当前到最后一行&#xA;    =                               # 自动缩进&#xA;        == 自动缩进当前行&#xA;    !                               # 用外部命令过滤指定行&#xA;        如!j, 自动进入命令模式, 选定了指定行进行!&#xA;        !!当前[count]行&#xA;    J                               # 与下行合并&#xA;    g                               # :[range]global/{pattern}/{command}&#xA;        global命令在[range]指定的文本范围内（缺省为整个文件）查找{pattern}，然后对匹配到的行执行命令{command}，如果希望对没匹配上的行执行命令，则使用global!或vglobal命令。&#xA;        g/^/m 0 倒序文件行&#xA;    g_                              # 到本行最后一个不是blank字符的位置&#xA;    gd                              # 智能跳到当前变量定义的位置&#xA;    gu/gU                           # 转换到小写/大写, 如gUw&#xA;        gugu / guu / gUgU / gUU&#xA;    g~                              # 大写转小写，小写转大写&#xA;        g~g~ / g~~ 转换一行&#xA;    可视模式下&#xA;            U/u                     # 大写/小写&#xA;ex command&#xA;    :1,10 co 20                     # 将1-10行插入到第20行之后。&#xA;        :1,$ co $ 复制整个文件添加到尾部&#xA;    :1, 10 m 20                     # 第1-10行移动到第20行之后&#xA;    :ab attr attribute              # 缩写, 输入模式中输入attr,再输入非字母字符(空格, 点等)，自动补全&#xA;        ab查看所有缩写&#xA;        una/unab attr 取消缩写　&#xA;    :!                              # 执行外部命令&#xA;    :[range]copy{address} /:t /:co  # 复制range到address后, :t 2 表示复制当前行到第2行后&#xA;    :[range]move{address}           # 移动&#xA;    :[range]join                    # 连接&#xA;    :[range]delete[x]               # 删除指定范围内的行到寄存器中&#xA;    :[range]yank[x]                 # 复制&#xA;    :[line]put[x]                   # 指定行后粘贴寄存器中内容&#xA;    :[range]normal{commands}        # 指定范围执行命令&#xA;    :[range]print / p               # 在vim下方回显指定行的内容&#xA;text-object&#xA;    i&amp;quot;&#xA;        &amp;quot; 表示 光标所在&amp;quot;&amp;quot;的内容&#xA;        &#39;&#xA;        `&#xA;        ) 表示 ()的内容&#xA;        ( 同上&#xA;        ]&#xA;        [&#xA;        &amp;gt;&#xA;        &amp;lt;&#xA;        }&#xA;        {&#xA;        B 表示 {}的内容&#xA;        t 表示 tag之间的内容，如&amp;lt;h2&amp;gt;aaaa&amp;lt;/h2&amp;gt;&#xA;        w 表示 光标所在word&#xA;        s 表示 光标所在句子&#xA;        p 表示 段落&#xA;    a&amp;quot;                              # 包括外围，命令同i&#xA;    视图模式下&#xA;        vit                         # 在可视模式下选中标签内容，如&amp;lt;a&amp;gt;xxx&amp;lt;/a&amp;gt;的xxx&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;patterns-oper&#34;&gt;&#xA;  patterns oper&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#patterns-oper&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;operator&#xA;    &amp;amp;                               # 重复:s上次执行的命令, 不包含g&#xA;        g&amp;amp; 全局重复:s上次的命令&#xA;    n/N                             # 查找下一个/上一个&#xA;Ex command&#xA;    :[range]substitude/{pattern}/{string}/[flags]&#xA;        :s 用new替换old，替换当前行的第一个匹配&#xA;        前面是正则, 用()分组，后面用\1引用分组&#xA;        :s/old/new/g 作用到整行&#xA;        :%s/old/new/ 作用到每行第一个&#xA;        :10,20 s/^/    /g 作用到10到20行的每一个&#xA;        :%s/old/new/g 作用到全文&#xA;        :s/old/new/gc 每次修改前询问&#xA;&#xA;    :[range]global/{pattern}/[cmd]&#xA;        :g 查找text的行执行命令,如:g/text/s/old/new/g&#xA;        v/text/command 查找到行不执行命令,其它行执行&#xA;    :&amp;amp;                              # 同operator中&amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;registers-oper&#34;&gt;&#xA;  registers oper&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#registers-oper&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;register                            # 寄存器&#xA;    :reg                            # 查看所有寄存器 或 :reg 1 查看寄存器1的内容&#xA;    &amp;quot;0p                             # &amp;quot;0&amp;lt;operator&amp;gt; 粘贴寄存器0的内容&#xA;        &amp;quot;0y 复制到寄存器0&#xA;    :pu 0                           # 同上&#xA;        :pu! 0 同 &amp;quot;0P&#xA;    :y a                            # 复制当前行到&amp;quot;a寄存器&#xA;        :5,10y m 复制5到10行到&amp;quot;m寄存器&#xA;    分类&#xA;        &amp;quot;&amp;quot;                          # unamed 缓存最后一次操作内容&#xA;        &amp;quot;0                          # numbered 范围0 - 9 。&amp;quot;0缓存最近一次复制的内容&#xA;            &amp;quot;1到&amp;quot;9缓存最近9次删除的内容, &amp;quot;9向后则丢弃&#xA;            第2次删除时，缓存1转存到缓存2, 新的删除内容存到缓存1&#xA;        &amp;quot;-                          # small delete 缓存行内删除内容&#xA;        &amp;quot;a                          # named 范围a - z 与 A - Z&#xA;        &amp;quot;:                          # read-only&#xA;            如 &amp;quot;: 最近命令 &amp;quot;. 最近插入文本 &amp;quot;% 当前文件名 &amp;quot;# 当前交替文件名&#xA;        &amp;quot;=                          # expression 用于执行表达式命令，只读&#xA;        &amp;quot;*                          # selection and drop&#xA;            如 &amp;quot;* &amp;quot;+ &amp;quot;~ 存取GUI选择文本，可用于与外部交互，要求系统剪切板(clipboard)可用&#xA;        &amp;quot;_                          # black hole 表示不缓存，干净删除&#xA;        &amp;quot;/                          # last search pattern 缓存最近的搜索模式&#xA;shortcut key&#xA;    &amp;lt;C - r&amp;gt;0                        # 插入寄存器缓冲区内容, 原理是vim插入模式模拟打入&#xA;            &amp;lt;C - p&amp;gt;0                # 保持格式不变&#xA;    &amp;lt;C - r&amp;gt;=6 * 35&amp;lt;CR&amp;gt;              # 计算结果&#xA;宏&#xA;    qa ... q                        # 录制宏a，存到寄存器中，可以用&amp;quot;ap粘贴出来&#xA;    @a                              # 运行宏a&#xA;    let @a = &amp;quot;&amp;quot;                     # 用let @a 在.vimrc设置文件中设置宏a&#xA;    内置宏&#xA;        :                           # 上次的Ex命令&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;file-oper&#34;&gt;&#xA;  file oper&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#file-oper&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;shell&#xA;    $ vim file1 file2..&#xA;    $ vimtutor                      # vim的教程&#xA;&#xA;operator&#xA;    o-&amp;gt; 折叠&#xA;    zf                              # 创建折叠&#xA;        zf% 创建括号折叠&#xA;        zf56G 创建从当前行起到56行代码的折叠&#xA;    zo/zO                           # 展开当前/递归展开当前(folding open, z这个字母看上去比较像折叠的纸)&#xA;    zc/zC                           # 再折叠/递归再折叠(folding close)&#xA;    [z                              # 到折叠的开始处&#xA;    z]                              # 到折叠的结束处&#xA;    zk                              # 向上移动到前一个折叠的结束处&#xA;    zd/zD                           # 删除当前光标下的折叠/嵌套删除折叠&#xA;&#xA;    o-&amp;gt; 文件对比&#xA;    vim -d file1 file2&#xA;    diffsplit file2&#xA;    diffthis&#xA;    diffupdate&#xA;    [c                              # 跳到前一个不同点&#xA;    ]c                              # 跳到后一个不同点&#xA;    dp                              # 合并增加另一个 （diff put）&#xA;    do                              # 合并增加当前 （diff get）&#xA;Ex command&#xA;    :help                           # 显示帮助, 同F1&#xA;        帮助文件中位于||之间的内容是超链接，可以用Ctrl+]进入链接，Ctrl+o（Ctrl + t）返回&#xA;        :help tutor 显示vimtutor的教程&#xA;        :help xx 显示某个帮助, 如help CTRL-[&#xA;        :help &#39;number&#39; 显示vim选项的帮助&#xA;        :help &amp;lt;Esc&amp;gt; 显示特殊键的帮助&#xA;        :help -t 显示vim启动参数的帮助&#xA;        :help i_&amp;lt;Esc&amp;gt; 插入模式下Esc的帮助，某个模式下的帮助用 模式_主题的模式&#xA;    :r/nr filename                  # 插入一个文件的内容/插入到第n行&#xA;    :f                              # 显示当前文件状态&#xA;    :.=                             # 打印当前行号&#xA;        := 打印总行号&#xA;    :open file                      # 新窗口打开文件&#xA;    :saveas filename                # 另存为并切换到文件&#xA;    :tabnew                         # 新建标签页&#xA;    :split file/:new                # 屏幕分割&#xA;    :vsplit 纵向打开窗口&#xA;    :q                              # q! 强制退出&#xA;    :w/:write                       # :w filename 写入新文件&#xA;    :x                              # 有改动时保存并退出, 无改动只退出&#xA;    ZZ&#xA;    :e/:edit                        # 重新打开文件, e! 放弃所有修改重新打开文件&#xA;        e filename 当前窗口打开另一个文件&#xA;    :bn/:bp                         # 切换上个/下个文件&#xA;    :saveas &amp;lt;path/to/file&amp;gt;          # 另存为到 &amp;lt;path/to/file&amp;gt;&#xA;    :!command                       # 执行shell命令，如 :!ls&#xA;        :!perl -c script.pl 检查perl脚本语法，可以不用退出vim，非常方便。&#xA;        :!perl script.pl 执行perl脚本，可以不用退出vim，非常方便。&#xA;    :suspend                        # 挂起vim，回到shell，命令fg返回vim。&#xA;    :buffers/:ls                    # 缓冲区列表&#xA;    :bprev                          # 上一缓冲区&#xA;    :bnext                          # 下一缓冲区&#xA;&#xA;    o-&amp;gt; 多视窗&#xA;    :vert                           # 横向打开&#xA;    :vsplit                         # 横向打开&#xA;    :split&#xA;    :prev                           # 上一个文件&#xA;    :next                           # 下一个文件&#xA;    :close                          # 最后一个窗口不能使用此命令，可以防止意外退出vim。&#xA;    :only                           # 关闭所有窗口，只保留当前窗口&#xA;&#xA;    o-&amp;gt; 标签窗口                      # 启动 Vim 时用 &amp;quot;vim -p filename ...&amp;quot;&#xA;    :tabe[dit]                      # 打开文件到标签&#xA;    :tabnew                         #  在当前标签页之后打开带空窗口的新标签页。&#xA;    :tabc[lose][!]{count}           #  关闭当前标签页。 {}表示关闭第count个标签&#xA;    :tabo[nly][!]                   # 关闭所有其它的标签页。&#xA;    :tabn[ext] {count}              # 切换到后面的标签页&#xA;    :tabp[revious] {count}          # 切换到前面的标签页&#xA;    :tabr[ewind]                    # 回卷跳转&#xA;    :tabfir[st]                     #  转到第一个标签页。&#xA;    :tabl[ast]                      # 转到最后一个标签页。&#xA;    :tabm[ove] [N]                  # 重排标签页&#xA;        把当前标签页移到第 N 个标签页之后。用 0 使当前标签页成为首个标&#xA;        签页。如果没有 N，当前标签页成为最后一个。&#xA;    :tabs                           # 列出标签页和它们包含的窗口信息。&#xA;        当前窗口显示 &amp;quot;&amp;gt;&amp;quot;。&#xA;        修改过的缓冲区显示 &amp;quot;+&amp;quot;。&#xA;    :tabd[o] {cmd}                  # 对每个标签页执行 {cmd}&#xA;&#xA;shortcut keys&#xA;        ctrl - z                    # 同 :suspend&#xA;        ctrl + g                    # 同 :f&#xA;&#xA;        o-&amp;gt; 多视窗&#xA;        ctrl + w + hljk&#xA;        ctrl + w + w                # 跳到下一个&#xA;        ctrl + w + p                # 跳到前一个&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;settings&#34;&gt;&#xA;  settings&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#settings&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;设置文件&#xA;    /etc/vimrc&#xA;    ~/.vimrc                        # vim的配置文件, 优先于.exrc&#xA;    ~/.exrc                         # vi的配置文件&#xA;命令&#xA;    :set&#xA;        all                         # 打印所有set选项&#xA;        nocompatible                # 不设置vi兼容&#xA;        ruler? 　　                  # 查看是否设置了ruler，在.vimrc中，使用set命令设制的选项都可以通过这个命令查看&#xA;        shell    :/usr/bin/sh       # 使用SystemⅤ中的shell来执行vi中以！或  :!开头的shell命令&#xA;        nrformts                    # 设置进制, &amp;lt;c - a&amp;gt; &amp;lt;c - x&amp;gt;时对八进制有用，如07&#xA;&#xA;        encoding=utf-8              # 程序显示编码&#xA;        enc                         # 同上&#xA;        fileencodings=ucs-bom,utf-8,cp936                       # 设置读取文件支持的编码&#xA;        fencs                       # 同上&#xA;        fileencoding=utf-8          # 当前文件编码&#xA;        fenc                        # 同上&#xA;        termencoding=utf-8          # 设置终端编码&#xA;        tenc                        # 同上&#xA;&#xA;        list                        # 显示非打印字符，如tab，空格，行尾等。&#xA;        nolist                      # 取消显示非打印字符, 如果tab无法显示，请确定用 set lcs=tab:&amp;gt;- 命令设置了.vimrc文件&#xA;        number                      # 显示行号&#xA;        nu                          # 同上&#xA;        nonumber                    # 不显示行号&#xA;        nonu                        # 同上&#xA;        reprot=2                    # 用户做2行以上修改时显示统计信息&#xA;        hlsearch                    # 设置查找高亮&#xA;        hls                         # 同上&#xA;        incsearch                   # 查找高亮所有(增量高亮)&#xA;&#xA;        smartindent                 # 括号补全&#xA;        sm                          # 同上&#xA;        ignorecase                  # 查找时忽略大小写&#xA;        ic                          # 同上&#xA;        noignorecase                # 查找时不忽略大小写&#xA;        noic                        # 同上&#xA;        expandtab                   # 存起来的文件, 用space替换tab&#xA;        shiftwidth=4                # 换行时缩进长度&#xA;        sw                          # 同上&#xA;        softtabstop=4               # 插入模式tab长度&#xA;        tabstop=4                   # 识别和显示tab时，转换成space的长度&#xA;&#xA;        autoindent                  # 启用自动缩进&#xA;        ai                          # 同上&#xA;        foldmethod=indent           # 设置折叠&#xA;        fdm                         # 同上&#xA;            indent 缩进折叠&#xA;            syntax 语法高亮折叠&#xA;            expr 表达式定义折叠&#xA;            diff 对没有更改的文本折叠&#xA;            marker 对文中的标志折叠&#xA;    :scriptnames                    # 脚本文件位置，如.vimrc文件、语法文件、plugin&#xA;    :syntax clear                   # 列出已经定义的语法项&#xA;        clear 清除已定义的语法规则&#xA;        case match 大小写敏感，int和Int将视为不同的语法元素&#xA;        case ignore 大小写无关，int和Int将视为相同的语法元素，并使用同样的配色方案&#xA;配置&#xA;    inoremap &amp;lt;C-]&amp;gt; &amp;lt;C-X&amp;gt;&amp;lt;C-]&amp;gt;       # 插入模式下映射&#xA;    nnoremap                        # 在normal模式下映射&#xA;    fileType plugin on              # 激活内置插件, 检测文件类型&#xA;    filetype on                     # 同上&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;plugins&#34;&gt;&#xA;  plugins&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#plugins&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;netrw&#xA;    介绍&#xA;        自带插件&#xA;    edit ./                         # 查看目录树&#xA;    Ex                              # 同上&#xA;    Se                              # 下面弹出目录树 好用&#xA;    Ve                              # 左面弹出目录树 好用&#xA;&#xA;    &amp;lt;cr&amp;gt;   netrw 进入目录或读入文件 |netrw-cr|&#xA;    &amp;lt;del&amp;gt;  netrw 试图删除文件/目录 |netrw-del|&#xA;    -    netrw 往上走一层目录 |netrw--|&#xA;    a    在以下三种方式间切换: 正常显示，|netrw-a|&#xA;        隐藏 (不显示匹配 g:netrw_list_hide 的文件) 和&#xA;        显示 (只显示匹配 g:netrw_list_hide 的文件)&#xA;    c    使浏览中的目录成为当前目录 |netrw-c|&#xA;    d    建立目录 |netrw-d|&#xA;    D    netrw 试图删除文件/目录 |netrw-D|&#xA;    i    在瘦、长、宽和树形的各种列表方式间切换 |netrw-i|&#xA;    &amp;lt;c-l&amp;gt;  netrw 刷新目录列表 |netrw-ctrl-l|&#xA;    o    打开新浏览窗口，进入光标所在的目录。使用水平分割。|netrw-o|&#xA;    p    预览文件 |netrw-p|&#xA;    P    在前次使用的窗口里浏览 |netrw-P|&#xA;    r    反转排序顺序 |netrw-r|&#xA;    R    给指定的文件/目录换名 |netrw-R|&#xA;    s    选择排序方式: 按名字、时间或文件大小排序 |netrw-s|&#xA;    S    指定按名字排序的后缀优先级 |netrw-S|&#xA;    t    在新标签页里打开光标所在的文件/目录 |netrw-t|&#xA;    v    打开新浏览窗口，进入光标所在的目录。使用垂直分割。|netrw-v|&#xA;ctags&#xA;    将ec57w32.zip解压，在解压后文件夹中找到ctags.exe，将其复制到C:\ProgramFiles\Vim\vim72下，并编辑_vimrc文件，添加以下内容：&#xA;    set tags=tags;&#xA;    set autochdir&#xA;    打开cmd命令行，切换到你要查看的源代码的根目录处，运行&#xA;    ctags -R&#xA;    将会在此目录处生成一个tags文件。&#xA;    用gvim打开一个代码文件，将光标放到某一函数名上，如下图的UpdateViewByPosNo()，按下&amp;quot;ctrl+]&amp;quot;，光标会自动跳转到定义处。按下&amp;quot;ctrl+T&amp;quot;会跳回到原来的位置。&#xA;    变量、结构体、宏等等，都可以这样做。&#xA;    当你的源文件有更新时，只能重新运行ctags -R命令，来更新tags文件。&#xA;&#xA;    taglist&#xA;        将taglist_45.zip解压，解压后包含一个doc文件夹和一个plugin文件夹，将其中内容分别复制到C:\Program Files\Vim\vim72下的doc及plugin中。&#xA;        在_vimrc文件中加入以下内容：&#xA;        let Tlist_Show_One_File=1&#xA;        let Tlist_Exit_OnlyWindow=1&#xA;        用gvim打开代码文件（已生成过tags文件），:Tlist，TagList窗口即出现在左侧。&#xA;&#xA;visual-star&#xA;Qargs&#xA;nerdTreeToggle&#xA;    介绍&#xA;        目录显示插件&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;方案&#34;&gt;&#xA;  方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;加分号&#xA;    jA;&#xA;    j.&#xA;批量执行&#xA;    选中多行, :normal .&#xA;批量前缀&#xA;    选中多行, I&#xA;括起文字&#xA;    ci&amp;quot;        # 替换内容&amp;quot;&amp;quot;&#xA;    ca&amp;quot;        # 替换所有&#xA;    di&amp;quot;        # 删除内容&#xA;    cit        # 替换标签&#xA;执行python&#xA;    选中代码, :!python&#xA;缩进全文&#xA;    gg=G&#xA;替换到&amp;quot;&#xA;    cf&amp;quot;&#xA;esc&#xA;    &amp;lt;C-[&amp;gt;&#xA;目录窗口&#xA;    :Sex&#xA;&#xA;&#xA;console输出乱码&#xA;    language messages utf-8&#xA;    set termencoding=utf-8&#xA;设置文件编码&#xA;    set encoding=utf-8&#xA;    set fileencodings=utf-8,chinese,latin-1&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Docker</title>
      <link>https://ukeate.com/docs/tool/ops/docker/</link>
      <pubDate>Thu, 11 Oct 2018 18:18:21 +0800</pubDate>
      <guid>https://ukeate.com/docs/tool/ops/docker/</guid>
      <description>&lt;h1 id=&#34;基础&#34;&gt;&#xA;  基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    基于linux LXC，可以实现虚拟化&#xA;优点&#xA;    低成本、高利用率、充分灵活、动态调度&#xA;    核心网的最终形态&#xA;目录&#xA;    /var/lib/docker&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;配置&#34;&gt;&#xA;  配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;镜象网站&#xA;    https://hub.docker.com/&#xA;阿里云个人仓库&#xA;    入口: cr.console.aliyun.com&#xA;        docker login -u 934260428@qq.com registry.cn-qingdao.aliyuncs.com&#xA;        docker tag java/device:1.0 registry.cn-qingdao.aliyuncs.com/mrs-iot/device:1.0&#xA;        docker push registry.cn-qingdao.aliyuncs.com/mrs-iot/device:1.0&#xA;        docker pull registry.cn-qingdao.aliyuncs.com/mrs-iot/device:1.0&#xA;/etc/sysconfig/docker&#xA;    # /etc/init.d/docker.conf&#xA;    OPTIONS=&#39;--selinux-enabled --log-driver=journald --insecure-registry 45.55.56.16:5000 --dns 8.8.8.8&#39;&#xA;    DOCKER_CERT_PATH=/etc/docker&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;命令&#34;&gt;&#xA;  命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;常用系统命令&#34;&gt;&#xA;  常用系统命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e7%94%a8%e7%b3%bb%e7%bb%9f%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;systemctl daemon-reload&#xA;systemctl restart docker&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;docker&#34;&gt;&#xA;  docker&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;-h&#xA;version&#xA;login&#xA;    docker login -u outrun -p asdf&#xA;search mysql                    # 搜索镜像&#xA;pull centos:7                   # 下载镜像&#xA;    centos:latest&#xA;    outrun11/test:nginx1&#xA;image&#xA;    ls&#xA;    pull&#xA;    rm&#xA;images centos                   # 本地镜象列表&#xA;rmi centos:latest               # 删除镜象&#xA;container&#xA;    run                         # 新建容器&#xA;        --user root&#xA;        --name a&#xA;        --privileged&#xA;        --name                  # 显示名&#xA;        -t                      # 伪tty, -i 交互的&#xA;        -rm=true                # 执行完后删除&#xA;        -v /etc/:/opt/etc/      # 挂载本机/etc到容器/opt/etc, /etc/:/opt/etc/:ro 只读挂载, /etc/ 对外共享/etc&#xA;        -p 1234:80              # 端口映射本机1234端口到容器80&#xA;        --volumes-from etc_share                    # 使用另一个容器对外共享的磁盘&#xA;        -d                      # 后台运行&#xA;        --link redis_server:redis                   # 连接容器的redis命令&#xA;        -w /var/node            # 当前工作目录&#xA;        -e NODE_ENV=&#39;&#39;          # 环境变量&#xA;        --net=bridge            # 网络模式，bridge使用虚拟网桥docker0, host共享主机命名空间, container与已存在的一个容器共享命名空间, none关闭网络功能, overlay&#xA;&#xA;        --name nsqd -p 4150:4150 nsqio/nsq /nsqd&#xA;            # 端口&#xA;        -it centos /bin/bash&#xA;            # 启动容器, 执行bash&#xA;        b15 /bin/echo &#39;hello&#39;&#xA;            # 启动容器&#xA;        -it --rm=true --name=ls-volume -v /etc/:/opt/etc/ centos ls /opt/etc&#xA;            # 创建共享&#xA;        -it -p 1337:1337 --name=etc_share -v /etc/ centos mkdir /etc/my_share &amp;amp;&amp;amp; /bin/sh -c &amp;quot;while true; do echo hello; sleep 1; done&amp;quot;&#xA;            # 持续运行&#xA;        -it --rm=true --volumes-from etc_share --name=ls_etc centos ls /etc&#xA;            # 使用共享&#xA;    exec                        # 已有容器中运行&#xA;        -i&#xA;        -t&#xA;    ls&#xA;    start 026                       # 启动已建立的容器, id可以只输入前几位&#xA;        cp 026e:/docker/file /local/file&#xA;    stop 026&#xA;    restart 026e&#xA;    attach 026                  # 进入容器运行命令行, 可显示日志&#xA;    kill 026e&#xA;    prune&#xA;ps -a                           # 容器列表&#xA;rm                              # 移除容器&#xA;    docker rm docker ps -aq&#xA;        # 移除所有未运行的容器&#xA;    rm -f 026&#xA;&#xA;&#xA;build .                         # 用当前目录Dockerfile创建新镜像&#xA;    -t=&amp;quot;nginx/test&amp;quot;             # target&#xA;    --no-cache                  # 不用cache&#xA;    -f a.dockerfile             # 指定文件&#xA;tag nginx/test:test1 outrun11/test:nginx1&#xA;    # 远程docker基站创建repository, 名字test&#xA;push outrun11/test:nginx1&#xA;    logs beae3392&#xA;&#xA;&#xA;swarm                           # 一个或多个docker组成&#xA;    init&#xA;node                            # swarm节点&#xA;    ls&#xA;service                         # 运行于swarm的服务&#xA;    create&#xA;    ls&#xA;    ps&#xA;    rm&#xA;    inspect                     # 详情&#xA;    scale                       # 加减副本&#xA;    update                      # 变更属性&#xA;    logs                        # 查日志&#xA;system &#xA;    prune                       # 清理所有container, network, image, cache&#xA;network                         # 网卡&#xA;    ls&#xA;    rm&#xA;    prune                       # 删除全部未使用&#xA;    inspect                     # 详情&#xA;    create&#xA;        -d nat                  # 指定驱动&#xA;volume                          # 卷标, 默认挂载到/var/lib/docker/volumes&#xA;    create&#xA;    ls&#xA;    rm&#xA;    prune                       # 删除全部未使用&#xA;    inspect&#xA;stack                           # 单文件定义多服务&#xA;    deploy&#xA;    ls&#xA;    ps&#xA;    rm&#xA;&#xA;常用&#xA;    docker inspect 45370        # 详情&#xA;        --format &amp;quot;{{.State.Pid}}&amp;quot;&#xA;    docker login a.com -u outrun -p asdf&#xA;    docker build -t java/gateway:1.0 .&#xA;    docker push java/gateway:1.0&#xA;    docker images|grep none|awk &#39;{print $3}&#39;|xargs docker rmi -f&#xA;        # 删除none镜像&#xA;    docker image inspect 4de&#xA;    docker system prune -a&#xA;    docker exec -it -u root ef2 /bin/bash&#xA;    docker run --name gateway --rm -d java/gateway:1.0&#xA;    docker run -it ubuntu&#xA;    docker restart ef2&#xA;    docker logs -f -t ef2&#xA;    docker status 45370         # 显示资源占用&#xA;    docker save -o a.tar.gz a&#xA;    docker load &amp;lt; a.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;nsenter&#34;&gt;&#xA;  nsenter&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nsenter&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 指定pid, 不需ssh进入容器运行shell&#xA;docker inspect --format {{.State.Pid}} nginx&#xA;nsenter -t4629 -n&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;场景&#34;&gt;&#xA;  场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;查看镜像内文件&#xA;    docker run -it --entrypoint sh nginx:latest&#xA;查看/var/lib/docker/overlay2/id文件对应container&#xA;    docker ps -q | xargs docker inspect --format &#39;{{.State.Pid}}, {{.Id}}, {{.Name}}, {{.GraphDriver.Data.WorkDir}}&#39; | grep bff250&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;dockerfile&#34;&gt;&#xA;  Dockerfile&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dockerfile&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;指令&#xA;    FROM nginx                          # 基于镜像&#xA;    MAINTAINER outrun                   # 指定维护者信息&#xA;    EXPOSE 80                           # 内部服务开启的端口&#xA;    ENV NODE_ENV test                   # 环境变量&#xA;    WORKDIR /src                        # 指定工作目录&#xA;    COPY ./bin /data/a                  # 复制外部文件到内部&#xA;    VOLUME [&amp;quot;/data/log&amp;quot;]                # 创建挂载点&#xA;    ENTRYPOINT [&amp;quot;/data/a/a&amp;quot;]            # 启动命令，只有一个&#xA;    CMD [&amp;quot;-config&amp;quot;, &amp;quot;config.toml&amp;quot;]      # docker run 时运行&#xA;    RUN echo &#39;test&#39;                     # build过程中执行的命令&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;docker-compose&#34;&gt;&#xA;  docker-compose&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker-compose&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker-compose&#xA;    -h                              # 帮助&#xA;    -f                              # 指定模板&#xA;    version&#xA;&#xA;    up                              # 所有模板创建容器&#xA;        -d                          # 后台&#xA;    down                            # 删除容器、网络、卷、镜像&#xA;    rm                              # 删除容器&#xA;    create                          # 创建容器&#xA;&#xA;    stop                            # 停止容器&#xA;    start                           # 启动容器&#xA;    restart&#xA;    pause                           # 暂停容器&#xA;    unpause&#xA;    kill                            # 强制停止容器&#xA;    scale                           # 指定容器个数&#xA;&#xA;    ps                              # 列出所有容器&#xA;    logs                            # 查日志&#xA;    port                            # 显示容器映射端口&#xA;    run                             # 容器中执行命令&#xA;    exec&#xA;&#xA;    config                          # 查看配置&#xA;    build                           # (重)构建容器&#xA;    pull                            # 拉依赖镜像&#xA;    push                            # 推送镜像&#xA;配置&#xA;    version: &#39;3&#39;&#xA;    services:&#xA;      dokuwiki:&#xA;        restart: always&#xA;        image: bitnami/dokuwiki:latest&#xA;        ports:&#xA;          - 8004:80&#xA;        environment:&#xA;          - DOKUWIKI_FULL_NAME=outrun&#xA;          - DOKUWIKI_EMAIL=934260428@qq.com&#xA;          - DOKUWIKI_WIKI_NAME=Wiki&#xA;          - DOKUWIKI_USERNAME=outrun&#xA;          - DOKUWIKI_PASSWORD=asdfasdf&#xA;        volumes:&#xA;          - ./data:/bitnami                                         # 本地:镜像&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;仓库&#34;&gt;&#xA;  仓库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%93%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;habor&#34;&gt;&#xA;  habor&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#habor&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;registry&#34;&gt;&#xA;  registry&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#registry&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;htpasswd  -Bbn outrun asdf &amp;gt; auth/htpasswd&#xA;&#xA;客户端使用&#xA;    /etc/docker/daemon.json&#xA;        {&amp;quot;insecure-registries&amp;quot;:[&amp;quot;127.0.0.1:5000&amp;quot;]}&#xA;    sudo systemctl daemon-reload&#xA;    sudo systemctl restart docker&#xA;&#xA;    docker login 127.0.0.1:5000&#xA;&#xA;    docker tag java/device:1.0 127.0.0.1:5000/java/device:1.0&#xA;    docker push 127.0.0.1:5000/java/device:1.0&#xA;    curl --user outrun:asdf 127.0.0.1:5000/v2/_catalog&#xA;        # v2表示版本 registry:2&#xA;    docker pull 127.0.0.1:5000/java/device:1.0&#xA;常用API&#xA;    curl --user outrun:asdf -X GET  registry:5000/v2/_catalog&#xA;        # 列表&#xA;    curl --user outrun:asdf -X GET  registry:5000/v2/ubuntu/tags/list&#xA;        # tags&#xA;    curl --user outrun:asdf -X GET  registry:5000/v2/ubuntu/manifests/latest&#xA;        # tag&#xA;    curl --user outrun:asdf -X GET -v --silent -H &amp;quot;Accept: application/vnd.docker.distribution.manifest.v2+json&amp;quot; registry:5000/v2/ubuntu/manifests/latest 2&amp;gt;&amp;amp;1 | grep Docker-Content-Digest | awk &#39;{print ($3)}&#39;&#xA;        # digest&#xA;    curl --user outrun:asdf -X DELETE -v --silent -H &amp;quot;Accept: application/vnd.docker.distribution.manifest.v2+json&amp;quot; registry:5000/v2/ubuntu/manifests/sha256:134c7fe821b9d359490cd009ce7ca322453f4f2d018623f849e580a89a685e5d&#xA;        # 删除&#xA;    docker exec -it 4ebff4cdc646 /bin/registry garbage-collect  /etc/docker/registry/config.yml&#xA;        # 删除后, 运行垃圾回收&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;方案&#34;&gt;&#xA;  方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;查容器pid&#xA;    docker container top ea1&#xA;    docker inspect -f &#39;{{.State.Pid}}&#39; ea1&#xA;批量删除镜像&#xA;    docker rmi $(docker image ls -a |grep jncloud |awk &#39;{print $3}&#39;)&#xA;进入容器&#xA;    docker exec -it mysql bash&#xA;制作镜像并运行&#xA;    make&#xA;    docker build -t search:v1 .&#xA;    docker images&#xA;    docker run -p 50088:80 -d search:v1&#xA;    docker ps -a&#xA;    docker logs ea1&#xA;    docker rmi bc8&#xA;提交镜像到官方&#xA;    docker -ps -a&#xA;    docker login&#xA;    docker commit d79 outrun11/node_pm2&#xA;        # 把容器提交为镜像&#xA;    docker images node_pm2&#xA;    docker push outrun11/node_pm2&#xA;代理&#xA;    /etc/systemd/system/docker.service.d/http-proxy.conf            # 没有时创建&#xA;        Environment=&amp;quot;HTTP_PROXY=http://127.0.0.1:8123&amp;quot;&#xA;            &amp;quot;HTTPS_PROXY=http://127.0.0.1:8123&amp;quot;&#xA;            &amp;quot;NO_PROXY=192.168.1.1,localhost&amp;quot;&#xA;    systemctl daemon-reload&#xA;换源&#xA;    /etc/docker/daemon.json                                         # 没有时创建&#xA;        {&#xA;          &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://nmp74w3y.mirror.aliyuncs.com&amp;quot;]&#xA;        }&#xA;    systemctl daemon-reload&#xA;    systemctl restart docker&#xA;登录运行容器&#xA;    docker exec -it --user root 8ce /bin/sh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;工具&#34;&gt;&#xA;  工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;harbor&#xA;    企业级register镜像服务器&#xA;pipwork&#xA;    shell写的docker网格配置工具&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Kubernetes</title>
      <link>https://ukeate.com/docs/tool/ops/k8s/</link>
      <pubDate>Thu, 11 Oct 2018 18:18:21 +0800</pubDate>
      <guid>https://ukeate.com/docs/tool/ops/k8s/</guid>
      <description>&lt;h1 id=&#34;常用&#34;&gt;&#xA;  常用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;查看&#34;&gt;&#xA;  查看&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9f%a5%e7%9c%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;系统日志&#xA;    journalctl -u kubelet | tail&#xA;    kubectl api-resources --verbs=list --namespaced -o name   | xargs -n 1 kubectl get --show-kind --ignore-not-found -nmdw&#xA;日志&#xA;    kubectl logs -f --since=5m --all-containers=true -lapp=[svcName] -o wide&#xA;    kubectl get pod [podName] -o yaml&#xA;    kubectl get pods -nmdw-log -l app=logstash-logstash -w    # 等待启动&#xA;    kubectl describe pods [podName]&#xA;    kubectl rollout status deploy/[deployName]          # 查升级记录&#xA;    kubectl get events -njnc&#xA;        -oyaml&#xA;        --field-selector=type=Normal            # Normal, Warning&#xA;查ns所有资源&#xA;    kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found -nairflow&#xA;查节点详情&#xA;    kubectl get nodes -o json&#xA;查扩缩状态&#xA;    kubectl rollout status deploy/[deployName]&#xA;查所有nodeport&#xA;    kubectl get svc --all-namespaces -o go-template=&#39;{{range .items}}{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{&amp;quot;\n&amp;quot;}}{{end}}{{end}}{{end}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;操作&#34;&gt;&#xA;  操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;进容器&#xA;    kubectl exec -it [podName]  -- /bin/bash&#xA;    kubectl attach [podName]            # 进入主进程IO&#xA;用busybox运行命令&#xA;    kubectl run -it --image busybox -n [nameSpace] [name] --restart=Never --rm&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;监控&#34;&gt;&#xA;  监控&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%91%e6%8e%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubectl top node -l app=app1&#xA;kubectl top pod -nmdw --containers&#xA;kubectl describe PodMetrics p1 -njnc-dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;编辑&#34;&gt;&#xA;  编辑&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%96%e8%be%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubectl apply -f a.yml&#xA;envsubst &amp;lt; jnc.yml |kubectl apply -f -&#xA;kubectl label ns jnc istio-injection=enabled --overwrite&#xA;kubectl label ns jnc istio-injection-&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;亲和性&#34;&gt;&#xA;  亲和性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%b2%e5%92%8c%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubectl get nodes --show-labels&#xA;kubectl label nodes node1 deploy=mdw&#xA;kubectl taint nodes node1 key=value:NoSchedule                      # NoSchedule、PreferNoSchedule、NoExecute&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;调试&#34;&gt;&#xA;  调试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b0%83%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubectl proxy --port=8080 &amp;amp;&#xA;    # 以非https形式暴露api&#xA;kubectl debug a1 -it --image=yauritux/busybox-curl --share-processes --copy-to=a1-debug&#xA;    # 嫁接&#xA;kubectl run -it --rm test --image=a:0.1.0 --command -- /bin/bash&#xA;    # 改镜像命令&#xA;kubectl run -it --rm  busybox1 --image=yauritux/busybox-curl -- /bin/bash&#xA;    # 同环境busybox&#xA;kubectl cp dir1 ns1/po1:/dir1 -c c1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;清理&#34;&gt;&#xA;  清理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b8%85%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;删除Evicted/OutOfmemory pod&#xA;    kubectl get po -njnc-dev | grep OutOfmemory |awk &#39;{print$1}&#39; | tr &#39;\n&#39; &#39;&#39; | xargs kubectl delete pod -njnc-dev&#xA;强制删除pod&#xA;    kubectl delete po -nmdw --force --grace-period=0&#xA;删除pv/pvc&#xA;    kubectl patch pv mdw-mysql-data -p &#39;{&amp;quot;metadata&amp;quot;:{&amp;quot;finalizers&amp;quot;:null}}&#39;&#xA;重建pv&#xA;    kubectl get pvc p1 -o yaml &amp;gt; a.yml&#xA;    编辑a.yml&#xA;    kubectl apply -f a.yml&#xA;删除node&#xA;    kubectl drain node1&#xA;维护node不可调度与恢复&#xA;    kubectl cordon node1&#xA;    kubectl uncordon node1&#xA;强制删除ns&#xA;    kubectl get ns n1 -o json &amp;gt;tmp.json&#xA;    删除finalizers列表&#xA;    kubectl proxy&#xA;    curl -k -H &amp;quot;Content-Type: application/json&amp;quot; -X PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/n1/finalize&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;操作-1&#34;&gt;&#xA;  操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%93%8d%e4%bd%9c-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;升级镜像&#xA;    kubectl set image deploy/[deployName] [imageName]=[imageName:Version]&#xA;    kubectl edit deploy/[deployName]&#xA;扩容&#xA;    kubectl scale deployment [deployName] --replicas=3&#xA;    kubectl patch deployment [deployName] -p &#39;{&amp;quot;spec&amp;quot;:{&amp;quot;replicas&amp;quot;:3}}&#39;&#xA;重启&#xA;    kubectl rollout restart deploy xxx&#xA;回滚&#xA;    kubectl rollout undo deploy xxx&#xA;打污点&#xA;    kubectl taint nodes node1 key1=a:NoExecute&#xA;        # 添加&#xA;    kubectl taint nodes --all key1-&#xA;        # 删除&#xA;打标签&#xA;    kubectl label nodes node1 a=b&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;容器配置&#34;&gt;&#xA;  容器配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%b9%e5%99%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;HTTPS&#xA;    openssl req -x509 -newkey rsa:4096 -sha256 -nodes -keyout tls.key -out tls.crt -subj &amp;quot;/CN=my-domain.com&amp;quot;&#xA;    kubectl create secret tls my-domain-com-tls --cert=tls.crt --key=tls.key --namespace=allure-docker-service&#xA;    ingress.yml&#xA;        spec:&#xA;            tls:&#xA;            - secretName: my-domain-com-tls&#xA;              hosts:&#xA;                - my-domain.com&#xA;              &#xA;部署.docker/config.json成secret&#xA;    kubectl create secret generic regcred --from-file=.dockerconfigjson=&amp;lt;path/to/.docker/config.json&amp;gt; --type=kubernetes.io/dockerconfigjson&#xA;配置私有仓库&#xA;    kubectl delete secret local&#xA;    kubectl -n iot create secret docker-registry local1 \&#xA;    --docker-server=192.168.99.1:5000 \&#xA;    --docker-username=outrun \&#xA;    --docker-password=asdf \&#xA;    --docker-email=934260428@qq.com&#xA;连阿里云k8s&#xA;    kubectl config set-cluster mrs --server=https://106.14.49.217:6443 --certificate-authority=/home/outrun/scripts/work/mrs-k8s/crt --embed-certs=true&#xA;    kubectl config set-context 297351062922226746-cdf45d630b2284f8ab79bea186c161d9f --cluster=mrs --user=297351062922226746 --namespace=lora-app&#xA;    kubectl config use-context 297351062922226746-cdf45d630b2284f8ab79bea186c161d9f&#xA;    kubectl config set-credentials 297351062922226746  --user=297351062922226746 --client-key=/home/outrun/scripts/work/mrs-k8s/297351062922226746.key.pem --client-certificate=/home/outrun/scripts/work/mrs-k8s/297351062922226746.crt --embed-certs=true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;集群配置&#34;&gt;&#xA;  集群配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9b%86%e7%be%a4%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;设置当前集群namespace&#xA;    kubectl config set-context $(kubectl config current-context) --namespace=default&#xA;配置DNS解析&#xA;    kubectl edit configmap coredns -n kube-system&#xA;        apiVersion: v1&#xA;        data:&#xA;        Corefile: |&#xA;            .:53 {&#xA;                errors&#xA;                hosts {&#xA;                    192.168.1.107 a.b.com&#xA;                }&#xA;            }&#xA;    kubectl rollout restart deploy coredns -n kube-system&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;文件目录&#34;&gt;&#xA;  文件目录&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%87%e4%bb%b6%e7%9b%ae%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;/etc/kubernetes&#xA;/etc/resolve.conf&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;命令&#34;&gt;&#xA;  命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;kubeadm&#34;&gt;&#xA;  kubeadm&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kubeadm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubeadm init&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;kubectl&#34;&gt;&#xA;  kubectl&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kubectl&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;全局参数&#xA;    --help                  # -h&#xA;    --output=&amp;quot;jsonpath={.data.\.dockerconfigjson}&amp;quot;&#xA;    --output=yaml&#xA;    --context=iot&#xA;    --namespace=iot &#xA;    --all-namespaces=true&#xA;    -n [namespace] &#xA;    --all                           # 如匹配所有deploy文件&#xA;Other Commands&#xA;    api-resources           # 查所有resource&#xA;        namespace/ns&#xA;        endpoints/ep&#xA;        nodes/no&#xA;        configmap/cm  &#xA;        replicationcontrollers/rc&#xA;        deployments/deploy&#xA;        statefulsets/sts&#xA;        service/svc &#xA;        ingresses/ing&#xA;        persistentvolumes/pv&#xA;        persistentvolumeclaims/pvc&#xA;        storageclasses/sc&#xA;        pods/po&#xA;        cronjobs/cj&#xA;        daemonset/ds                    # 每个node运行一个&#xA;        certificatesigningrequests/csr  # csr证书&#xA;    api-versions            # 所有可用的apiVersion&#xA;    config                  # 设置集群&#xA;        config set current-context c1&#xA;    plugin                  # 设置插件&#xA;    version&#xA;Basic Commands:&#xA;    create&#xA;        -f y1.yml&#xA;    expose                          # 修改端口&#xA;        expose deployment/[deployName]&#xA;        --target-port=8080 &#xA;        --type=NodePort&#xA;    run   &#xA;        run [deployName] &#xA;        --image=gcr.io/google-samples/hello-app:1.0&#xA;        --port=8080&#xA;    set                             # 更新配置&#xA;        set image deploy/[deployName] *=image1:1.1&#xA;            # 所有镜像更新为image1:1.1&#xA;    explain                         # 查resource文档&#xA;        pv&#xA;    get&#xA;        -o                          # 格式&#xA;            yaml&#xA;            wide&#xA;            jsonpath=&#39;{.items[0].metadata.name}&#39;&#xA;        -l app=a1                   # select label&#xA;        -c gateway&#xA;        --show-labels&#xA;        --selector app=a1&#xA;        --all-containers=true&#xA;    edit                            # 修改配置&#xA;        edit ingress ingress1&#xA;    delete &#xA;        --force  &#xA;        --grace-period=0&#xA;Deploy Commands:&#xA;    rollout&#xA;        history deploy/deploy1&#xA;        pause deploy/deploy1&#xA;        restart&#xA;        resume deploy/deploy1&#xA;        status &#xA;        undo deploy/deploy1         # 回滚到上一版本&#xA;    scale&#xA;        scale deploy/deploy1&#xA;            --replicas=1&#xA;    autoscale&#xA;        autoscale deploy/deploy1&#xA;            --min=1&#xA;            --max=3&#xA;            --cpu-percent=80&#xA;Cluster Management Commands:&#xA;    certificate&#xA;        approve [csrName]           # 手动签发证书，/etc/kubernetes/ssl/*&#xA;        deny&#xA;    cluster-info                    # 集群信息 &#xA;        dump&#xA;    top                             # cpu 内存负载&#xA;        node&#xA;        pod&#xA;    cordon [nodeName]               # node不可调度&#xA;    uncordon                        # node可调度&#xA;    drain [nodeName]                # 移除node&#xA;    taint                           # node污点&#xA;        taint nodes node1 key1=val1:NoSchedule&#xA;Troubleshooting and Debugging Commands:&#xA;    describe     &#xA;    logs&#xA;    attach                          # 当前终端成为entrypoint&#xA;    exec         &#xA;        -it device-7b8965d85d-xz4qm bash&#xA;        -it device-7b8965d85d-xz4qm --container device -- /bin/bash&#xA;    port-forward                    # 端口映射&#xA;        port-forward [podName] 本地端口:pod端口&#xA;    proxy                           # 映射ApiServer到本地端口&#xA;        --port=8080&#xA;    cp                              # copy容器文件&#xA;        cp [namespaceName]/[podName]:[filePath] .&#xA;    auth         &#xA;        can-i list pods             # judge权限&#xA;        reconcile -f rbac.yaml      # 应用权限配置&#xA;            --dry-run               # 仅测试，列出变更&#xA;            --remove-extra-subjects         # 删除除外subject&#xA;            --remove-extra-permissions      # 删除除外权限&#xA;    debug                           # pod调试模式, alpha版功能，需要--feature-gates=&amp;quot;EphemeralContainers=true&amp;quot;&#xA;        -it pod1 &#xA;        --image=image1              # 排错工具镜像&#xA;        --share-processes           # 共享进程&#xA;        --copy-to=pod1-debug&#xA;Advanced Commands:&#xA;    diff      &#xA;        diff -f a.yml               # dry run 找出将实行的变更&#xA;    apply           # 升级&#xA;        -f y1.yml&#xA;        -k overlays/&#xA;    patch                           # 更新属性&#xA;        patch deploy/deploy1&#xA;        -p &#39;{&amp;quot;spec&amp;quot;:{&amp;quot;unschedulable&amp;quot;:true}}&#39;&#xA;    replace                         # 替换resource&#xA;        replace -f a.yml&#xA;    wait                            # 等待直到满足条件&#xA;        -f a.yml&#xA;        --for=condition=Available&#xA;        --timeout=1h&#xA;    kustomize                       # 多环境部署的overlays补丁&#xA;        kustomize [dir with kustomization.yml]&#xA;Settings Commands:&#xA;    label&#xA;        label pods/pod1 a=b&#xA;        --overwrite                 # 覆盖更新&#xA;        --resource-version=1        # 匹配没修改过的情况&#xA;    annotate&#xA;        annotate pods/pod1 a=&#39;b&#39;&#xA;        --overwrite&#xA;    completion                      # 生成终端命令补全配置&#xA;        completion bash &amp;gt; /etc/bash_completion.d/kubectl&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;helm&#34;&gt;&#xA;  Helm&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#helm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;目录&#xA;    charts/&#xA;    Chart.yaml&#xA;        apiVersion: v1&#xA;        appVersion: &amp;quot;1.0&amp;quot;&#xA;        description: A Helm chart for Kubernetes&#xA;        name: nginx-test&#xA;        version: 0.1.0&#xA;    requirements.yaml&#xA;    requirements.lock&#xA;    values.yaml&#xA;        replicaCount: 1&#xA;    templates/&#xA;        _helpers.tpl&#xA;        deployment.yaml&#xA;    &#xA;helm命令&#xA;    查看&#xA;        ls/list&#xA;            --all-namespaces&#xA;        get values a1                   # 查看已部署的values变更&#xA;        history  a1                     # 查看历史版本&#xA;        get manifest a1                 # 查看已安装模板&#xA;        template                        # 查看编译后内容&#xA;            --debug&#xA;        search repo a1 &#xA;            --versions&#xA;    安装&#xA;        repo&#xA;            update&#xA;        install [deployName] [packageName|packageFile|packagePath] &#xA;            -f values.yaml&#xA;            --values=values.yaml&#xA;            --set a=b&#xA;        upgrade                         # 热更新部署文件&#xA;            --debug --dry-run           # 只输出编译结果&#xA;            -i                          # 没有时执行install&#xA;            --disable-openapi-validation&#xA;        uninstall&#xA;    插件&#xA;        plugin&#xA;            install --version master https://gitee.com/mirrors_sonatype-nexus-community/helm-nexus-push.git&#xA;            ls&#xA;    运维&#xA;        rollback a1 1                   # 回滚到1版本&#xA;    打包&#xA;        create a1&#xA;        lint --strict a1                # 校验&#xA;        package a1                      # 打包成a1-0.1.0.tgz&#xA;&#xA;相关命令&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;minikube&#34;&gt;&#xA;  minikube&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#minikube&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker login --username=934260428@qq.com registry.cn-hangzhou.aliyuncs.com&#xA;命令&#xA;    minikube&#xA;        start --vm-driver=virtualbox \&#xA;            --memory=4096 \&#xA;            --cpus=2 \&#xA;            --log_dir=/home/outrun/logs \&#xA;            --insecure-registry=192.168.99.1:5000 \&#xA;            --insecure-registry=registry.cn-qingdao.aliyuncs.com \&#xA;            --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers&#xA;&#xA;            --kubernetes-version v1.17.0&#xA;            --docker-env=HTTP_PROXY=$HTTP_PROXY \&#xA;            --docker-env=HTTPS_PROXY=$HTTPS_PROXY \&#xA;            --docker-env=NO_PROXY=$NO_PROXY \&#xA;            --image-mirror-country=cn \&#xA;            --registry-mirror=https://registry.docker-cn.com \&#xA;            --extra-config=kubelet.MaxPods=5.&#xA;                # registry一定是minikube容器ip, 可用ifconfig查看&#xA;                # --insecure-registry修改需要minikube delete&#xA;        stop&#xA;        delete&#xA;        status &#xA;        docker-env&#xA;        ip      # 得到单机集群ip&#xA;        service  -n iot mosquitto --url&#xA;            # 得到service的nodePort&#xA;&#xA;        ssh&#xA;        dashboard&#xA;        addons&#xA;            list&#xA;            enable heapster&#xA;            enable ingress&#xA;服务&#xA;    kube-system&#xA;        coredns&#xA;        etcd-minikube&#xA;        kube-addon-manager-minikube&#xA;        kube-proxy&#xA;        kube-scheduler-minikube&#xA;        nginx-ingress-controller&#xA;        storage-provisioner&#xA;    kubernetes-dashboard&#xA;        dashboard-metrics-scraper&#xA;        kubernetes-dashboard&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;平台&#34;&gt;&#xA;  平台&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b9%b3%e5%8f%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;HPE Container Platform&#xA;OpenShift&#xA;VMware VSphere&#xA;Minikube&#xA;Rancher&#xA;KubeSphere&#xA;Google Cloud Platform(GCP)&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>运维</title>
      <link>https://ukeate.com/docs/tool/ops/</link>
      <pubDate>Wed, 10 Oct 2018 17:33:07 +0800</pubDate>
      <guid>https://ukeate.com/docs/tool/ops/</guid>
      <description>&lt;h1 id=&#34;持续集成cicd&#34;&gt;&#xA;  持续集成(CI/CD)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8c%81%e7%bb%ad%e9%9b%86%e6%88%90cicd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Continuous Integration(持续集成), Continuous Delivery(持续部署)&#xA;Jenkins&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;容器&#34;&gt;&#xA;  容器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%b9%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker&#xA;containerd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;虚拟化&#34;&gt;&#xA;  虚拟化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%99%9a%e6%8b%9f%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;vagrant&#xA;    # 自动化虚拟机配置&#xA;parallels desktop&#xA;    # 苹果&#xA;xen&#xA;gnome boxes&#xA;hyper-v&#xA;    # 微软&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;kvm&#34;&gt;&#xA;  KVM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kvm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    kernel-based virtual machine, 使用linux自身的调度器进行管理,所以代码较少&#xA;        # 又叫qemu-system或qemu-kvm&#xA;    虚拟化需要硬件支持(如 intel VT技术或AMD V技术)，是基于硬件的完全虚拟化&#xA;原理&#xA;    包含一个可加载的内核模块kvm.ko, 由于集成在linux内核中，比其他虚拟机软件高效&#xA;使用&#xA;    检查系统是否支持硬件虚拟化&#xA;        egrep &#39;(vmx|svm)&#39; --color=always /proc/cpuinfo&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;vmware&#34;&gt;&#xA;  VMware&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#vmware&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;安装&#xA;    安装后会创建两个虚拟网卡&#xA;设置&#xA;    edit -&amp;gt; preferences -&amp;gt; Hot Keys 设置退出快捷键&#xA;网络连接方式&#xA;    1.vm9自带的virtual network editor中选择桥接到有线网卡&#xA;    2.vm -&amp;gt; setting -&amp;gt; network adapter选项设置&#xA;        bridged（桥接）:与主机平等，可以设置为同一个网段相互访问&#xA;        nat:通过虚拟网卡连接主机，共享网络&#xA;        host-only:单机模式&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;virtualbox&#34;&gt;&#xA;  VirtualBox&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#virtualbox&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;网络连接&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;NAT&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Bridged Adapter&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Internal&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Host-only Adapter&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;虚拟机-&amp;gt;主机&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;默认不能，需设置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;主机-&amp;gt;虚拟机&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;默认不能，需设置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;虚拟机-&amp;gt;其他主机&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;默认不能，需设置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;其他主机-&amp;gt;虚拟机&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;默认不能，需设置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;虚拟机间&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;×&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;同网络可以&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;√&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;方案&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;linux安装增强iso&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;iso位置&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;/usr/share/virtualbox&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;编译环境&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;kernel-devel&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;gcc&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;pre&gt;&lt;code&gt;    共享剪切板与拖拽文件&#xA;        虚拟机启动后devices下设置&#xA;    共享文件夹&#xA;        linux下挂载&#xA;            mount -t vboxsf 共享名 /mnt/share&#xA;        windows下挂载&#xA;            我的电脑 右键 映射网络驱动器&#xA;    clone&#xA;        clone 时选择更新mac,并在虚拟机中网络连接设置中重写mac与ip&#xA;        配置主机间ssh免登录，远程ssh与所有主机免登录&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;paas&#34;&gt;&#xA;  PaaS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#paas&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;OpenStack&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;devops&#34;&gt;&#xA;  DevOps&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#devops&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;自动化运维&#34;&gt;&#xA;  自动化运维&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%8a%a8%e5%8c%96%e8%bf%90%e7%bb%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;tty.js&#xA;    # 浏览器运行命令&#xA;jenkins&#xA;    # java实现的持续集成工具&#xA;saltstack&#xA;    # 部署, 自动化运维&#xA;puppet&#xA;    # 自动化运维&#xA;selenium&#xA;    # 自动化运维&#xA;chef&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;ansible&#34;&gt;&#xA;  Ansible&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ansible&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# python实现的自动化部署工具&#xA;模式&#xA;    ad-hoc              # 批量命令&#xA;    playbook            # 任务编排，执行yml文件&#xA;安装&#xA;    pip install ansible&#xA;配置&#xA;    优先级&#xA;        export ANSIBLE_CONFIG=/etc/ansible.cfg&#xA;        ~/.ansible.cfg&#xA;        /etc/ansible.cfg&#xA;    ansible.cfg&#xA;        inventory = /etc/ansible/hosts&#xA;        library = /usr/share/ansible&#xA;        forks = 5&#xA;        sudo_user = root&#xA;        remote_port = 22&#xA;        host_key_checking = False&#xA;        timeout = 60&#xA;        log_path = /var/log/ansible.log&#xA;    hosts&#xA;        [mysql_test]&#xA;        192.168.0.1&#xA;        192.168.0.2&#xA;命令&#xA;    ansible&#xA;        通配符&#xA;            10.1.1.113&#xA;            &#39;*&#39;&#xA;            all&#xA;        -m&#xA;            command                     # 执行命令&#xA;                -a &#39;uptime&#39;&#xA;            file                        # 操作文件&#xA;                -a &amp;quot;dest=/tmp/t.sh mode=755 owner=root group=root&amp;quot;                  # 改属性&#xA;                -a &amp;quot;src=https://ukeate.com/etc/resolv.conf dest=/tmp/resolv.conf state=link&amp;quot;          # 软链接&#xA;                -a &amp;quot;path=/tmp/resolv.conf state=absent&amp;quot;                             # 删除软连接&#xA;            copy&#xA;                -a &amp;quot;src=https://ukeate.com/a.cfg dest=/tmp/a.cfg owner=root group=root mode=0644&amp;quot;&#xA;            cron                        # 定时任务&#xA;                -a &#39;name=&amp;quot;custom job&amp;quot; minute=*/3 hour=* day=* month=* weekday=* job=&amp;quot;/usr/sbin/ntpdate 172.16.254.139&amp;quot;&#39;&#xA;            group                       # 操作组&#xA;                -a &#39;gid=2017 name=a&#39;    # 创建组&#xA;            user                        # 操作用户&#xA;                -a &#39;name=aaa groups=aaa state=present&#39;          # 创建用户&#xA;                -a &#39;name=aaa groups=aaa remove=yes&#39;             # 删除用户&#xA;            yum&#xA;                -a &amp;quot;state=present name=httpd&amp;quot;&#xA;            service&#xA;                -a &#39;name=httpd state=started enabled=yes&#39;       # 开机启动&#xA;            ping&#xA;            script&#xA;                -a &#39;/root/test.sh&#39;&#xA;            shell&#xA;                -a &#39;ps aux|grep zabbix&#39;&#xA;            raw                         # 同shell&#xA;            get_url&#xA;                -a &#39;url=http://10.1.1.116/a.ico dest=/tmp&#39;      # 下载&#xA;            synchronize&#xA;                -a &#39;src=https://ukeate.com/root/a dest=/tmp/ compress=yes&#39;        # 推送&#xA;&#xA;        o-&amp;gt; 例子&#xA;        ansible &#39;*&#39; -m command -a &#39;uptime&#39;&#xA;    ansible-doc         # 文档&#xA;    ansible-galaxy      # 上传/下载模块&#xA;    ansible-playbook    # 任务编排&#xA;    ansible-pull        # 拉配置&#xA;    ansible-vault       # 文件加密&#xA;    ansible-console     # REPL&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;资源管理&#34;&gt;&#xA;  资源管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b5%84%e6%ba%90%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;文档管理&#34;&gt;&#xA;  文档管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%87%e6%a1%a3%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Confluence&#xA;Git Wiki&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;版本&#34;&gt;&#xA;  版本&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%89%88%e6%9c%ac&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;mercurial&#xA;    # 简称hg，分布式版本控制系统，比git好&#xA;clearQuest&#xA;    # IBM Rational提供的缺陷及变更管理工具。它对软件缺陷或功能特性等任务记录提供跟踪管理。提供了查询定制和多种图表报表。&#xA;clearcase&#xA;    # 配置管理的工具，只是SCM管理工具其中的一种。是RATIONAL公司开发的配置管理工具&#xA;spm&#xA;    # 构建sea.js项目&#xA;bower&#xA;    # 构建前端&#xA;redmine&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;gradle&#34;&gt;&#xA;  Gradle&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gradle&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    基于dsl(Groovy)声明项目自动化构建&#xA;环境&#xA;命令&#xA;    gradle&#xA;        -q                                      # --quiet, 只显示error&#xA;        init&#xA;            --type pom                          # 转换maven项目&#xA;        wrapper                                 # 生成可独立运行的打包脚本gradlew和gradlew.bat&#xA;配置&#xA;    build.gradle&#xA;        task hello {&#xA;            doLast {&#xA;                println &#39;Hello world!&#39;&#xA;            }&#xA;        }&#xA;        task hello &amp;lt;&amp;lt; {&#xA;            println &#39;Hello world!&#39;&#xA;        }&#xA;&#xA;        buildscript{}&#xA;        allprojects{}&#xA;        subprojects{}&#xA;&#xA;&#xA;    settings.gradle&#xA;        rootProject.name = &#39;choice-scm&#39;&#xA;        include &#39;choice-scm-dao&#39;&#xA;&#xA;&#xA;    gradle.properties&#xA;        org.gradle.parallel=true                # 开启并行编译&#xA;        org.gradle.daemon=true                  # 守护线程，在第一次编译时开线程并保持&#xA;        org.gradle.configureondemand=true       # 用新的孵化模式，加快编译&#xA;        org.gradle.caching=true                 # 启用缓存&#xA;        org.gradle.warning.mode=none            # 屏蔽warning&#xA;        org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;git&#34;&gt;&#xA;  Git&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#git&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;目录结构&#xA;    .git&#xA;        branches&#xA;        config  # 存放版本库git地址&#xA;规定&#xA;    HEAD&#xA;        # HEAD的版本号, HEAD^^ 表示HEAD之前两个的版本, HEAD~n 表示之前n个版本&#xA;    buffered stage branch head&#xA;        # buffered表示当前修改所在的版本，stage是buffered中文件add之后到的版本，branch是stage commit后到的分支(版本)，head是远程仓库的最新版本&#xA;工作流程&#xA;    fork + pull / merge request 更新代码&#xA;    commit message, pr messsage 提交说明&#xA;        pr是功能展示，前面加&amp;quot;WIP:&amp;quot;&#xA;    user.name, user.email用公司的&#xA;    pr必需有人review, assign到人, 推动review&#xA;    pr不要大&#xA;命令&#xA;    git [command] --help&#xA;    git help submodule&#xA;    设置&#xA;        config&#xA;            --global http.proxy &#39;http://127.0.0.1:8123&#39;&#xA;    仓库&#xA;        clone&#xA;        checkout                    # 切换到分支。检出原有文件替换&#xA;            -b                      # 创建并切换到分支&#xA;        branch                      # 创建并切换到分支&#xA;            -r                      # 指定操作远程分支&#xA;                -r origin/dev&#xA;            -a                      # 本地远程所有分支&#xA;            dev ef71                # 从ef71创建分支dev&#xA;            dev&#xA;            -d dev                  # 删除&#xA;            -D dev                  # 强制删除&#xA;        remote&#xA;            remove origin&#xA;            show                    # 显示仓库&#xA;            prune origin            # 删除远程没有而本地缓存的远程分支&#xA;            add origin git@bitbucket.org:outrun/www2.git&#xA;                    # 设置仓库&#xA;            set-url origin git@github.com:outrun/jeky&#xA;                    # 设置仓库url&#xA;        fetch                       # pull加merge&#xA;        pull origin master&#xA;            --allow-unrelated-histories&#xA;                # 本地有已存文件时，强行pull并检查冲突&#xA;        merge dev                   # 合并dev到当前分支&#xA;            --squash dev-bak        # dev-bak改动写到stash&#xA;        push origin master&#xA;            -u origin master        # 设定git push 默认参数&#xA;            origin :dev&#xA;                # origin +dev:dev&#xA;                # 强制替换掉原来版本&#xA;        commit                      # stage 提交到branch&#xA;            -a                      # 提交删改，忽略增加&#xA;            -m                      # 注释&#xA;            --amend                 # 合并到上次commit&#xA;        revert&#xA;            git commit -am &#39;revert&#39;&#xA;            git revert revertid1 取消上次revert&#xA;                # ideaIDE操作 - local history - revert&#xA;            示例&#xA;                revert  -m 1 ea1    # 舍弃最近一次commit&#xA;        rebase master               # 相当于当前改动代码之前merge master&#xA;        reset&#xA;            --hard ea1              # 回退&#xA;        stash                       # 暂存buffered&#xA;            list                    # 显示stash&#xA;            drop                    # 删除暂存&#xA;            pop                     # 恢复并删除暂存&#xA;            apply stash@{0}         # 恢复暂存&#xA;        tag&#xA;            -a tag1                 # 添加tag1&#xA;            -m &#39;a&#39;                  # 注释&#xA;            -d tag1                 # 删除tag1&#xA;            示例&#xA;                git tag -a v1.0.1  -m &#39;a&#39; e67&#xA;        show tag1                   # 查看tag1的信息&#xA;    文件&#xA;        add&#xA;            -A                      # 递归&#xA;        mv a b                      # 重命名&#xA;        rm                          # buffered和stage中都删除&#xA;            --cached                # 只删除git stage中文件, 不实际删 &#xA;        log                         # HEAD到指定版本号之前的log&#xA;            --oneline               # 每个记录显示一行&#xA;            --stat                  # 文件名差异&#xA;            -p                      # 细节差异&#xA;            -2                      # 文件最近2次差异&#xA;        reflog                      # 包括reset前的版本号&#xA;        diff master dev             # 对比分支差异，可指定到文件。默认对比buffered和stage的差异&#xA;            --cached                # 对比stage和branch的差异&#xA;        ls-files&#xA;            -u                      # 显示冲突文件&#xA;            -s                      # 显示标记为冲突已解决的文件&#xA;            --stage                 # stage中的文件&#xA;        submodule&#xA;            init                    # 初始化本地配置文件&#xA;            update&#xA;                --init --recursive  # 同步项目中的submodule&#xA;设置&#xA;    .gitignore&#xA;&#xA;    .git/config&#xA;&#xA;    ~/.gitconfig&#xA;        [commit]&#xA;        template=/t.txt&#xA;            # 每次commit会打开模板&#xA;    代理&#xA;        git config --global https.proxy http://127.0.0.1:1080&#xA;        git config --global https.proxy https://127.0.0.1:1080&#xA;        git config --global http.proxy &#39;socks5://127.0.0.1:1080&#39; &#xA;        git config --global https.proxy &#39;socks5://127.0.0.1:1080&#39;&#xA;&#xA;        git config --global --unset http.proxy&#xA;        git config --global --unset https.proxy&#xA;子模块&#xA;    .gitmodules&#xA;        [submodule &amp;quot;a&amp;quot;]&#xA;            path = a&#xA;            url = ssh://a.git&#xA;    git submodule update --init --recursive  &#xA;方案&#xA;    回退commit&#xA;        git reset --hard ea1&#xA;            # 进行回退&#xA;        git push -f&#xA;            # 强制提交&#xA;        git clean -xdf&#xA;            # 一般配合git reset使用, 清除已有的改动&#xA;    补充commit&#xA;        git commit --amend&#xA;        git push origin +a:a&#xA;    合并commit&#xA;        git rebase -i cf7e875   # 合并Head到cf7e875 commit&#xA;        修改rebase记录&#xA;            pick xxxx&#xA;            s yyyy&#xA;            s zzzz&#xA;        git status              # 查看冲突&#xA;        git add .               # 解决冲突提交&#xA;        git rebase --continue&#xA;        修改commit记录&#xA;    远程回退&#xA;        git revert id&#xA;    忽略文件&#xA;        git add 逆操作&#xA;            git rm --cached a&#xA;        远程保留，忽略本地&#xA;            git update-index --assume-unchanged a&#xA;            恢复 git update-index --no-assume-unchanged a&#xA;        远程删除，忽略本地&#xA;            git rm --cached a&#xA;            恢复 git add -A a&#xA;        远程不论，忽略本地&#xA;            .gitignore&#xA;    删本地分支&#xA;        git branch -D test&#xA;    删除远程分支&#xA;        git push origin --delete test&#xA;        或&#xA;            git branch -r -d origin/test&#xA;            git push origin :test&#xA;    恢复历史版本文件&#xA;        git reset ba5798aff7778c95252b9e01e924dddb5811bcd7 courseModel.js&#xA;        git checkout -- courseModel.js&#xA;        git push origin +master:master                # 提交回退版本到远程&#xA;    查看修改的内容&#xA;        git show&#xA;            # 与上个commit 比较&#xA;        git whatchanged&#xA;        git log --stat --date=relative&#xA;    删除历史&#xA;        git filter-branch --force --index-filter &#39;git rm -r --cached --ignore-unmatch .idea&#39; --prune-empty --tag-name-filter cat -- --all&#xA;        git push origin main --force&#xA;        rm -rf .git/refs/original/&#xA;        git reflog expire --expire=now --all&#xA;        git gc --prune=now&#xA;        git gc --aggressive --prune=now&#xA;    合并commit历史&#xA;        git branch test-bak&#xA;        git reset --hard ea1&#xA;        git merge --squash test-bak&#xA;        git push origin test -f&#xA;        git branch -D test-bak&#xA;    打tag&#xA;        git tag                     # git tag -l &#39;v1.*&#39; 通配查找&#xA;        git tag -a v1.0 -m &amp;quot;a&amp;quot;      # git tag -a v1.0 ba1 给commit打标签&#xA;        git tag -a v1.0 -m &amp;quot;a&amp;quot; ea1  # 指定commit&#xA;        git show v1.0&#xA;        git checkout v1.0&#xA;        git push origin v1.0        # git push origin -tags 将本地所有标签提交&#xA;        git tag -d v1.0&#xA;        git push origin --delete tag v1.0 &#xA;            # git push origin :refs/tags/v1.0c&#xA;    查tag的commit&#xA;        git show 1.4.1&#xA;        git log --pretty=oneline 1.4.0 1.4.1&#xA;    fork跨网站git&#xA;        git remote add upstream git@github.com:xuyuadmin/xxljob.git&#xA;        git fetch upstream&#xA;        git merge upstream/master --allow-unrelated-histories&#xA;    文件损坏错误error object file is empty&#xA;        find .git/objects/ -type f -empty | xargs rm&#xA;        git fetch -p&#xA;        git fsck --full&#xA;    统计某人代码&#xA;        git log --author=&amp;quot;$(git config --get user.name)&amp;quot; --pretty=tformat: --numstat | gawk &#39;{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf &amp;quot;added lines: %s removed lines : %s total lines: %s\n&amp;quot;,add,subs,loc }&#39; -&#xA;    统计所有人代码&#xA;        git log --format=&#39;%aN&#39; | sort -u | while read name; do echo -en &amp;quot;$name\t&amp;quot;; git log --author=&amp;quot;$name&amp;quot; --pretty=tformat: --numstat | awk &#39;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &amp;quot;added lines: %s, removed lines: %s, total lines: %s\n&amp;quot;, add, subs, loc }&#39; -; done&#xA;    共添加或修改行数&#xA;        git log --stat|perl -ne &#39;END { print $c } $c += $1 if /(\d+) insertions/&#39;&#xA;    pr&#xA;        介绍&#xA;            fork与pull request&#xA;&#xA;        fork后本地&#xA;            git clone git@github.com:chenduo/auth.git&#xA;            git remote add upstream git@github.com:Meiqia/auth.git&#xA;            git merge upstream/main &#xA;            git push origin main&#xA;        本地合并更新&#xA;            git checkout master&#xA;            git fetch upstream&#xA;                # fetch远程仓库&#xA;            git rebase upstream/master&#xA;                # 合并远程master&#xA;            git push&#xA;            git checkout branch1&#xA;            git rebase master&#xA;        pr追加&#xA;            git commit --amend&#xA;                # 更新本地的本次commit,不产生新的commit&#xA;            git push origin +branch1:branch1&#xA;                # 使用本地的commit覆盖远程分支的有问题的commit&#xA;        处理pr&#xA;            git fetch origin&#xA;            git checkout -b pr1 origin/pr1&#xA;            git checkout master&#xA;            git merge --no-ff pr1&#xA;            git reset --hard&#xA;            git revert -m 1 ea1&#xA;                # 舍弃pr&#xA;            git commit -am &#39;revert&#39;&#xA;            git revert revertid1 取消上次revert&#xA;                # intellji - local history - revert&#xA;            git push origin master&#xA;    开发&#xA;        提交&#xA;            git pull eoecn dev&#xA;                # 等于git fetch加git merge&#xA;            git diff&#xA;                # buffer与HEAD的差异(不包括新建文件)&#xA;            git add -A .&#xA;                # 添加到stage&#xA;            git status&#xA;                # stage与HEAD的差异&#xA;            git diff --cached/--stage&#xA;                # stage与HEAD的详细差异&#xA;            git diff HEAD&#xA;                # buffer, stage与HEAD的详细差异&#xA;            git commit -am &#39;a&#39;&#xA;            git push origin dev&#xA;            网站上点pull request&#xA;    代码审查&#xA;        git blame -L 60,60 [filename]&#xA;        git blame -L 60,60 --reverse 5534e1b4b..HEAD [filename]      &#xA;            # 版本范围内某行代码提交记录&#xA;        git show [commit id]&#xA;&#xA;github&#xA;    ssh -T git@github.com&#xA;        # 检查github ssh是否设置成功&#xA;插件&#xA;    octotree    # 树形显示&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;svn&#34;&gt;&#xA;  SVN&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#svn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;linux下移植的版本控制器&#xA;默认端口: 3690&#xA;## 目录结构&#xA;    conf:配置文件&#xA;    db:数据库&#xA;    hooks:勾子（自定义功能）&#xA;    locks:文件锁&#xA;## 命令&#xA;### 服务器&#xA;    svn --version&#xA;    svnadmin create c:\svn        # 创建仓库&#xA;                                        ## hooks勾子 locks锁 conf db&#xA;    svnserve -h&#xA;    svnserve -d -r c:\svn      # 启动服务(-d是后台运行，windows不支持，需要创建服务)&#xA;                                            ## --listen-port 3691 指定监听端口&#xA;    windows 下注册服务&#xA;                    sc create 服务名 binPath= &amp;quot;d:/suversion/bin/svnserve --service -r c:\svn&amp;quot; displayName= &amp;quot;显示名&amp;quot;&#xA;                        # 注意双引号前面要有空格&#xA;                    sc delete 服务名&#xA;&#xA;    使用多个仓库&#xA;            svnadmin create d:\svn2 创建仓库以后&#xA;            svnserve -d -r d:\svn2 --listen-port 3691        配置用另一个服务端口启动该仓库        # svn默认启动端口是3690&#xA;            svn://192.168.10.3:3691        来访问该仓库&#xA;#### 客户端&#xA;    添加项目&#xA;            svn add test/&#xA;            svn ci -m &amp;quot;first&amp;quot;                # svn commit -m &amp;quot;fisrt&amp;quot;&#xA;                                            ## ci是checkin&#xA;    检出&#xA;            svn checkout svn://192.168.0.2/framework&#xA;    显示所有分支(目录)&#xA;            svn ls svn://192.168.0.2/fr --verbose&#xA;    创建分支&#xA;            svn copy svn://192.168.0.2/repo/trunk/ svn://192.168.0.2/repo/branches/try-sth -m &#39;make branch try-sth&#39;&#xA;                    # 注意trunk后面要有/&#xA;    更换本地分支&#xA;            svn switch svn://192.168.0.2/repo/branches/try-sth&#xA;## 配置&#xA;    conf/svnserve.conf&#xA;            anon-access = read                # 匿名用户权限&#xA;            auth-access = write                # 登录用户权限&#xA;                                    # write权限包括read权限&#xA;                                    ＃ none没有验证无权限(匿名权限)&#xA;            password-db = passwd        # 加载conf/passwd文件（中的用户帐户）&#xA;            authz-db = authz                        ＃开启权限控制&#xA;                    同目录authz文件中配置权限&#xA;                    [/]                               # 对根目录设置权限&#xA;                    * = r                            # 所有人都可读&#xA;                    outrun = rw                # 配置所有版本库只读，outrun可读可写&#xA;                    @admin = rw                # @组名    对组进行引用&#xA;            realm = aa&#xA;                                    # 认证域名称, 本svn路径为 svn://192.168.0.2/aa&#xA;    conf/authz&#xA;&#xA;    conf/passwd&#xA;            [groups]&#xA;                    admin = outrun&#xA;    例子&#xA;        authz&#xA;                [groups]&#xA;                admin = a1, a2&#xA;                [/]&#xA;                @admin = rw&#xA;                a3 = rw&#xA;                * = r&#xA;        passwd&#xA;                [users]&#xA;                a1 = 123&#xA;                a2 = 123&#xA;                a3 = 123&#xA;        svnserve.conf&#xA;                [general]&#xA;                anon-access = none&#xA;                auth-access = write&#xA;                password-db = passwd&#xA;                authz-db = authz&#xA;                realm = trunk&#xA;                force-username-case = none&#xA;## 工具&#xA;    tortoiseSVN&#xA;        下载&#xA;                    右键 svn checkout 选择版本 下载 (show log 查看日志)&#xA;&#xA;            上传&#xA;                    第一次提交 右键 tor.../import&#xA;                    svn://192.168.10.188     # 输入用户名、密码登录&#xA;                    第二次提交 右键 commit&#xA;            还原&#xA;                    右键 tor.../Revert 还原其中的文件&#xA;            多人&#xA;                    右键 svn update ,更新另一个人提交的文件内容&#xA;            新建文件的提交&#xA;                    tor../add 或 commit的时候选择该文件&#xA;                    tor./Repo-browser，浏览仓库&#xA;            加锁文件    # 只有自己在不提交更改的前提下才可以解锁&#xA;            tor../get lock      # 不会改变版本&#xA;                    tor../release lock  # 解锁,但是新下载的工程不可以再解锁，如果删除原工程则无法解锁&#xA;            冲突&#xA;                    当前版本已经有人修改后commit的话提示版本已经过时&#xA;                    update:下载所有版本，右键 tor../edit conflicts -&amp;gt; mark as resolved确定解决&#xA;                    # 避免冲突：减少公共修改时间，重写前更新&#xA;            使用经验&#xA;                    TortoiseSVN -&amp;gt; Setting -&amp;gt; Saved Data 可以清空自动登录&#xA;&#xA;    svn的myeclipse插件：&#xA;                    # eclipse6中不能用，eclipse7每次报错，能用，eclipse8报错一次，能用 eclipse10不报错&#xA;            1.复制插件文件夹features与plugins到/myeclipse 10/dropins/文件夹中&#xA;            2.创建目录/myeclipse 10/my_plugin/svn/&#xA;                            复制插件文件夹features与plugins到/myeclipse 10/my_plugin/svn/文件夹中&#xA;                            /myeclipse 10/dropins/添加svn.link文件 ，内容为:path=my_plugin\\svn                # 这里写相对路径&#xA;            3.使用：重启myeclipse,弹出确认窗口（也可以从window -&amp;gt; show view中找到svn的视图）&#xA;                    项目：右键-&amp;gt;share project 上传项目到svn(bug 第一次只上传空文件夹,再右键Team/提交 时上传项目文件)&#xA;                            再右键就可以对该项目进行一系列的操作了&#xA;                    导入项目：file -&amp;gt; import -&amp;gt; svn&#xA;&#xA;    rapidsvn&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;ant&#34;&gt;&#xA;  Ant&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ant&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;功能&#xA;    js压缩&#xA;    自动发布&#xA;build.xml&#xA;    示例&#xA;    &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&#xA;    &amp;lt;project default=&amp;quot;execute&amp;quot;&amp;gt;&#xA;            &amp;lt;target name=&amp;quot;compile&amp;quot;&amp;gt;&#xA;                    &amp;lt;javac destdir=&amp;quot;.&amp;quot; srcdir=&amp;quot;.&amp;quot;/&amp;gt;&#xA;            &amp;lt;/target&amp;gt;&#xA;&#xA;            &amp;lt;target name=&amp;quot;execute&amp;quot; depends=&amp;quot;compile&amp;quot;&amp;gt;&#xA;                    &amp;lt;java classpath=&amp;quot;.&amp;quot; classname=&amp;quot;HelloWorld&amp;quot;/&amp;gt;&#xA;            &amp;lt;/target&amp;gt;&#xA;    &amp;lt;/project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;maven&#34;&gt;&#xA;  Maven&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#maven&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;仓库&#xA;    mvnrepository.com&#xA;依赖范围&#xA;    compile     # 默认,对编译、测试、运行有效&#xA;    test        # 对测试有效&#xA;    runtime     # 对测试和运行有效&#xA;    provided    # 编译和测试有效&#xA;    system      # 本地仓库&#xA;    import&#xA;源&#xA;    阿里云maven: https://maven.aliyun.com/mvn/view&#xA;mvn                                         # 相当于mvn compile&#xA;    全局&#xA;        -version                            # 版本&#xA;        -e                                  # 错误详情&#xA;        help:describe                       # help插件的describe&#xA;            -Dplugin=help                   # 显示help插件的详情&#xA;            -Dfull                          # 显示完整参数&#xA;        help:effective-pom                  # 显示默认设置&#xA;    生成&#xA;        archetype:create                    # 创建java项目&#xA;            -DgroupId=com.outrun&#xA;            -DartifactId=erp&#xA;            -Dversion=0.0.1-SNAPSHOT&#xA;            -DarchetypeArtifactId=maven-archetype-webapp                            # 指定模板为webapp&#xA;        archetype:generate                  # 向导创建项目&#xA;        site                                # 产生html文档&#xA;        source:jar                          # 源码打包&#xA;        generate-sources                    # 生成源码, 如xdoclet&#xA;        eclipse:eclipse                     # 生成或转化成eclipse工程&#xA;        eclipse:clean                       # 清除eclipse设置&#xA;        idea:idea                           # 生成idea项目&#xA;        install                             # compile, package后， 保存到本地仓库&#xA;            -X                              # 显示依赖&#xA;            -Dmaven.test.skip=true          # 跳过测试&#xA;            -rf 模块名                       # 从指定模块从新开始&#xA;    执行&#xA;        validate                            # 项目验证&#xA;        verify                              # 验证包&#xA;        compile                             # 编译&#xA;            exec:java                       # 编译完成后，执行java main方法&#xA;        test-compile                        # 编译测试代码&#xA;        test                                # 运行测试&#xA;            -skipping                       # 跳过&#xA;                compile                     # 不编译&#xA;                test-compile                # 不编译测试&#xA;        integration-test                    # 集成测试&#xA;        package                             # 打包&#xA;            -Dmaven.test.skip=true          # 跳过单元测试，不编译&#xA;            -DskipTests                     # 跳过单元测试，编译&#xA;        clean                               # 清除编译&#xA;            install-U                       # 强制更新&#xA;            package                         # 编译成jar包&#xA;        deploy                              # install后, 上传&#xA;        jar:jar                             # 打jar包&#xA;    插件&#xA;        jetty:run                           # 引入jetty-plugin后, 运行jetty&#xA;        tomcat:run&#xA;    分析&#xA;        dependency:list                     # 列出依赖&#xA;        dependency:tree                     # 列出依赖树&#xA;        dependency:analyze                  # 依赖分析, 未使用的做标记&#xA;        dependency:resolve                  # 列出已解决的依赖&#xA;        dependency:sources                  # 下载源码&#xA;        dependency:copy-dependencies        # 得到jar包&#xA;常用&#xA;    分析包依赖&#xA;        mvn dependency:tree -Dverbose -Dincludes=org.apache.commons:commons-lang3&#xA;    清理打包文件&#xA;        mvn clean package -DskipTests&#xA;    idea工具&#xA;        打包了带main方法的jar不能引用&#xA;        在父项目运行mvn package, model中运行会找不到其它model&#xA;        model运行前先mvn package&#xA;    手动添加依赖&#xA;        mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc7 -Dversion=12.1.0.2 -Dpackaging=jar -Dfile=ojdbc7.jar&#xA;配置&#xA;    &amp;lt;groupId&amp;gt;                               # 包名&#xA;    &amp;lt;artifactId&amp;gt;                            # 项目名&#xA;    &amp;lt;version&amp;gt;&#xA;    &amp;lt;packaging&amp;gt;                             # 打包方式, war, jar&#xA;&#xA;    &amp;lt;parent&amp;gt;                                # 父模块&#xA;&#xA;    &amp;lt;properties&amp;gt;&#xA;        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&#xA;        &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;&#xA;        &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;&#xA;        &amp;lt;spring-cloud.version&amp;gt;Dalston.RELEASE&amp;lt;/spring-cloud.version&amp;gt;&#xA;    &amp;lt;/properties&amp;gt;&#xA;&#xA;    &amp;lt;dependencies&amp;gt;                              # 子模块继承&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;&#xA;                LATEST&#xA;                ${spring-cloud.version}         #引用properties中定义的变量&#xA;            &amp;lt;scope&amp;gt;                             # 何时使用&#xA;                compile&#xA;                provided                        # 类似compile&#xA;                runtime&#xA;                test&#xA;                system&#xA;        &amp;lt;/dependency&amp;gt;&#xA;    &amp;lt;/dependencies&amp;gt;&#xA;&#xA;    &amp;lt;dependenciesManager&amp;gt;                       # 子模块不继承, 继承时需要声明&#xA;        &amp;lt;dependencies&amp;gt;&#xA;    &amp;lt;/dependenciesManager&amp;gt;&#xA;&#xA;    &amp;lt;build&amp;gt;&#xA;        &amp;lt;plugins&amp;gt;&#xA;            &amp;lt;plugin&amp;gt;&#xA;                &amp;lt;groupId&amp;gt;&#xA;                &amp;lt;artifactId&amp;gt;&#xA;            &amp;lt;/plugin&amp;gt;&#xA;        &amp;lt;/plugins&amp;gt;&#xA;    &amp;lt;/build&amp;gt;&#xA;插件&#xA;    介绍&#xA;        按顺序执行，完成maven生命周期&#xA;        无配置时调默认插件&#xA;    生命周期(lifecycle)顺序&#xA;        clean                                   # 清除target目录&#xA;        resources                               # 复制resources下文件到target/classes&#xA;        complie                                 # 包含resources, 编译java下文件到target/classes&#xA;        testResources                           # 复制test/resources下文件到target/test-classes&#xA;        testCompile                             # 包含testResources, 编译test/java下文件到target/test-classes&#xA;        test                                    # 包含resources, compile, testResources, testCompile, test&#xA;        package&#xA;        jar                                     # 打包class文件, 配置文件, 不打包lib&#xA;        install&#xA;    &#xA;    maven-clean-plugin&#xA;    maven-resources-plugin&#xA;        &amp;lt;plugin&amp;gt;  &#xA;            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;  &#xA;            &amp;lt;artifactId&amp;gt;maven-resources-plugin&amp;lt;/artifactId&amp;gt;  &#xA;            &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt;  &#xA;            &amp;lt;executions&amp;gt;  &#xA;                &amp;lt;execution&amp;gt;  &#xA;                    &amp;lt;id&amp;gt;copy-resources&amp;lt;/id&amp;gt;  &#xA;                    &amp;lt;phase&amp;gt;validate&amp;lt;/phase&amp;gt;&#xA;                    &amp;lt;goals&amp;gt;  &#xA;                        &amp;lt;goal&amp;gt;copy-resources&amp;lt;/goal&amp;gt;  &#xA;                    &amp;lt;/goals&amp;gt;  &#xA;                    &amp;lt;configuration&amp;gt;  &#xA;                        &amp;lt;outputDirectory&amp;gt;${project.build.outputDirectory}&amp;lt;/outputDirectory&amp;gt;  &#xA;                        &amp;lt;resources&amp;gt;  &#xA;                            &amp;lt;resource&amp;gt;  &#xA;                                &amp;lt;directory&amp;gt;src/main/${deploy.env}/applicationContext.xml&amp;lt;/directory&amp;gt;  &#xA;                                &amp;lt;excludes&amp;gt;&#xA;                                    &amp;lt;exclude&amp;gt;WEB-INF/*.*&amp;lt;/exclude&amp;gt;&#xA;                                &amp;lt;/excludes&amp;gt;&#xA;                                &amp;lt;filtering&amp;gt;false&amp;lt;/filtering&amp;gt;  &#xA;                            &amp;lt;/resource&amp;gt;  &#xA;                        &amp;lt;/resources&amp;gt;  &#xA;                    &amp;lt;/configuration&amp;gt;  &#xA;                    &amp;lt;inherited&amp;gt;&amp;lt;/inherited&amp;gt;  &#xA;                &amp;lt;/execution&amp;gt;  &#xA;            &amp;lt;/executions&amp;gt;  &#xA;        &amp;lt;/plugin&amp;gt;  &#xA;    maven-compiler-plugin&#xA;    maven-surefire-plugin                       # 对应test, 单元测试&#xA;    maven-dependency-plugin                     # 打包lib&#xA;    maven-jar-plugin&#xA;        &amp;lt;plugin&amp;gt;&#xA;             &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&#xA;             &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;&#xA;             &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt;&#xA;             &amp;lt;configuration&amp;gt;&#xA;                &amp;lt;archive&amp;gt;&#xA;                     &amp;lt;manifest&amp;gt;&#xA;                         &amp;lt;addClasspath&amp;gt;true&amp;lt;/addClasspath&amp;gt;&#xA;                         &amp;lt;classpathPrefix&amp;gt;lib/&amp;lt;/classpathPrefix&amp;gt;&#xA;                        &amp;lt;mainClass&amp;gt;com.xxx.xxxService&amp;lt;/mainClass&amp;gt;&#xA;                   &amp;lt;/manifest&amp;gt;&#xA;                &amp;lt;/archive&amp;gt;&#xA;            &amp;lt;/configuration&amp;gt;&#xA;        &amp;lt;/plugin&amp;gt;&#xA;        &amp;lt;plugin&amp;gt;                                # 单独打包lib&#xA;            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;maven-dependency-plugin&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;2.10&amp;lt;/version&amp;gt;&#xA;            &amp;lt;executions&amp;gt;&#xA;                &amp;lt;execution&amp;gt;&#xA;                    &amp;lt;id&amp;gt;copy-dependencies&amp;lt;/id&amp;gt;&#xA;                    &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&#xA;                    &amp;lt;goals&amp;gt;&#xA;                        &amp;lt;goal&amp;gt;copy-dependencies&amp;lt;/goal&amp;gt;&#xA;                    &amp;lt;/goals&amp;gt;&#xA;                    &amp;lt;configuration&amp;gt;&#xA;                        &amp;lt;outputDirectory&amp;gt;${project.build.directory}/lib&amp;lt;/outputDirectory&amp;gt;&#xA;                    &amp;lt;/configuration&amp;gt;&#xA;                &amp;lt;/execution&amp;gt;&#xA;            &amp;lt;/executions&amp;gt;&#xA;        &amp;lt;/plugin&amp;gt;&#xA;    maven-assembly-plugin                       # 打包lib, 有bug缺失spring xds文件, 同级jar会冲突&#xA;        &amp;lt;plugin&amp;gt;&#xA;             &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;&#xA;             &amp;lt;configuration&amp;gt;&#xA;                 &amp;lt;descriptorRefs&amp;gt;&#xA;                     &amp;lt;descriptorRef&amp;gt;jar-with-dependencies&amp;lt;/descriptorRef&amp;gt;&#xA;                 &amp;lt;/descriptorRefs&amp;gt;&#xA;                 &amp;lt;archive&amp;gt;&#xA;                     &amp;lt;manifest&amp;gt;&#xA;                         &amp;lt;mainClass&amp;gt;com.xxx.xxxService&amp;lt;/mainClass&amp;gt;&#xA;                    &amp;lt;/manifest&amp;gt;&#xA;                &amp;lt;/archive&amp;gt;&#xA;            &amp;lt;/configuration&amp;gt;&#xA;            &amp;lt;executions&amp;gt;&#xA;                &amp;lt;execution&amp;gt;&#xA;                    &amp;lt;id&amp;gt;make-assembly&amp;lt;/id&amp;gt;&#xA;                    &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&#xA;                    &amp;lt;goals&amp;gt;&#xA;                        &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;&#xA;                    &amp;lt;/goals&amp;gt;&#xA;                &amp;lt;/execution&amp;gt;&#xA;            &amp;lt;/executions&amp;gt;&#xA;        &amp;lt;/plugin&amp;gt;&#xA;    maven-shade-plugin                          # 打包lib, 同级jar会冲突, 提示SF,DSA,RSA冲突，排除META-INF相关文件&#xA;        &amp;lt;plugin&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;maven-shade-plugin&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;2.4.3&amp;lt;/version&amp;gt;&#xA;            &amp;lt;executions&amp;gt;&#xA;                &amp;lt;execution&amp;gt;&#xA;                    &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&#xA;                    &amp;lt;goals&amp;gt;&#xA;                        &amp;lt;goal&amp;gt;shade&amp;lt;/goal&amp;gt;&#xA;                    &amp;lt;/goals&amp;gt;&#xA;                    &amp;lt;configuration&amp;gt;&#xA;                        &amp;lt;filters&amp;gt;&#xA;                            &amp;lt;filter&amp;gt;&#xA;                                &amp;lt;artifact&amp;gt;*:*&amp;lt;/artifact&amp;gt;&#xA;                                &amp;lt;excludes&amp;gt;&#xA;                                    &amp;lt;exclude&amp;gt;META-INF/*.SF&amp;lt;/exclude&amp;gt;&#xA;                                    &amp;lt;exclude&amp;gt;META-INF/*.DSA&amp;lt;/exclude&amp;gt;&#xA;                                    &amp;lt;exclude&amp;gt;META-INF/*.RSA&amp;lt;/exclude&amp;gt;&#xA;                                &amp;lt;/excludes&amp;gt;&#xA;                            &amp;lt;/filter&amp;gt;&#xA;                        &amp;lt;/filters&amp;gt;&#xA;                        &amp;lt;transformers&amp;gt;&#xA;                            &amp;lt;transformer&#xA;                                    implementation=&amp;quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&amp;quot;&amp;gt;&#xA;                                &amp;lt;resource&amp;gt;META-INF/spring.handlers&amp;lt;/resource&amp;gt;&#xA;                            &amp;lt;/transformer&amp;gt;&#xA;                            &amp;lt;transformer&#xA;                                    implementation=&amp;quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&amp;quot;&amp;gt;&#xA;                                &amp;lt;resource&amp;gt;META-INF/spring.schemas&amp;lt;/resource&amp;gt;&#xA;                            &amp;lt;/transformer&amp;gt;&#xA;                            &amp;lt;transformer&#xA;                                    implementation=&amp;quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&amp;quot;&amp;gt;&#xA;                                &amp;lt;resource&amp;gt;META-INF/spring.tooling&amp;lt;/resource&amp;gt;&#xA;                            &amp;lt;/transformer&amp;gt;&#xA;                            &amp;lt;transformer&#xA;                                    implementation=&amp;quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&amp;quot;&amp;gt;&#xA;                                &amp;lt;mainClass&amp;gt;com.xxx.xxxInvoke&amp;lt;/mainClass&amp;gt;&#xA;                            &amp;lt;/transformer&amp;gt;&#xA;                        &amp;lt;/transformers&amp;gt;&#xA;                        &amp;lt;minimizeJar&amp;gt;true&amp;lt;/minimizeJar&amp;gt;&#xA;                        &amp;lt;shadedArtifactAttached&amp;gt;true&amp;lt;/shadedArtifactAttached&amp;gt;&#xA;                    &amp;lt;/configuration&amp;gt;&#xA;                &amp;lt;/execution&amp;gt;&#xA;            &amp;lt;/executions&amp;gt;&#xA;        &amp;lt;/plugin&amp;gt;&#xA;    maven-install-plugin&#xA;    spring-boot-maven-plugin&#xA;    gradle-maven-plugin&#xA;    protobuf-maven-plugin&#xA;    build-helper-maven-plugin                   # 用于指定自定义目录&#xA;    dockerfile-maven-plugin                     # root用户直接打包到docker images&#xA;        &amp;lt;plugin&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;com.spotify&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;dockerfile-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;1.4.10&amp;lt;/version&amp;gt;&#xA;            &amp;lt;configuration&amp;gt;&#xA;                &amp;lt;repository&amp;gt;${project.artifactId}&amp;lt;/repository&amp;gt;&#xA;                &amp;lt;contextDirectory&amp;gt;./&amp;lt;/contextDirectory&amp;gt;&#xA;                &amp;lt;tag&amp;gt;${project.version}&amp;lt;/tag&amp;gt;&#xA;                &amp;lt;buildArgs&amp;gt;&#xA;                    &amp;lt;JAR_FILE&amp;gt;mqtt/target/*.jar&amp;lt;/JAR_FILE&amp;gt;&#xA;                &amp;lt;/buildArgs&amp;gt;&#xA;            &amp;lt;/configuration&amp;gt;&#xA;        &amp;lt;/plugin&amp;gt;&#xA;        ./Dockerfile&#xA;            FROM primetoninc/jdk:1.8&#xA;&#xA;            #ADD mqtt/target/*.jar app.jar&#xA;            ARG JAR_FILE&#xA;&#xA;            COPY ${JAR_FILE} /opt/app.jar&#xA;&#xA;            ENTRYPOINT [&amp;quot;java&amp;quot;, &amp;quot;-jar&amp;quot;, &amp;quot;/app.jar&amp;quot;]&#xA;        mvn package dockerfile:build&#xA;方案&#xA;    新项目安装&#xA;        mvn clean install -DskipTests&#xA;        mvn install -rf :模块名 -DskipTests     # 指定模块开始&#xA;    ojdbc14本地加载&#xA;        ＃ oracle是收费的，所以不能直接下载到驱动&#xA;        o-&amp;gt; mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar -Dfile=ojdbc14-10.2.0.4.0.jar&#xA;        o-&amp;gt; 把ojdbc14-10.2.0.4.0.jar复制到目录下: /home/outrun/.m2/repository/com/oracle/ojdbc14/10.2.0.4.0/&#xA;        o-&amp;gt; /home/outrun/.m2/repository/com/oracle/ojdbc14/下会产生maven-metadata-local.xml文件存放maven引入依赖&#xA;        o-&amp;gt; 项目中引入本地依赖&#xA;            &amp;lt;dependency&amp;gt;&#xA;                &amp;lt;groupId&amp;gt;com.oracle&amp;lt;/groupId&amp;gt;&#xA;                &amp;lt;artifactId&amp;gt;ojdbc14&amp;lt;/artifactId&amp;gt;&#xA;                &amp;lt;version&amp;gt;10.2.0.4.0&amp;lt;/version&amp;gt;&#xA;                &amp;lt;/dependency&amp;gt;&#xA;    代理&#xA;        复制$M2_HOME/conf/settings.xml到.m2/&#xA;        settings.xml&#xA;            &amp;lt;proxies&amp;gt;&#xA;                &amp;lt;proxy&amp;gt;&#xA;                  &amp;lt;id&amp;gt;my-proxy&amp;lt;/id&amp;gt;&#xA;                  &amp;lt;active&amp;gt;true&amp;lt;/active&amp;gt;&#xA;                  &amp;lt;protocol&amp;gt;http&amp;lt;/protocol&amp;gt;&#xA;                  &amp;lt;host&amp;gt;localhost&amp;lt;/host&amp;gt;&#xA;                  &amp;lt;port&amp;gt;8123&amp;lt;/port&amp;gt;&#xA;                  &amp;lt;!--&#xA;                  &amp;lt;username&amp;gt;admin&amp;lt;/username&amp;gt;&#xA;                  &amp;lt;password&amp;gt;admin&amp;lt;/password&amp;gt;&#xA;                  &amp;lt;nonProxyHosts&amp;gt;repository.mycom.com|*.google.com&amp;lt;/nonProxyHosts&amp;gt;&#xA;                  --&amp;gt;&#xA;                &amp;lt;/proxy&amp;gt;&#xA;            &amp;lt;/proxies&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;代码&#34;&gt;&#xA;  代码&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;github&#xA;bitBucket&#xA;gitee.com&#xA;    # 码云&#xA;sentry&#xA;    # 产品error tracing&#xA;gerrit&#xA;    # code review 工具&#xA;coverallx&#xA;    # github上项目的coverage测试覆盖率条目由它提供服务&#xA;circleCI&#xA;    # github代码测试&#xA;travis-ci&#xA;    # 利用github hook测试&#xA;fitness&#xA;    # 自动单元测试&#xA;coverity&#xA;    # 代码静态检查&#xA;www.webpagetest.org&#xA;    # 测试网站性能&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;gitlab&#34;&gt;&#xA;  GitLab&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gitlab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;仓库&#34;&gt;&#xA;  仓库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%93%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;nexus&#34;&gt;&#xA;  Nexus&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nexus&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# maven, npm, go, docker, yum等&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;jfrog&#34;&gt;&#xA;  JFrog&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jfrog&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 全语言二进制仓库&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;cmdb&#34;&gt;&#xA;  CMDB&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cmdb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# configuration management database&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;bt-panel&#34;&gt;&#xA;  Bt-Panel&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bt-panel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 宝塔面板，服务器运维面板&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;jumpserver&#34;&gt;&#xA;  JumpServer&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jumpserver&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 跳板机&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;功能&#34;&gt;&#xA;  功能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8a%9f%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;认证&#34;&gt;&#xA;  认证&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%a4%e8%af%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;sshsecure-shell&#34;&gt;&#xA;  SSH（Secure Shell）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sshsecure-shell&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;特点&#xA;    1.加密和压缩：http与ftp都是明文传输&#xA;    2.ssh有很多子协议，实现不同功能：如sftp,scp&#xA;    3.端口:22&#xA;配置&#xA;    修改ip地址：&#xA;        有虚拟机时：先设置虚拟机的连接方式是桥接&#xA;        图形界面直接修改（或重启到root用户的图形界面修改）&#xA;        命令修改&#xA;            /etc/network/interfaces&#xA;                auto eth0&#xA;                iface eth0 inet static&#xA;                address ip地址&#xA;                netmask  子网掩码&#xA;                gateway  网关&#xA;                broadcast 广播地址&#xA;                dns-nameservers DNS&#xA;            重启网络服务：/etc/init.d/networking restart，&#xA;    /etc/ssh/sshd_config&#xA;        PasswordAuthentication no&#xA;            # 关闭密码登录&#xA;        PermitRootLogin no&#xA;            # 关闭root登录&#xA;命令&#xA;    ssh outrun@10.1.1.1&#xA;        # -p 22 端口&#xA;        # PubkeyAuthentication=no 不公钥登录&#xA;免登录&#xA;        ssh-keygen -t rsa&#xA;            # 一直回车，生成~/.ssh/id_rsa 与 id_rsa.pub两个文件&#xA;        ssh-copy-id -i 192.168.56.11&#xA;            # 这样就可以免登录访问192.168.56.11了&#xA;            ## ssh-copy-id -i localhost　免登录自己&#xA;&#xA;        或&#xA;        把A机下的1中生成的id_rsa.pub的内容复制到B机下，在B机的.ssh/authorized_keys文件里，这样可以多个主机对B机进行免登录&#xA;sshpass&#xA;    介绍&#xA;        命令行密码登录&#xA;    命令&#xA;        sshpass  -p zlycare@123 ssh zlycare@10.162.201.58&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;openvpn&#34;&gt;&#xA;  OpenVPN&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openvpn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;安装&#xA;    yum install openvpn easy-rsa lzo lzo-devel openssl openssl-devel -y&#xA;    或编译安装openvpn&#xA;        mkdir –p /usr/local/openvpn &amp;amp;&amp;amp; cd /usr/local/openvpn/&#xA;        ./configure --with-lzo-headers=/usr/local/include --with-lzo-lib=/usr/local/lib&#xA;        make&#xA;        make install&#xA;&#xA;生成证书&#xA;    目标&#xA;        服务器: ca.crt、server.key、server.crt、dh.pem&#xA;        客户端: ca.crt、client.key、client.crt&#xA;    查找模板&#xA;        find / -name &amp;quot;vars.example&amp;quot; -type f                         # vars文件&#xA;        find / -name &amp;quot;server.conf&amp;quot; -type f                          # server.conf文件&#xA;    进入目录easy-rsa&#xA;        cd /usr/local/openvpn/openvpn-2.0.9/easy-rsa/2.0/&#xA;        cd /usr/share/easy-rsa/3.0.3/&#xA;    设置vars&#xA;        cp vars.example vars&#xA;        vars文件&#xA;            set_var KEY_COUNTRY=&amp;quot;CN&amp;quot;&#xA;            set_var KEY_PROVINCE=&amp;quot;BJ&amp;quot;&#xA;            set_var KEY_CITY=&amp;quot;Beijing&amp;quot;&#xA;            set_var KEY_ORG=&amp;quot;linux&amp;quot;&#xA;            set_var KEY_EMAIL=&amp;quot;test@example.net&amp;quot;&#xA;            # set_var EASYRSA_NS_SUPPORT &amp;quot;yes&amp;quot;                      # 客户端配置ns-cert-type server时配置&#xA;    生成server文件&#xA;        # 配置文件在/etc/easy-rsa或 .../openvpn/easy-rsa&#xA;        rm -rf pki&#xA;        ./easyrsa init-pki                                          # pki目录&#xA;        ./easyrsa build-ca  nopass                                  # 回车过, 生成ca.crt&#xA;        ./easyrsa gen-req vpnserver nopass                          # 回车过, 生成vpnserver.key, vpnserver.req(密钥对、证书请求文件)&#xA;        ./easyrsa sign server vpnserver                             # 生成vpnserver.crt(ca.crt与vpnserver.req签名)&#xA;        ./easyrsa gen-dh                                            # 生成dh.pem(diffie hellman)&#xA;        cp -r ../3.0.3/ ~&#xA;    生成client文件&#xA;        rm -rf pki&#xA;        ./easyrsa init-pki&#xA;        ./easyrsa gen-req client nopass                             # 回车过, 生成client.key, client.req&#xA;        cp pki/reqs/client.req ~/3.0.3/pki/reqs/&#xA;        cp pki/private/client.key ~/3.0.3/pki/private/&#xA;        cd ~/3.0.3&#xA;        ./easyrsa sign client client                                # 生成client.crt(ca.crt与client.req签名)&#xA;    移动server文件到openvpn配置目录&#xA;        cp pki/{ca.crt,dh.pem} /etc/openvpn/server/&#xA;        cp pki/private/vpnserver.key /etc/openvpn/server/&#xA;        cp pki/issued/vpnserver.crt /etc/openvpn/server/&#xA;        cp server.conf /etc/openvpn/server&#xA;    下载client文件&#xA;        pki/ca.crt&#xA;        pki/private/client.key&#xA;        pki/issued/client.crt&#xA;server.conf&#xA;    cp -p ../../sample-config-files/server.conf /etc/openvpn&#xA;    o-&amp;gt; server.conf&#xA;        ;local 172.21.223.196&#xA;        port 1194&#xA;        proto udp&#xA;        dev tun&#xA;&#xA;        ca /etc/openvpn/ca.crt&#xA;        cert /etc/openvpn/server.crt&#xA;        key /etc/openvpn/server.key&#xA;        dh /etc/openvpn/dh1024.pem&#xA;&#xA;        server 192.168.200.0 255.255.255.0&#xA;        ifconfig-pool-persist ipp.txt&#xA;        ;client-config-dir &amp;quot;C:\\Program Files\\OpenVPN\\ccd&amp;quot;        # 支持TLS client&#xA;        push &amp;quot;route 0.0.0.0 0.0.0.0&amp;quot;&#xA;        keepalive 10 120&#xA;&#xA;        cipher AES-256-CBC&#xA;        comp-lzo                                                    # 减少带宽&#xA;        persist-key&#xA;        persist-tun&#xA;&#xA;        status openvpn-status.log&#xA;        log /var/log/openvpn.log&#xA;&#xA;        verb 3&#xA;        explicit-exit-notify 1                                      # 只能udp协议使用&#xA;    sudo openvpn --config /etc/openvpn/server.conf --daemon&#xA;    netstat -anulp | grep 1194&#xA;linux配置&#xA;    iptables&#xA;        vim /etc/sysctl.conf&#xA;            net.ipv4.ip_forward = 1     # 开启路由转发&#xA;        sysctl -p&#xA;        iptables -t nat -A POSTROUTING -s 192.168.200.0/24 -j SNAT --to-source 45.55.56.16&#xA;    firewall&#xA;        firewall-cmd  --add-service=openvpn --zone=public --permanent&#xA;        firewall-cmd --reload&#xA;client配置&#xA;    o-&amp;gt; client.ovpn&#xA;        client&#xA;        dev tun&#xA;        proto udp&#xA;        remote 45.55.56.16 1194&#xA;        resolv-retry infinite&#xA;        nobind&#xA;        ca ca.crt&#xA;        cert client.crt&#xA;        key client.key&#xA;        ;ns-cert-type server&#xA;        cipher AES-256-CBC&#xA;        comp-lzo&#xA;        persist-key&#xA;        persist-tun&#xA;        verb 3&#xA;        mute 20&#xA;    sudo openvpn --config client.ovpn&#xA;        # --user outrun&#xA;        # --auth-nocache&#xA;        # askpass pass.txt 放密码到文件&#xA;    o-&amp;gt; 免密码连接&#xA;        #!/usr/bin/expect -f&#xA;        spawn sudo openvpn --config /home/outrun/.openvpn/meiqia-vpn-ldap.ovpn&#xA;        # match_max 100000&#xA;        expect &amp;quot;*?assword*:*&amp;quot;&#xA;        send -- &amp;quot;1234\n&amp;quot;&#xA;        expect &amp;quot;*Username:*&amp;quot;&#xA;        send -- &amp;quot;outrun\n&amp;quot;&#xA;        expect &amp;quot;*Password:*&amp;quot;&#xA;        expect &amp;quot;#&amp;quot;&#xA;案例&#xA;    代理http上网                                                     # tcp连接国内服务器会被reset&#xA;        server.conf&#xA;            dev tap&#xA;            proto tcp&#xA;&#xA;            push &amp;quot;redirect-gateway def1 bypass-dhcp&amp;quot;&#xA;            push &amp;quot;dhcp-option DNS 114.114.114.114&amp;quot;&#xA;            push &amp;quot;dhcp-option DNS 8.8.8.8&amp;quot;&#xA;&#xA;            client-to-client&#xA;            ;explicit-exit-notify 1&#xA;        client.ovpn&#xA;            dev tap&#xA;            proto tcp&#xA;    改成用户名密码认证&#xA;        服务器&#xA;            server.conf&#xA;                auth-user-pass-verify /etc/openvpn/server/checkpsw.sh via-env&#xA;                verify-client-cert none&#xA;                username-as-common-name&#xA;                tls-auth /etc/openvpn/server/ta.key 0&#xA;                script-security 3&#xA;            checkpsw.sh&#xA;                #!/bin/sh&#xA;                PASSFILE=&amp;quot;/etc/openvpn/server/user/psw-file&amp;quot;&#xA;                LOG_FILE=&amp;quot;/etc/openvpn/server/log/openvpn-password.log&amp;quot;&#xA;                TIME_STAMP=`date &amp;quot;+%Y-%m-%d %T&amp;quot;`&#xA;&#xA;                if [ ! -r &amp;quot;${PASSFILE}&amp;quot; ]; then&#xA;                  echo &amp;quot;${TIME_STAMP}: Could not open password file \&amp;quot;${PASSFILE}\&amp;quot; for reading.&amp;quot; &amp;gt;&amp;gt; ${LOG_FILE}&#xA;                  exit 1&#xA;                fi&#xA;&#xA;                CORRECT_PASSWORD=`awk &#39;!/^;/&amp;amp;&amp;amp;!/^#/&amp;amp;&amp;amp;$1==&amp;quot;&#39;${username}&#39;&amp;quot;{print $2;exit}&#39; ${PASSFILE}`&#xA;&#xA;                if [ &amp;quot;${CORRECT_PASSWORD}&amp;quot; = &amp;quot;&amp;quot; ]; then&#xA;                  echo &amp;quot;${TIME_STAMP}: User does not exist: username=\&amp;quot;${username}\&amp;quot;, password=\&amp;quot;${password}\&amp;quot;.&amp;quot; &amp;gt;&amp;gt; ${LOG_FILE}&#xA;                  exit 1&#xA;                fi&#xA;&#xA;                if [ &amp;quot;${password}&amp;quot; = &amp;quot;${CORRECT_PASSWORD}&amp;quot; ]; then&#xA;                  echo &amp;quot;${TIME_STAMP}: Successful authentication: username=\&amp;quot;${username}\&amp;quot;.&amp;quot; &amp;gt;&amp;gt; ${LOG_FILE}&#xA;                  exit 0&#xA;                fi&#xA;&#xA;                echo &amp;quot;${TIME_STAMP}: Incorrect password: username=\&amp;quot;${username}\&amp;quot;, password=\&amp;quot;${password}\&amp;quot;.&amp;quot; &amp;gt;&amp;gt; ${LOG_FILE}&#xA;                exit 1&#xA;            chmod 645 checkpsw.sh&#xA;            mkdir user&#xA;            mkdir log&#xA;            user/psw-file&#xA;                outrun asdfasdf&#xA;            openvpn --genkey --secret ta.key&#xA;        客户端&#xA;            下载ta.key&#xA;            client.ovpn&#xA;                ;cert client.crt&#xA;                ;key client.key&#xA;                auth-user-pass&#xA;                tls-auth ta.key 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;shadowsocks&#34;&gt;&#xA;  Shadowsocks&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#shadowsocks&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;安装&#xA;    sudo yum -y install epel-release&#xA;    sudo yum -y install python-pip&#xA;    sudo pip install --upgrade pip&#xA;    sudo pip install shadowsocks&#xA;服务器&#xA;    server.json&#xA;        {&#xA;            &amp;quot;server&amp;quot;:&amp;quot;0.0.0.0&amp;quot;,&#xA;            &amp;quot;server_port&amp;quot;:443,&#xA;            &amp;quot;local_address&amp;quot;:&amp;quot;127.0.0.1&amp;quot;,&#xA;            &amp;quot;local_port&amp;quot;:1080,&#xA;            &amp;quot;password&amp;quot;:&amp;quot;asdfasdf&amp;quot;,&#xA;            &amp;quot;timeout&amp;quot;:300,&#xA;            &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;,&#xA;            &amp;quot;fast_open&amp;quot;:false,&#xA;            &amp;quot;workers&amp;quot;:5&#xA;        }&#xA;    ssserver -c server.json -d start&#xA;中继代理&#xA;    client.json&#xA;        {&#xA;            &amp;quot;server&amp;quot;:&amp;quot;47.74.230.238&amp;quot;,&#xA;            &amp;quot;server_port&amp;quot;:443,&#xA;            &amp;quot;local_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,&#xA;            &amp;quot;local_port&amp;quot;:1080,&#xA;            &amp;quot;password&amp;quot;:&amp;quot;asdfasdf&amp;quot;,&#xA;            &amp;quot;timeout&amp;quot;:300,&#xA;            &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;&#xA;        }&#xA;    sslocal -c client.json&#xA;协议转换&#xA;    安装polipo&#xA;    /etc/polipo/config&#xA;        logSyslog = false&#xA;        logFile = &amp;quot;/var/log/polipo/polipo.log&amp;quot;&#xA;        socksParentProxy = &amp;quot;127.0.0.1:1080&amp;quot;&#xA;        socksProxyType = socks5&#xA;        chunkHighMark = 50331648&#xA;        objectHighMark = 16384&#xA;        serverMaxSlots = 64&#xA;        serverSlots = 16&#xA;        serverSlots1 = 32&#xA;        proxyAddress = &amp;quot;0.0.0.0&amp;quot;&#xA;        proxyPort = 8123&#xA;    polipo -c /etc/polipo/config&#xA;客户端&#xA;    switchOmega&#xA;        SOCKS5 127.0.0.1 1080&#xA;        http 127.0.0.1 8123&#xA;    环境变量&#xA;        export http_proxy=http://127.0.0.1:8123&#xA;        export https_proxy=http://127.0.0.1:8123&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;opendj&#34;&gt;&#xA;  OpenDJ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#opendj&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    open source directory services for the java platform&#xA;    LDAPv3的认证系统&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;openssl&#34;&gt;&#xA;  OpenSSL&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openssl&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;使用&#xA;    openssl genrsa -out server.key 1024&#xA;        # 生成私钥&#xA;    openssl rsa -in server.key -pubout -out server.pem&#xA;        # 生成公钥&#xA;    openssl req -new -key ca.key -out ca.csr&#xA;        # 通过私钥生成csr(certificate signing request, 证书签名请求)文件&#xA;    openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt&#xA;        # 通过csr生成自签名ca证书，用来颁发证书&#xA;    openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in server.csr -out server.crt&#xA;        # 向自己的ca机构申请签名，需要ca.crt, ca.key, server.csr, 得到带有CA签名证书。用来给客户端验证公钥属于该域名&#xA;        # 客户端发起安全连接前会获取服务器端的证书, 并通过ca证书验证服务器端证书的真伪，并对服务器名称, IP地址等进行验证&#xA;    openssl s_client -connect 127.0.0.1:8000&#xA;        # 测试证书是否正常&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;应用控制&#34;&gt;&#xA;  应用控制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8%e6%8e%a7%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;forever&#34;&gt;&#xA;  Forever&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#forever&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;openvpn --config openvpn.conf&#xA;        # 连接&#xA;        ## --user outrun&#xA;        ## --auth-nocache&#xA;        # askpass pass.txt 放密码到文件&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;supervisor&#34;&gt;&#xA;  Supervisor&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#supervisor&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    监视重启&#xA;命令&#xA;    supervisord&#xA;        # 启动后台服务&#xA;    supervisorctl&#xA;        status          # 查看所有&#xA;        update          # 重载配置&#xA;        reload          # &#xA;&#xA;        start&#xA;        stop&#xA;        restart&#xA;        start all&#xA;        stop all&#xA;        restart all&#xA;&#xA;配置&#xA;    /etc/supervisor/supervisord.conf&#xA;        [include]&#xA;        files = /etc/supervisor/conf.d/*.conf&#xA;    /etc/supervisor/conf.d/app.conf&#xA;        [program:tri]&#xA;        command=/data/apps/tri/bin/tri --config /data/apps/tri/conf/config.tri.toml&#xA;        directory=/data/apps/tri&#xA;        autostart=true&#xA;        autorestart=true&#xA;        startsecs=10&#xA;        startretries=3&#xA;        stdout_logfile=/data/logs/supervisor/tri/access.log&#xA;        stdout_logfile_maxbytes=100MB&#xA;        stdout_logfile_backups=20&#xA;        stderr_logfile=/data/logs/supervisor/tri/stderr.log&#xA;        stderr_logfile_maxbytes=100MB&#xA;        stderr_logfile_backups=2&#xA;        environment=ASPNETCORE_ENVIRONMENT=Production       # 环境变量&#xA;        user=root                                           # 执行的用户&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;pm2&#34;&gt;&#xA;  PM2&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#pm2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    带有负载均衡功能的node应用进程管理器&#xA;    内建负载均衡(使用node cluster模块)&#xA;    后台运行&#xA;    热重载&#xA;    停止不稳定进程，如无限循环&#xA;安装&#xA;    npm install -g pm2&#xA;命令&#xA;    pm2 start app.js&#xA;    pm2 stop&#xA;    pm2 restart&#xA;    pm2 status&#xA;    pm2 info 1&#xA;    pm2 logs 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;个人操作&#34;&gt;&#xA;  个人操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%aa%e4%ba%ba%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ngrok&#34;&gt;&#xA;  Ngrok&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ngrok&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 内网穿透&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;vsftp&#34;&gt;&#xA;  VSFTP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#vsftp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    默认端口21&#xA;用户&#xA;    匿名用户&#xA;        默认为ftp或anonymous&#xA;        目录在/var/ftp&#xA;        只能下载不能上传&#xA;    本地用户&#xA;        用户名和密码与本地用户相同&#xA;        目录为该用户的登录目录&#xA;    虚拟用户&#xA;        文件配置名字和密码&#xA;        要生成认证文件&#xA;文件&#xA;    /usr/sbin/vsftpd                    # 主程序&#xA;    /etc&#xA;        /rc.d/init.d/vsftpd             # initd启动脚本&#xA;        /vsftpd.conf                    # 主配置&#xA;        /vsftpd.ftpusers                # 用户黑名单, 一行一名字&#xA;        /vsftpd.user_list               # 用户黑/白名单, 一行一名字&#xA;        /pam.d/vsftpd                   # pam认证文件&#xA;    /var&#xA;        /ftp                            # 匿名用户主目录&#xA;        /ftp/pub                        # 匿名用户的下载目录&#xA;默认用户与组&#xA;    用户&#xA;        adduser -d /var/ftp -g ftp -s /sbin/nologin ftp&#xA;    组&#xA;        ftp&#xA;命令&#xA;    systemctl start vsftpd&#xA;最小可用配置&#xA;    /etc/vsftpd.conf&#xA;        listen=YES&#xA;        local_enable=YES&#xA;        xferlog_enable=YES&#xA;        connect_from_port_20=YES&#xA;        pam_service_name=vsftpd&#xA;        seccomp_sandbox=NO&#xA;&#xA;        # Enable upload by local user.&#xA;        write_enable=YES&#xA;&#xA;        # Enable read by anonymous user (without username and password).&#xA;        secure_chroot_dir=/var/empty&#xA;        anonymous_enable=YES&#xA;        anon_root=/srv/ftp&#xA;        no_anon_password=YES&#xA;使用&#xA;    /etc/vsftpd.conf&#xA;        anonymous_enable=YES            # 允许匿名用户&#xA;        local_enable=YES                # linux用户可登录, 虚拟用户可登录&#xA;        write_enable=YES                # 可写&#xA;        local_umask=022                 # user文件权限, 默认077&#xA;        dirmessage_enable=YES           # 显示目录信息&#xA;        xferlog_enable=NO               # 记录上传/下载日志&#xA;        connect_from_port_20=YES        # 确保用20端口传输&#xA;        ls_recurse_enable=NO            # 允许ls -R&#xA;        allow_writeable_chroot=NO&#xA;        listen=NO&#xA;        listen_ipv6=YES                 # 包含ipv4,和listen只能有一个YES&#xA;&#xA;        pam_service_name=vsftpd&#xA;        local_root=/home/outrun/Downloads                       # linux用户默认目录。会先登录到用户目录，再切换到这里&#xA;        ftp_username=ftp                # 匿名用户名，默认ftp&#xA;        tcp_wrappers=NO                 # 结合tcp_wrapper限制ip登录&#xA;            /etc&#xA;                /hosts.allow            # 允许地址&#xA;                /hosts.deny             # 拒绝地址&#xA;    useradd -d /home/ftp ftp&#xA;    mkdir /home/ftp &amp;amp;&amp;amp; chown ftp /home/ftp &amp;amp;&amp;amp; chgrp ftp /home/ftp&#xA;    systemctl restart vsftpd&#xA;    打开tcp, udp端口21, 20&#xA;用户&#xA;    匿名登录&#xA;        /etc/vsftpd/vsftpd.conf&#xA;            anonymous_enable=YES&#xA;            anon_root=/home/outrun/Downloads                    # 匿名用户默认目录&#xA;            anon_upload_enable=YES      # 匿名可写，要求write_enable=YES&#xA;            anon_mkdir_write_enable=YES # 匿名创建文件夹&#xA;            anon_other_write_enable=YES # 匿名可删除、重命名&#xA;            anon_umask=000              # 如创建077文件，anon_umask=022时，则为055 &#xA;        chmod 777 dir1&#xA;&#xA;    本地用户登录&#xA;        /etc/vsftpd/vsftpd.conf&#xA;            anonymous_enable=NO&#xA;            userlist_enable=YES&#xA;            userlist_deny=YES           # YES时user_list为黑名单&#xA;            userlist_file=/etc/vsftpd/user_list&#xA;&#xA;            chroot_local_user=YES       # 默认可以chroot到用户home。YES时, chroot_list_file指定黑名单&#xA;            chroot_list_enable=YES&#xA;            chroot_list_file=/etc/vsftpd/chroot_file            # 名单用户只能访问自己home&#xA;            allow_writeable_chroot=YES  # 不限制chroot目录可写&#xA;        /etc/vsftpd/ftpusers&#xA;        /etc/vsftpd/user_list&#xA;            注释root&#xA;    虚拟用户&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;simplehttpserver&#34;&gt;&#xA;  SimpleHTTPServer&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#simplehttpserver&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;pythom -m SimpleHTTPServer 8080&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;pyshark&#34;&gt;&#xA;  Pyshark&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#pyshark&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    包嗅探&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;项目用工具&#34;&gt;&#xA;  项目用工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a1%b9%e7%9b%ae%e7%94%a8%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;知识库&#34;&gt;&#xA;  知识库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9f%a5%e8%af%86%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;confluence&#xA;    # 收费&#xA;NextCloud&#xA;    # 私有网盘&#xA;tiddlyWiki&#xA;    # 可在线定义目录树&#xA;github&#xA;    # 用wiki页面&#xA;gitbook&#xA;mediaWiki&#xA;    # 维基百科样式，只有单页目录树&#xA;dokuWiki&#xA;    # 只有网站地图&#xA;xwiki&#xA;    # 目录树, acl&#xA;语雀&#xA;hdwiki&#xA;    # 百科, 已停更&#xA;notion&#xA;    # 任务管理&#xA;minidoc&#xA;    # 原smartWiki(php), 改成golang开发的minidoc&#xA;有道云笔记&#xA;幕布&#xA;石墨&#xA;etherpad.org&#xA;    # 在线协作无缝编辑&#xA;dropbox&#xA;    # 文档协作&#xA;坚果云&#xA;    # 文档协作&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;网盘&#34;&gt;&#xA;  网盘&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%9b%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;google drive&#xA;百度云&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;沟通&#34;&gt;&#xA;  沟通&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b2%9f%e9%80%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Mattermost&#xA;    # 开源&#xA;team&#xA;    # 微软, 聊天&#xA;slack&#xA;    # 聊天&#xA;hipChat&#xA;    # Atlassian, 聊天&#xA;企业微信&#xA;钉钉&#xA;倍洽&#xA;飞书&#xA;瀑布IM&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;邮件&#34;&gt;&#xA;  邮件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%82%ae%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;gmail&#xA;阿里云邮箱&#xA;腾讯企业邮&#xA;zoho&#xA;网易企业邮&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;原型&#34;&gt;&#xA;  原型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%9f%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;zeplin&#xA;    # 设计和前端协同工具&#xA;蓝湖&#xA;    # 免费&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;团队协作&#34;&gt;&#xA;  团队协作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%a2%e9%98%9f%e5%8d%8f%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;jira&#xA;    # 进度管理跟踪, 敏捷开发&#xA;microsoft Project&#xA;    # 瀑布式开发&#xA;rational&#xA;    # IBM, 进度管理&#xA;teambition&#xA;    # 进度管理&#xA;basecamp&#xA;    # 进度管理&#xA;testlink&#xA;    # 测试收集, 进度管理&#xA;redmine&#xA;    # 开源, ror开发, 项目管理, 把成员、任务、文档、讨论等资源整合在一起。支持git, svn, cvs等&#xA;youtrack&#xA;    # jetbrains, 项目管理&#xA;禅道&#xA;    # 项目管理, 开源&#xA;trac&#xA;    # wiki, issue&#xA;tapd&#xA;    # 腾讯项目管理&#xA;    优势&#xA;        打通企业微信&#xA;    功能&#xA;worktile&#xA;    # microsoft项目管理&#xA;notion&#xA;明道云&#xA;云之家&#xA;eteams&#xA;今目标&#xA;tower&#xA;masterlab&#xA;    # 开源&#xA;openProject&#xA;    # 开源&#xA;peerProject&#xA;    # 开源&#xA;&#xA;trello&#xA;    # 进度管理&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;代码管理&#34;&gt;&#xA;  代码管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;github&#xA;gitee&#xA;coding&#xA;bitbucket&#xA;gitea&#xA;    # 开源&#xA;gitlab&#xA;gogs&#xA;    # 开源&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;测试&#34;&gt;&#xA;  测试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%8b%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;semaphore&#xA;codeClimate&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;文档&#34;&gt;&#xA;  文档&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%87%e6%a1%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;swagger&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;镜像&#34;&gt;&#xA;  镜像&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%95%9c%e5%83%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;harbor&#xA;nexus&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;部署&#34;&gt;&#xA;  部署&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%83%a8%e7%bd%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;drone&#xA;Travis-CI&#xA;CircleCI&#xA;GitLab-CI&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;集群&#34;&gt;&#xA;  集群&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9b%86%e7%be%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kuboard&#xA;prometheus&#xA;grafana&#xA;zabbix&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;日志&#34;&gt;&#xA;  日志&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%a5%e5%bf%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;ElasticStack&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
