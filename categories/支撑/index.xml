<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>支撑 on outrun的笔记</title>
    <link>https://runout.run/categories/%E6%94%AF%E6%92%91/</link>
    <description>Recent content in 支撑 on outrun的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Aug 2022 13:53:50 +0800</lastBuildDate>
    <atom:link href="https://runout.run/categories/%E6%94%AF%E6%92%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>支撑-分布式</title>
      <link>https://runout.run/docs/middleware/distributed/</link>
      <pubDate>Thu, 11 Oct 2018 10:33:48 +0800</pubDate>
      <guid>https://runout.run/docs/middleware/distributed/</guid>
      <description>&lt;h1 id=&#34;名词&#34;&gt;&#xA;  名词&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%8d%e8%af%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;Alb        automaticLoopBack 自动回环，虚拟接口&#xA;sdn        software defined network 软件定义网络&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;serverless&#34;&gt;&#xA;  Serverless&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#serverless&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;knative&#xA;    # google开源，serverless标准化方案，基于kubernetes和istio&#xA;    模块&#xA;        build&#xA;        serving&#xA;        eventing&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;servicemesh&#34;&gt;&#xA;  ServiceMesh&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#servicemesh&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;service-fabric&#34;&gt;&#xA;  Service Fabric&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#service-fabric&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 微软&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;istio&#34;&gt;&#xA;  Istio&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#istio&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;#google IBM, lyft开源，基于envoy&#xA;组成&#xA;    数据面板&#xA;    控制面板&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;knative&#34;&gt;&#xA;  Knative&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#knative&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    管理kubernetes, Istio&#xA;模块&#xA;    build&#xA;    serve&#xA;        config&#xA;        route&#xA;    event&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;traefik&#34;&gt;&#xA;  Traefik&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#traefik&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# go实现，多后台如kubernetes, swarm, marathon, mesos&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;linkerd&#34;&gt;&#xA;  Linkerd&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linkerd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# buoyant出品&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;conduit&#34;&gt;&#xA;  Conduit&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#conduit&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 面向kubernetes轻量化mesh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;fingle&#34;&gt;&#xA;  Fingle&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#fingle&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# twitter出品&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;envoy&#34;&gt;&#xA;  Envoy&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#envoy&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# lyft出品&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;nginmesh&#34;&gt;&#xA;  Nginmesh&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nginmesh&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# nginx推出&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;paas&#34;&gt;&#xA;  PaaS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#paas&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# platform as a service&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;cloudstack&#34;&gt;&#xA;  CloudStack&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cloudstack&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 托管在apache的开源、高可用、高扩展性的云计算平台&#xA;# 支持主流hypervisors&#xA;# 一个开源云计算解决方案，可以加速iaaS的部署、管理、配置&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;cloudfoundry&#34;&gt;&#xA;  CloudFoundry&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cloudfoundry&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# pivotal开源, 根据应用模板，动态生成很多tomcat, mysql, nosql, 动态控制这些实例的启停。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;openstack&#34;&gt;&#xA;  OpenStack&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openstack&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 云操作系统，管理虚拟资源&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;container-orchestration&#34;&gt;&#xA;  Container Orchestration&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#container-orchestration&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;特性&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;dubbo&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;spring cloud&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;kubernetes&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;配置管理&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;config&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;kubernetes configMap&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;服务发现&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;zookeeper&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;eureka, consul, zookeeper&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;kubernetes services&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;负载均衡&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;自带&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ribbon&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;kubernetes services&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;网关&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;zuul&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;kubernetes services&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;分布式追踪&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;spring cloud sleuth&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;open tracing&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;容错&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;不完善&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;hystrix&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;kubernetes health check&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;通信方式&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;rpc&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;http, message&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;安全模块&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;spring cloud security&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;分布式日志&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;ELK&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;EFK&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;任务管理&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;spring batch&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;kubernetes jobs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;kubernetes&#34;&gt;&#xA;  Kubernetes&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kubernetes&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# google开源的，borg的发展，在docker技术上，管理容器化应用&#xA;特点&#xA;    不限语言&#xA;    无侵入, 服务只写业务&#xA;    适合微服务                       # 调整服务副本数, 横向扩容&#xA;    无缝迁移到公有云                  # cluster ip实现不改配置迁移&#xA;    自动化资源管理&#xA;        服务发现，用dns解析服务名&#xA;        内嵌负载均衡&#xA;        部署实施&#xA;        治理&#xA;        监控&#xA;        故障发现、自我修复&#xA;        透明服务注册、发现&#xA;        服务滚动升级、在线扩容, 根据负载自动扩容缩容&#xA;        可扩展资源自动调度、多粒度资源配额&#xA;    多层安全防护、准入&#xA;    多租户&#xA;    完善的工具&#xA;&#xA;    pod运行容器&#xA;    etcd保存所有状态&#xA;架构&#xA;    cluster&#xA;        master&#xA;            api server              # 对外http rest接口, 管理资源对象(pod, RC, service)增删改查&#xA;            controller manager      # 管理控制器, node, pod, endpoint, namespace, serviceAccount, resourceQuota自动化管理&#xA;            scheduler               # 接收controller manager命令执行pod调度&#xA;            etcd                    # 配置&#xA;        node                        # 一master多node&#xA;            特点&#xA;                node宕机，pod调度到其它节点&#xA;            pod                     # 一node几百个pod, 基本操作单元，代表一个运行进程，内部封装一个(或多个紧密相关的)容器。&#xA;                特点&#xA;                    pod内通信高效，放密切相关服务进程&#xA;                    可以判断一组相关容器的状态(用pause)&#xA;                    pause解决共享ip、容器通信、共享文件的问题&#xA;                    pod间通信用虚拟二层协议(flannel, openvswitch)实现&#xA;                    普通pod在etcd存储，再调度到某node实例化，静态pod在node中存储，在node实例化&#xA;                    对pod可进行资源(cpu,内存)限额&#xA;                label               # 标签，用标签选择器选择。key和value由用户指定，可附加到node, pod, service, rc等&#xA;                pause容器            # 根容器，共享网络栈、挂载卷&#xA;            docker/rocket           # 容器&#xA;            kubelet                 # master监视pod, 创建、修改、监控、删除&#xA;            kube-proxy              # 代理pod接口&#xA;            fluentd                 # 日志收集、存储、查询&#xA;            kube-dns                # 服务dns解析&#xA;概念&#xA;    service                         # 服务网关&#xA;        特点&#xA;            唯一名字&#xA;            唯一虚拟ip(cluster ip, service ip, vip)                  # 可多端口，每端口有名字&#xA;            提供远程服务              # 目前socket&#xA;            应用到一组pod&#xA;    event                           # 探针检测失败记录，用于排查故障&#xA;    rc                              # replication controller&#xA;        副本数&#xA;        筛选标签&#xA;        pod模板&#xA;        改变pod镜像版本，滚动升级&#xA;    replica set                     # 1.2 rc升级, 支持基于集合的标签选择。被deployment使用&#xA;    deployment                      # pod编排, rc升级&#xA;        特点&#xA;            查看pod部署进度&#xA;    HPA                             # horizontal pod autoscaler, 自动扩容缩容&#xA;        指标&#xA;            cpu utilization percentage                              # 1分钟内利用率平均值&#xA;            应用自定义指标(tps, qps)&#xA;    volume&#xA;        emptyDir&#xA;        hostPath&#xA;        gcePersistentDisk&#xA;        awsElasticBlockStore&#xA;        NFS&#xA;        persistent volume&#xA;        namespace&#xA;        annotation&#xA;动作&#xA;    扩容&#xA;        创建rc自动创建pod, 调度到合适的node&#xA;            pod定义&#xA;            副本数&#xA;            监控label                # 筛选pod得到数量&#xA;命令&#xA;    kubectl&#xA;        --help                      # 帮助, 各命令之后都可加&#xA;        version&#xA;        cluster-info&#xA;        logs&#xA;            kubectl logs --tail=1000 appID1&#xA;                # 查看日志&#xA;        run&#xA;        exec&#xA;            kubectl exec -it appID1 /bin/sh&#xA;                # 交互命令进入app&#xA;        create&#xA;            -f mysql-rc.yaml        # 创建rc&#xA;            -f mysql-svc.yaml       # 创建service&#xA;        set &#xA;            image&#xA;        get&#xA;            rc                      # 查看rc&#xA;            pods&#xA;            pod&#xA;                -o&#xA;                    wide            # 显示详情，有node name&#xA;                o-&amp;gt;&#xA;                kubectl get pod -l app=app1 -o wide&#xA;                    # 查看pod app状态&#xA;            services&#xA;            svc                     # 查看service, 包含cluster ip&#xA;            nodes&#xA;            endpoints               # service pod的ip:端口&#xA;            deployments&#xA;        describe                    # 详情&#xA;            node&#xA;            pods&#xA;            deployments&#xA;        expose&#xA;        label&#xA;        delete&#xA;        scale                       # pod扩容或缩容&#xA;            --replicas=2&#xA;        autoscale                   # 创建hpa对象&#xA;            deployment&#xA;        rolling-update              # pod滚动升级&#xA;        rollout&#xA;            status&#xA;            undo&#xA;        apply                       # 应用配置&#xA;            -f&#xA;        proxy&#xA;    kubelet&#xA;    kube-apiserver&#xA;    kube-proxy&#xA;    kube-scheduler&#xA;    kubeadm&#xA;    kube-controller-manager&#xA;    hyperkube&#xA;    apiextensions-apiserver&#xA;    mounter&#xA;镜像&#xA;    kube-apiserver&#xA;    kube-controller-manager&#xA;    kube-scheduler&#xA;    kube-proxy&#xA;    pause&#xA;    etcd&#xA;    coredns&#xA;配置&#xA;    用yaml或json定义&#xA;    pod&#xA;        kind: Pod                   # 表明是Pod&#xA;        metadata:&#xA;            name: myweb             # pod名&#xA;            labels:&#xA;                name: myweb         # 标签&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;spring-cloud&#34;&gt;&#xA;  Spring Cloud&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;mesos&#34;&gt;&#xA;  Mesos&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mesos&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# twitter, apache开源的分布式资源管理框架, 两级调度器&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;dubbo&#34;&gt;&#xA;  Dubbo&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dubbo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    阿里开源，分布式服务框架，rpc方案，soa治理&#xA;功能&#xA;    远程通讯    # 多协议，多种长连接nio框架封装&#xA;    集群容错    # 负载均衡，容错，地址路由，动态配置&#xA;    自动发现    # 注册中心&#xA;节点&#xA;    容器(container)&#xA;    提供者(provider)&#xA;    消费者(consumer)&#xA;    注册中心(registry)&#xA;    监控中心(monitor)&#xA;    调用关系&#xA;        容器启动提供者&#xA;        提供者注册&#xA;        消费者订阅&#xA;        注册中心返回地址列表, 长连接更新&#xA;        消费者软负载均衡挑选列表中提供者&#xA;        提供者和消费者累计调用次数和时间，定时发送到监控中心&#xA;容错机制&#xA;    failover    # 默认，失败自动切换&#xA;    failfast    # 立即报错，用于幂等写操作&#xA;    failsafe    # 忽略&#xA;    failback    # 定时重发&#xA;    forking     # 并行多个取最快(any)&#xA;    broadcast   # 逐个多个，异常退出&#xA;连接方式&#xA;    广播      # 不需要中心节点，适用开发测试, 地址段224.0.0.0 - 239.255.255.255&#xA;        服务端配置 applicationContext-service.xml&#xA;            &amp;lt;dubbo:application name=”taotao-manager-service” /&amp;gt;&#xA;            &amp;lt;dubbo:registry address=”multicast://224.5.6.7:1234” /&amp;gt;&#xA;            &amp;lt;dubbo:protocol name=”dubbo” port=”20880” /&amp;gt;&#xA;            &amp;lt;dubbo:service interface=”com.taotao.manager.service.TestService” ref=”testServiceImpl” /&amp;gt;&#xA;        客户端配置 springMVC.xml&#xA;            &amp;lt;dubbp:application name=”taotao-manager-web” /&amp;gt;&#xA;            &amp;lt;dubbo:registry address=”multicast://224.5.6.7:1234” /&amp;gt;&#xA;            &amp;lt;dubbo:service interface=”com.taotao.manager.service.TestService” id=”testService”&#xA;            timeout=”10000000” /&amp;gt;&#xA;    直连&#xA;        服务端配置&#xA;            &amp;lt;dubbo:application name=”taotao-manager-service” /&amp;gt;&#xA;            &amp;lt;dubbo:registry address=”N/A” /&amp;gt;&#xA;            &amp;lt;dubbo:protocol name=”dubbo” port=”20880” /&amp;gt;&#xA;            &amp;lt;dubbo:service interface=”com.taotao.manager.service.TestService” ref=”testServiceImpl” /&amp;gt; applicationContext-service.xml&#xA;        客户端配置 springMVC.xml&#xA;            &amp;lt;dubbp:application name=”taotao-manager-web” /&amp;gt;&#xA;            &amp;lt;dubbo:service interface=”com.taotao.manager.service.TestService” id=”testService”&#xA;            timeout=”10000000” /&amp;gt;&#xA;注册中心&#xA;    zookeeper&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;dubbox&#34;&gt;&#xA;  Dubbox&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dubbox&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    当当网扩展Dubbo&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;netflix-oss&#34;&gt;&#xA;  Netflix OSS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#netflix-oss&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;orleans&#34;&gt;&#xA;  orleans&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#orleans&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# .NET&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;hsf&#34;&gt;&#xA;  HSF&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hsf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# high-speed service framework, 阿里出品， socket直连&#xA;特点&#xA;    不增加中间点(稳定，高度可伸缩)&#xA;结构&#xA;    注册服务信息，推送服务地址&#xA;    基于osgi&#xA;组件&#xA;    服务提供者&#xA;    消费者&#xA;    地址服务器&#xA;    配置服务器               # 分布式配置&#xA;    规则服务(diamond)       # 设置(黑白名单，认证，权重，限流)与推送&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;nscale&#34;&gt;&#xA;  NScale&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nscale&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 可扩展容器，用node.js和docker实现&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;armada&#34;&gt;&#xA;  Armada&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#armada&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# python微服务&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;soa&#34;&gt;&#xA;  SOA&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#soa&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 面向服务架构 service oriented architecture&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;eai&#34;&gt;&#xA;  EAI&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#eai&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Enterprise Application Integration 建立底层结构将异构应用集成&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;esb&#34;&gt;&#xA;  ESB&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#esb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Enterprise Service Bus 企业服务总线， 是连接中枢&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;rpc&#34;&gt;&#xA;  RPC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rpc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 远程过程调用 remote procedure call&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;thrift&#34;&gt;&#xA;  Thrift&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#thrift&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;cxf&#34;&gt;&#xA;  CXF&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cxf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;常识&#xA;    自己内部整合spring(但是不耦合)&#xA;支持的协议&#xA;    soap1.1/1.2&#xA;    post/http&#xA;    restful&#xA;    http&#xA;使用&#xA;    导入cxf包&#xA;    方法1      # 不支持注解&#xA;        String address=&amp;quot;http://localhost:8888/hello&amp;quot;;&#xA;            ServerFactoryBean factoryBean=new ServerFactoryBean();&#xA;            factoryBean.setAddress(address);&#xA;            factoryBean.setServiceBean(new MyWS());&#xA;            factoryBean.create();&#xA;    方法2      # 支持注解,wsdl文件中类型不再单独schema文件&#xA;        ServerFactoryBean factoryBean = new JaxWsServerFactoryBean      # java and xml web service&#xA;    日志    # 记录握手信息(访问wsdl文件)&#xA;            ## 看日志记录得到 soap&#xA;        serverFactoryBean.getInInterceptors().add(new LoggingInInterceptor());&#xA;        serverFactoryBean.getOutInterceptors().add(new LoggingOutInterceptor());&#xA;整合spring&#xA;    o-&amp;gt; cxf2.4.4.jar/schemas/jaxws.xsd中找到命名空间&amp;quot;http://cxf.apache.org/jaxws&amp;quot;&#xA;    o-&amp;gt; 配置applicationContext.xml，加入cxf的命名空间http://cxf.apache.org/jaxws,schema地址为http://cxf.apache.org/schemas/jaxws.xsd。&#xA;        并且在eclipse中配置schema约束文件的路径&#xA;            # 该xsd约束文件的url地址用的是包地址,不规范&#xA;    o-&amp;gt; applicationContext.xml中配置&#xA;        &amp;lt;bean id=&amp;quot;studentService&amp;quot; class=&amp;quot;test.spring.StudentServiceImpl&amp;quot;/&amp;gt;&#xA;            # 用于：自身调用，被spring引用&#xA;        &amp;lt;jaxws:server serviceClass=&amp;quot;test.spring.StudentService&amp;quot; address=&amp;quot;/student&amp;quot;&amp;gt;&#xA;            # address配置服务的名称即可(web.xml的servlet中配置了服务的实际访问地址)&#xA;            ## serviceClass配置的才是真正的服务，既然它是接口，那么webService注解也应该写在接口上&#xA;            &amp;lt;jaxws:serviceBean&amp;gt;&#xA;                &amp;lt;ref bean=&amp;quot;studentService&amp;quot;/&amp;gt;&#xA;            &amp;lt;jaxws:inInterceptors&amp;gt;&#xA;                &amp;lt;bean class=&amp;quot;org.apache.cxf.interceptor.LoggingInInterceptor&amp;quot; /&amp;gt;&#xA;            &amp;lt;jaxws:outInterceptors&amp;gt;&#xA;                &amp;lt;bean class=&amp;quot;org.apache.cxf.interceptor.LoggingOutInterceptor&amp;quot; /&amp;gt;&#xA;    o-&amp;gt; web.xml中配置servlet&#xA;         &amp;lt;servlet&amp;gt;&#xA;              &amp;lt;servlet-name&amp;gt;springWS&#xA;              &amp;lt;servlet-class&amp;gt;org.apache.cxf.transport.servlet.CXFServlet        # 在cxf-2.4.4.jar包中&#xA;              &amp;lt;load-on-startup&amp;gt;1&#xA;         &amp;lt;servlet-mapping&amp;gt;&#xA;              &amp;lt;servlet-name&amp;gt;springWS&#xA;              &amp;lt;url-pattern&amp;gt;/ws/*&#xA;    o-&amp;gt; web.xml中配置spring监听器&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;grpc&#34;&gt;&#xA;  GRPC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#grpc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;protobuf&#34;&gt;&#xA;  Protobuf&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#protobuf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 通信协议&#xA;命令&#xA;    protoc -I. -I-I$GOPATH/src  --go_out=plugins=grpc:. *&#xA;        # -I import目录&#xA;    protoc --grpc-gateway_out=.&#xA;插件&#xA;    安装&#xA;        # go build 出protoc-gen-go后，放入go/bin下&#xA;    protoc-gen-go&#xA;        # 编译proto文件&#xA;    protoc-gen-grpc-gateway&#xA;        # http服务&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;rmi&#34;&gt;&#xA;  RMI&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rmi&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# java远程调用 remote method invocation&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;hessian&#34;&gt;&#xA;  Hessian&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hessian&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 是caucho公司的开源协议,基于http&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;burlap&#34;&gt;&#xA;  Burlap&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#burlap&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# caucho公房的开源协议,基于http&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;httpinvoker&#34;&gt;&#xA;  HttpInvoker&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#httpinvoker&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# spring提供的协议，必须用spring&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;web-service&#34;&gt;&#xA;  Web Service&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#web-service&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# soap通讯&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;粘合层&#34;&gt;&#xA;  粘合层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b2%98%e5%90%88%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;治理服务发现&#34;&gt;&#xA;  治理(服务发现)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b2%bb%e7%90%86%e6%9c%8d%e5%8a%a1%e5%8f%91%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;zookeeper&#34;&gt;&#xA;  Zookeeper&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#zookeeper&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    google chubby的开源实现。用于服务发现&#xA;    保证CP&#xA;    分布式, hadoop中hbase的组件&#xA;    fast paxos算法        # paxos存在活锁问题, fast paxos通过选举产生leader, 只有leader才能提交proposer&#xA;功能&#xA;    配置维护&#xA;    域名服务&#xA;    分布式同步&#xA;    组服务&#xA;    分布式独享锁、选举、队列&#xA;流程&#xA;    选举leader        # 多种算法, leader有最高执行ID&#xA;    同步数据&#xA;    大多数机器得到响应follow leader&#xA;exhibitor&#xA;    # supervisor for zk&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;eureka&#34;&gt;&#xA;  Eureka&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#eureka&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Netflix，保证AP&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;consul&#34;&gt;&#xA;  Consul&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#consul&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Apache，保证CA&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;etcd&#34;&gt;&#xA;  Etcd&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#etcd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# kubernetes用，保证CP&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;路由控制&#34;&gt;&#xA;  路由控制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b7%af%e7%94%b1%e6%8e%a7%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;负载均衡策略&#xA;    随机、轮询、调用延迟判断、一致性哈希、粘滞连接&#xA;本地路由优先策略&#xA;    优先JVM（injvm），优先相同物理机（innative）&#xA;配置方式&#xA;    统一注册表、本地配置、动态下发&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;配置&#34;&gt;&#xA;  配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;spring-cloud-config&#34;&gt;&#xA;  Spring Cloud Config&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-config&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;diamond&#34;&gt;&#xA;  Diamond&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#diamond&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 淘宝&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;archaius&#34;&gt;&#xA;  Archaius&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#archaius&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# netflix&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;disconf&#34;&gt;&#xA;  Disconf&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#disconf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 百度&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;qconf&#34;&gt;&#xA;  QConf&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#qconf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 360&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;任务&#34;&gt;&#xA;  任务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%bb%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;elastic-job&#34;&gt;&#xA;  Elastic-Job&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#elastic-job&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 当当网&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;azkaban&#34;&gt;&#xA;  Azkaban&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#azkaban&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# linkedin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;spring-cloud-task&#34;&gt;&#xA;  Spring Cloud Task&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-task&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;跟踪&#34;&gt;&#xA;  跟踪&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b7%9f%e8%b8%aa&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;zipkin&#34;&gt;&#xA;  zipkin&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#zipkin&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# twitter&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;opentracing&#34;&gt;&#xA;  Opentracing&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#opentracing&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;hydra&#34;&gt;&#xA;  Hydra&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hydra&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 京东&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;spring-cloud-sleuth&#34;&gt;&#xA;  Spring Cloud Sleuth&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-sleuth&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h2 id=&#34;监控&#34;&gt;&#xA;  监控&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%91%e6%8e%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;spyjs&#34;&gt;&#xA;  Spy.js&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spyjs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# webstorm用的监控工具&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;alinode&#34;&gt;&#xA;  Alinode&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#alinode&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 朴灵写的运行时性能管理工具&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;oneapm&#34;&gt;&#xA;  OneAPM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#oneapm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 监控node性能&#xA;功能&#xA;    接口响应时间&#xA;    数据库方法时间&#xA;    外部服务时间&#xA;    单请求的耗时比&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;容错&#34;&gt;&#xA;  容错&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%b9%e9%94%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;hystrix&#34;&gt;&#xA;  Hystrix&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hystrix&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;功能&#xA;    服务线程隔离、信号量隔离&#xA;    降级: 超时、资源不足&#xA;    熔断: 自动降级、快速恢复&#xA;    请求缓存、请求合并&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;代理&#34;&gt;&#xA;  代理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;gearman&#34;&gt;&#xA;  Gearman&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gearman&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 分布式计算, 把工作委派给其他机器&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;hazelcast&#34;&gt;&#xA;  Hazelcast&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hazelcast&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 基于内存的数据网格，用于分布式计算&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;twemproxy&#34;&gt;&#xA;  Twemproxy&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#twemproxy&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;redis/memcache分片代理&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;高可用&#34;&gt;&#xA;  高可用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%ab%98%e5%8f%af%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# high-availability linux&#xA;目标&#xA;    reliability: 可靠性&#xA;    availability: 可用性&#xA;    serviceability: 可服务性&#xA;        ras: remote access service(远程服务访问)&#xA;术语&#xA;    节点(node): 唯一主节点，多个备用节点&#xA;    资源(resource): 是节点可控制的实体，主节点发生故障时，可以被其它节点接管&#xA;        例如:&#xA;            磁盘分区&#xA;            文件系统&#xA;            ip地址&#xA;            应用程序服务&#xA;            nfs文件系统&#xA;    事件(event): 集群中可能发生的事件&#xA;        例如:&#xA;            系统故障&#xA;            网络连通故障&#xA;            网卡故障&#xA;            应用程序故障&#xA;    动作(action): 事件发生时ha的响应方式&#xA;        例如: 用shell 脚本对资源进行转移&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;心跳&#34;&gt;&#xA;  心跳&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%83%e8%b7%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;heartbeat&#34;&gt;&#xA;  HeartBeat&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#heartbeat&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;2.0模块&#xA;    heartbeat: 节点间通信检测模块&#xA;    ha-logd: 集群事件日志服务&#xA;    CCM(Consensus CLuster Membership): 集群成员一致性管理模块&#xA;    LRM(Local Resource Manager): 本地资源管理模块&#xA;    Stonith Daemon: 使出现问题的节点从集群资源中脱离&#xA;    CRM(Cluster Resource management): 集群资源管理模块&#xA;    Cluster policy engine: 集群策略引擎&#xA;            用于实现节点与资源之间的管理与依赖关系&#xA;    Cluster transition  engine: 集群转移引擎&#xA;&#xA;3.0拆分之后的组成部分&#xA;    Heartbeat: 负责节点之间的通信&#xA;    Cluster Glue: 中间层，关联Heartbeat 与 Pacemaker,包含LRM 与 stonith&#xA;    Resource Agent: 控制服务启停，监控服务状态脚本集合，被LRM调用&#xA;    Pacemaker: 也就是曾经的CRM，包含了更多的功能&#xA;        管理接口:&#xA;            crm shell&#xA;            一个使用ajax web 的web窗口&#xA;            hb_gui图形工具&#xA;            DRBD-MC, 一个基于java的工具&#xA;&#xA;版本差异&#xA;    与1.x相比，2.1.x版本变化&#xA;        保留原来所有功能&#xA;        自动监控资源&#xA;        对各资源组进行独立监控&#xA;        同时监控系统负载&#xA;            自动切换到负载低的node上&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;keepalived&#34;&gt;&#xA;  Keepalived&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#keepalived&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;vrrp&#xA;    # virtual router redundancy protocol 虚拟路由器冗余协议&#xA;    # 解决静态路由出现的闪单点故障问题，它能够保证网络的不间断．稳定运行&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;负载&#34;&gt;&#xA;  负载&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b4%9f%e8%bd%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# load balance&#xA;方法&#xA;        dns轮循&#xA;&#xA;        java nio&#xA;        erlang语言&#xA;        linux epoll&#xA;        bsd kqueue&#xA;        消息队列、事件通知&#xA;        c/c++下ace, boost.asio, libev(libevent)&#xA;        服务器mina, jetty, node.js, netty&#xA;        java协程框架 quasar kilim&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;haproxy&#34;&gt;&#xA;  Haproxy&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#haproxy&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;监控页面&#xA;        /status&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;tengine&#34;&gt;&#xA;  Tengine&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tengine&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 淘宝基于nginx修改，添加了功能&#xA;监控&#xA;    /upstream_status&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;openresty&#34;&gt;&#xA;  OpenResty&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openresty&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 淘宝改的nginx, lua工具&#xA;安装&#xA;    yum install -y gcc gcc-c++ kernel-devel readline-devel pcre-devel openssl-devel openssl zlib zlib-devel pcre-devel&#xA;    wget openresty-1.9.15.1.tar.gz&#xA;    ./configure --prefix=/opt/openresty --with-pcre-jit --with-ipv6 --without-http_redis2_module --with-http_iconv_module -j2&#xA;    make &amp;amp;&amp;amp; make install&#xA;    ln -s /opt/openresty/nginx/sbin/nginx /usr/sbin&#xA;    /opt/openresty/nginx/conf/nginx.conf&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;varnish&#34;&gt;&#xA;  Varnish&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#varnish&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 反向代理, http缓存&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;traffic-server&#34;&gt;&#xA;  Traffic Server&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#traffic-server&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# apache 缓存&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;squid&#34;&gt;&#xA;  Squid&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#squid&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;配置文件&#xA;    /etc/squid/squid.conf&#xA;代理类型&#xA;    普通代理&#xA;    透明代理&#xA;    反向代理&#xA;缓存&#xA;    动态资源&#xA;    静态资源&#xA;参考资料&#xA;    squid 透明代理详解&#xA;配置&#xA;    # squid.conf&#xA;    http_port 3128                                                # squid服务端口&#xA;    icp_port 3130                                                # udp端口,用来接收和发送ICP消息&#xA;    cache_dir ufs /var/spool/squid                                # 缓存目录, 写入方式有aufs与ufs两种,aufs使用大量线程异步进行磁盘i/o操作&#xA;    cache_access_log /var/log/squid/access.log&#xA;    cache_log /var/log/squid/cache.log&#xA;    cache_store_log /var/log/squid/store.log&#xA;    pid_filename /var/run/squid.pid                        # 日志文件位置&#xA;&#xA;    #auth_param basic children 5&#xA;    #auth_param basic realm Squid proxy-caching web server&#xA;    #auth_param basic credentialsttl 2 hours                 # 关闭认证，认证一般不需要&#xA;&#xA;    cache_effective_user squid&#xA;    cache_effective_group squid&#xA;    cache_mgr youraccount@your.e.mail                        # 设置squid用户及用户组、管理员账号&#xA;&#xA;    cache_mem 128 MB                                        # 运行内存配置&#xA;&#xA;    cache_swap_low 90&#xA;    cache_swap_high 95&#xA;    maximum_object_size 4096 KB                        ＃ 与磁盘容量相关的配置，90、95为百分比，磁盘大时4096 KB可以改成32768 KB&#xA;&#xA;    maximum_object_size_in_memory 8 KB                ＃ 内存缓存资料大小&#xA;&#xA;    以下为定义acl(访问控制列表)&#xA;            ＃ 语法为:acl&amp;lt;acl&amp;gt; &amp;lt;acl名称&amp;gt; &amp;lt;acl类型&amp;gt; &amp;lt;配置的内容&amp;gt;&#xA;    acl All src 0/0&#xA;    acl Manager proto cache_object  acl Localhost src 127.0.0.1/32&#xA;    acl Safe_ports port 80 21 443 563 70 210 280 488 591 777 1025-65535&#xA;    acl SSL_ports 443 563&#xA;    acl CONNECT method CONNECT&#xA;    acl MyNetwork src 192.168.0.0/16&#xA;&#xA;    以下为利用前面定义的acl,定义访问控制规则&#xA;    http_access allow Manager Localhost&#xA;    http_access deny Manager&#xA;    http_access deny !Safe_ports&#xA;    http_access deny CONNECT SSL_ports&#xA;    http_access allow MyNetwork&#xA;    http_access deny All&#xA;&#xA;    例子: 禁止访问sina&#xA;    acl sina dstdomain .sina.com.cn .sina.com&#xA;    http_access deny sina&#xA;    或&#xA;    acl sina dst 58.63.236.26 58.63.236.27 58.63.236.28 58.63.236.29 58.63.236.30 58.63.236.31 58.63.236.32 58.63.236.33 58.63.236.34 58.63.236.35 58.63.236.36 58.63.236.37 58.63.236.38 58.63.236.39 58.63.236.49 58.63.236.50&#xA;    http_access deny sina&#xA;    或&#xA;    acl sina dst www.sina.com.cn&#xA;    http_access deny sina&#xA;&#xA;    例子: 禁止来自某些ip的访问&#xA;    acl zhang src 192.168.63.6/32&#xA;    http_access deny zhang&#xA;&#xA;    例子: 禁止在某些时段访问&#xA;    acl Working_hours MTWHF 08:00-17:00&#xA;    http_access allow Working_hours&#xA;    http_access deny !Working_hours&#xA;&#xA;    例子: 禁止某个代理客户建立过多连接&#xA;    acl OverConnLimit maxconn&#xA;    http_access deny OverConnLimit&#xA;&#xA;    定义与其它代理服务器的关系,语法: &amp;lt;cache_peer&amp;gt; &amp;lt;主机名称&amp;gt; &amp;lt;类别&amp;gt; &amp;lt;http_port&amp;gt; &amp;lt;icp_port&amp;gt; &amp;lt;其它参数&amp;gt;&#xA;    cache_peer 192.168.60.6 parent 4480 7 no-query default&#xA;&#xA;    #设置与其它代理服务器的关系: &amp;lt;cache_peer_access&amp;gt; &amp;lt;上层 Proxy &amp;gt; &amp;lt;allow|deny&amp;gt; &amp;lt;acl名称&amp;gt;&#xA;    #cache_peer_access 192.168.60.6 allow aclxxx&#xA;    #cache_peer_access 192.168.60.6 deny !aclxxx&#xA;    coredump_dir /var/spool/squid                                        # 崩溃存储目录&#xA;使用&#xA;    step1 检查配置文件&#xA;        squid -k parse&#xA;    step2  初始化cache 目录&#xA;        squid -z(X)                                # X会显示过程&#xA;    step3 启动squid&#xA;        service squid start&#xA;        或&#xA;        /usr/local/squid/sbin/squid -sD&#xA;    停止squid&#xA;        squid -k shutdown&#xA;    重新载入配置&#xA;        squid -k reconfigure&#xA;    滚动日志&#xA;        squid -k rotate&#xA;案例&#xA;    透明代理&#xA;        step1 检查配置文件&#xA;            squid -k parse&#xA;        step2  初始化cache 目录&#xA;            squid -z(X)                                # X会显示过程&#xA;        step3 启动squid&#xA;            service squid start&#xA;            或&#xA;            /usr/local/squid/sbin/squid -sD&#xA;        停止squid&#xA;            squid -k shutdown&#xA;        重新载入配置&#xA;            squid -k reconfigure&#xA;        滚动日志&#xA;            squid -k rotate&#xA;    代理&#xA;        squid.conf&#xA;            http_port 3128&#xA;            http_access allow all&#xA;            或&#xA;            http_port 3128&#xA;            http_access deny all前面添加&#xA;            acl 192.168.0.42 src 192.168.0.0/24&#xA;            http_access allow 192.168.0.42                        ＃ 192.168.0.42为允许的ip&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;lvs&#34;&gt;&#xA;  LVS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lvs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    第四层开始负载(可以建立到三层负载)&#xA;&#xA;    第四层负载&#xA;        socket进必须连lvs&#xA;&#xA;模式&#xA;    tun&#xA;        # lvs负载均衡器将请求包发给物理服务器，后者将应答包直接发给用户&#xA;    net&#xA;        # 请求和应答都经过lvs&#xA;    dr&#xA;        # 不要隧道结构的tun&#xA;使用&#xA;    DR模式 centos6&#xA;    yum install-y gcc gcc-c++ makepcre pcre-devel kernel-devel openssl-devel libnl-devel popt-devel&#xA;    modprobe -l |grep ipvs&#xA;        # 检查内核是否集成&#xA;    echo &amp;quot;1&amp;quot; &amp;gt; /proc/sys/net/ipv4/ip_forward&#xA;        # 开启路由转发&#xA;    安装ipvsadm&#xA;        http://www.linuxvirtualserver.org/software/kernel-2.6/ipvsadm-1.26.tar.gz&#xA;    安装keepalived&#xA;        http://www.keepalived.org/software/keepalived-1.2.7.tar.gz&#xA;        ./configure --prefix=/usr/local/keepalived&#xA;&#xA;        cp  /usr/local/keepalived/etc/rc.d/init.d/keepalived        /etc/init.d/&#xA;        cp /usr/local/keepalived/etc/sysconfig/keepalived        /etc/sysconfig/&#xA;        mkdir /etc/keepalived/&#xA;        cp /usr/local/keepalived/etc/keepalived/keepalived.conf        /etc/keepalived/&#xA;        cp /usr/local/keepalived/sbin/keepalived        /usr/sbin/&#xA;&#xA;        o-&amp;gt; 配置文件/etc/keepalived/keepalived.conf&#xA;        ! Configuration File forkeepalived&#xA;        global_defs {&#xA;        notification_email {&#xA;        test@sina.com    #故障接受联系人&#xA;        }&#xA;        notification_email_from admin@test.com  #故障发送人&#xA;        smtp_server 127.0.0.1  #本机发送邮件&#xA;        smtp_connect_timeout 30&#xA;        router_id LVS_MASTER  #BACKUP上修改为LVS_BACKUP&#xA;        }&#xA;        vrrp_instance VI_1 {&#xA;        state MASTER    #BACKUP上修改为BACKUP&#xA;        interface eth0&#xA;        virtual_router_id 51  #虚拟路由标识，主从相同&#xA;        priority 100  #BACKUP上修改为90&#xA;        advert_int 1&#xA;        authentication {&#xA;        auth_type PASS&#xA;        auth_pass 1111  #主从认证密码必须一致&#xA;        }&#xA;        virtual_ipaddress {    #Web虚拟IP（VTP）&#xA;        172.0.0.10&#xA;        }&#xA;        }&#xA;        virtual_server 172.0.0.10 80 { #定义虚拟IP和端口&#xA;        delay_loop 6    #检查真实服务器时间，单位秒&#xA;        lb_algo rr      #设置负载调度算法，rr为轮训&#xA;        lb_kind DR      #设置LVS负载均衡DR模式&#xA;        persistence_timeout 50 #同一IP的连接60秒内被分配到同一台真实服务器&#xA;        protocol TCP    #使用TCP协议检查realserver状态&#xA;        real_server 172.0.0.13 80 {  #第一个web服务器&#xA;        weight 3          #节点权重值&#xA;        TCP_CHECK {      #健康检查方式&#xA;        connect_timeout 3 #连接超时&#xA;        nb_get_retry 3    #重试次数&#xA;        delay_before_retry 3  #重试间隔/S&#xA;        }&#xA;        }&#xA;        real_server 172.0.0.14 80 {  #第二个web服务器&#xA;        weight 3&#xA;        TCP_CHECK {&#xA;        connect_timeout 3&#xA;        nb_get_retry 3&#xA;        delay_before_retry 3&#xA;            }&#xA;        }&#xA;        }&#xA;&#xA;        service keepalived restart&#xA;&#xA;    启动脚本 /etc/init.d/real.sh&#xA;        #description : start realserver&#xA;        VIP=172.0.0.10&#xA;        . /etc/init.d/functions&#xA;        case &amp;quot;$1&amp;quot; in&#xA;        start)&#xA;        /sbin/ifconfig lo:0 $VIP broadcast $VIP netmask 255.255.255.255 up&#xA;        echo &amp;quot;1&amp;quot; &amp;gt;/proc/sys/net/ipv4/conf/lo/arp_ignore&#xA;        echo &amp;quot;2&amp;quot; &amp;gt;/proc/sys/net/ipv4/conf/lo/arp_announce&#xA;        echo &amp;quot;1&amp;quot; &amp;gt;/proc/sys/net/ipv4/conf/all/arp_ignore&#xA;        echo &amp;quot;2&amp;quot; &amp;gt;/proc/sys/net/ipv4/conf/all/arp_announce&#xA;        echo &amp;quot;LVS RealServer Start OK&amp;quot;&#xA;        ;;&#xA;        stop)&#xA;        /sbin/ifconfig lo:0 down&#xA;        echo &amp;quot;0&amp;quot; &amp;gt;/proc/sys/net/ipv4/conf/lo/arp_ignore&#xA;        echo &amp;quot;0&amp;quot; &amp;gt;/proc/sys/net/ipv4/conf/lo/arp_announce&#xA;        echo &amp;quot;0&amp;quot; &amp;gt;/proc/sys/net/ipv4/conf/all/arp_ignore&#xA;        echo &amp;quot;0&amp;quot; &amp;gt;/proc/sys/net/ipv4/conf/all/arp_announce&#xA;        echo &amp;quot;LVS RealServer Stoped OK&amp;quot;&#xA;        ;;&#xA;        *)&#xA;        echo &amp;quot;Usage: $0 {start|stop}&amp;quot;&#xA;        exit 1&#xA;        esac&#xA;&#xA;    o-&amp;gt; 开机启动&#xA;        chmod +x /etc/init.d/real.sh&#xA;        /etc/init.d/real.sh start&#xA;        echo &amp;quot;/etc/init.d/real.sh start&amp;quot; &amp;gt;&amp;gt; /etc/rc.local&#xA;    o-&amp;gt; 测试&#xA;        service httpd start&#xA;        echo &amp;quot;1&amp;quot; &amp;gt; /var/www/html/index.html&#xA;        service iptables stop&#xA;        setenforce 0&#xA;            # 关闭selinux&#xA;    o-&amp;gt; 其他命令&#xA;        ipvsadm -ln&#xA;            # 集群中服务器ip信息&#xA;        ip addr&#xA;            # 显示VIP当前绑定的服务器&#xA;        tail -f /var/log/messages&#xA;            # 日志&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数据库&#34;&gt;&#xA;  数据库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;读写分离&#34;&gt;&#xA;  读写分离&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%bb%e5%86%99%e5%88%86%e7%a6%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;MySQL主从复制&#xA;Haproxy + 多Slave&#xA;DRBD + Heartbeat + MySQL&#xA;MySQL Cluster&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;分片&#34;&gt;&#xA;  分片&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;问题&#xA;    事务&#xA;    Join&#xA;    迁移&#xA;    扩容&#xA;    ID生成&#xA;    分页&#xA;方案&#xA;    事务补偿        # 数据对账：基于日志对比、同步标准数据源&#xA;    分区            # MySQL机制分文件存储，客户端无感知&#xA;    分表            # 客户端管理分表路由&#xA;    分库&#xA;        为什么 &#xA;            单库无法承接连接数时分库，MySQL单库5千万条，Oracle单库一亿条&#xA;        策略&#xA;            数值范围&#xA;            取模&#xA;            日期&#xA;框架&#xA;    Sharding-JDBC&#xA;    TSharding&#xA;代理&#xA;    Atlas&#xA;    MyCAT&#xA;    Vitess&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;分布式文件系统&#34;&gt;&#xA;  分布式文件系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;HDFS            # 批量读写，高吞吐量，不适合小文件&#xA;FastDFS         # 轻量级，适合小文件&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;一致性&#34;&gt;&#xA;  一致性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e8%87%b4%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;CAP&#xA;    一致性&#xA;        强一致性、弱一致性（秒级），最终一致性&#xA;    可用性&#xA;    分区容错性（网络故障）&#xA;BASE&#xA;    Basically Available（基本可用），Soft state（软状态），Eventually consistent（最终一致性）&#xA;幂等性&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;分布式锁&#34;&gt;&#xA;  分布式锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;算法&#xA;    PAXOS&#xA;    Zab&#xA;        # Zookeeper使用&#xA;    Raft&#xA;        # 三角色：Leader（领袖），Follower（群众），Candidtate（候选人）&#xA;    Gossip&#xA;        # Cassandra使用&#xA;实现方式&#xA;    数据库&#xA;        有单点问题&#xA;    缓存&#xA;        非阻塞性能好&#xA;        有锁不释放问题&#xA;        实现&#xA;            RedLock setnx&#xA;            Memcached add&#xA;    Zookeeper&#xA;        有序临时节点，集群透明解决单点问题，锁被释放，锁可重入&#xA;        性能不如缓存，吞吐量随集群规模变大而下降&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;一致性哈希&#34;&gt;&#xA;  一致性哈希&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e8%87%b4%e6%80%a7%e5%93%88%e5%b8%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;扩容映射&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;分布式事务&#34;&gt;&#xA;  分布式事务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e4%ba%8b%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;分类&#xA;    两阶段提交、多阶段提交&#xA;    TCC事务&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;atomikos&#34;&gt;&#xA;  Atomikos&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#atomikos&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h1 id=&#34;id生成器&#34;&gt;&#xA;  ID生成器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#id%e7%94%9f%e6%88%90%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;Snowflake算法           # Twitter&#xA;    41位时间戳+10位机器标识（比如IP，服务器名称等）+12位序列号(本地计数器)&#xA;MySQL自增ID + &amp;quot;REPLACE INTO XXX:SELECT LAST_INSERT_ID();&amp;quot;&#xA;    # Flicker&#xA;MongoDB ObjectId&#xA;    不能自增&#xA;UUID&#xA;    无序，过长，影响检索性能&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>支撑-原理</title>
      <link>https://runout.run/docs/basic/computer/principle/</link>
      <pubDate>Wed, 10 Oct 2018 15:25:12 +0800</pubDate>
      <guid>https://runout.run/docs/basic/computer/principle/</guid>
      <description>&lt;h1 id=&#34;主机&#34;&gt;&#xA;  主机&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%bb%e6%9c%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cpu&#34;&gt;&#xA;  cpu&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cpu&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    单cpu串行工作，前任务完成，后任务才开始                             # 串行不适合图形处理(多点，线，面要同时乘投影矩阵)&#xA;    cpu把大量空间和电量分配给控制器和缓存，不能集成太多计算单元&#xA;    cpu内存通过cpu总线连接, cpu总线与pci总线通过主桥(北桥)连接&#xA;        gpu在pci总线上&#xA;        控制逻辑在cpu中运行, 生成渲染数据, 到内存, 再到显存显卡计算。&#xA;        内存到显存数据传输最花费时间。&#xA;原理&#xA;    处理单元(processing unit)&#xA;        算术逻辑单元(arithmetic logic unit)&#xA;        处理寄存器(processor register)&#xA;    控制单元(control unit)&#xA;        指令寄存器(instruction register)&#xA;        程序计数器(program counter)&#xA;    指令集架构(ISA, instruction set architecture)                   # 机器码易兼容, 软件易编程, 易升级cpu&#xA;        精简指令集RISC(reduced instruction set computing)&#xA;        复杂指令集CISC(complex instruction set computer)&#xA;    时钟频率(clock speed)&#xA;    生产&#xA;        生产线散热决定生存率，决定cpu型号&#xA;    多级缓存&#xA;        L1, L2, L3, L4&#xA;    虚拟化&#xA;        虚拟机监视器(VMM, virtual machine monitors)&#xA;分类&#xA;    指令流的重数分类&#xA;        SI(single instruction stream)单指令流&#xA;        MI(multiple instruction stream)多指令流&#xA;    操作数流的重数分类&#xA;        SD(single data stream)单数据流&#xA;        MD(multiple data stream)多数据流&#xA;    SISD 串行计算机&#xA;    SIMD 阵列机(多处理单元)&#xA;    MISD 很少&#xA;    MIMD&#xA;        多处理机&#xA;        多计算机&#xA;硬件并行&#xA;    位级(bit-level): 32位, 64位计算机&#xA;    指令级(instruction-level)              # 处理器内部并行度很高&#xA;        流水线&#xA;            指令分步骤(指令流), 每步专门部件处理&#xA;            多指令流并行, 部件不空闲等待单指令流结束&#xA;            六级流水线步骤&#xA;                取指(FI), 译码(DI), 计算操作数地址(CO), 取操作数(FO), 执行指令(EI), 写操作数(WO)&#xA;        多发射(超标量)&#xA;            一时钟周期处理多指令&#xA;        超线程&#xA;            模拟多个逻辑线程&#xA;        乱序执行&#xA;        猜测执行&#xA;    数据级&#xA;        向量体系结构、图形处理器&#xA;        单指令多数据(SIMD)架构&#xA;    线程级                                 # 紧耦合硬件模型中开发数据级或任务级并行，线程间有交互&#xA;    请求级                                 # OS或程序耦合任务间并行&#xA;程序并行&#xA;    数据级(DLP, data-level parallel)&#xA;    任务级(TLP, task-level parallel)       # 多处理器, 超线程, 虽只有4个核，但可用核返回8&#xA;        内存&#xA;            共享内存模型&#xA;            分布式内存模型&#xA;        进程: 独有内存&#xA;        线程: 共享进程内存(地址空间、文件描述符)&#xA;            一个进程下的轻量进程&#xA;            POSIX线程api是对已有unix进程模型扩展, 与进程多方面类似&#xA;                自己的信号掩码&#xA;                cpu affinity(倾向在某cpu尽量长时间运行)&#xA;                cgroups&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;进程调度&#34;&gt;&#xA;  进程调度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%9b%e7%a8%8b%e8%b0%83%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;等级&#xA;    高级调度(High-Level Scheduling)&#xA;        作业调度, 后备作业调入内存运行&#xA;    低级调度(Low-Level Scheduling)&#xA;        进程调度, 就绪队列中某进程获得cpu&#xA;    中级调度(Intermediate-Level Scheduling)&#xA;        虚拟存储器引入, 内外存对换区进行进程对换&#xA;&#xA;方式&#xA;    非剥夺方式&#xA;        处理机分配给某进程后一直运行下去,直到阻塞时,才分配处理机到另一个进程&#xA;    剥夺方式&#xA;        进程运行时,系统基于某种原则,剥夺分配给它的处理机.&#xA;        采用算法&#xA;            先进先出算法&#xA;                批处理系统用. 总把处理机分配给最先进队的进程, 将一直执行下去,直到阻塞&#xA;            短进程优先(SCBF  Shortest CPU Burst First)&#xA;                批处理系统用. 从就绪队列中选出下一个cpu执行期最短的进程,分配处理机&#xA;            轮转法&#xA;                分时系统中,都采用时间片轮转法&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;gpu&#34;&gt;&#xA;  gpu&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gpu&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    gpu控制单元少, 计算单元多&#xA;    显卡在pci总线上&#xA;原理&#xA;    数据级并行&#xA;        单条指令并行应用于数据集(SIMD)&#xA;    CUDA(compute unified device architecutre)                       # nvidia推出的通用并行计算架构&#xA;        多网格(grid)组织，每网格多(512-1536)线程块&#xA;        线程块线程相同指令地址, 通过共享存储器(shared memory)和栅栏(barrier)块内通信&#xA;            不同块不通信，粗粒度并行&#xA;            同块通信，细粒度并行&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;内存&#34;&gt;&#xA;  内存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%85%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;原理&#xA;    虚拟内存(virtual memory)&#xA;    页表(page table)&#xA;        控制寄存器(control register)&#xA;            CR3保存页目录表内存基地址&#xA;        4级页表(PML4)&#xA;        转换检测缓冲区(TLB, translation lookaside buffer)&#xA;dma&#xA;    # direct memory access 不依赖cpu的内存存取&#xA;栈&#xA;    申请方式: 系统自动分配&#xA;    申请响应: 栈剩余空间小于申请空间, 报overflow&#xA;    申请大小限制: 栈是向低地址扩展的连续内存，线顶地址和最大容量是系统编译时预设的，windows下为2M(或1M), 申请超过剩余空间报overflow&#xA;    申请效率: 系统分配，速度快&#xA;    存储内容: 函数调用时，函数调用语句的下一条指令的地址进栈，然后是参数(C中由右向左), 然后是局部变量。调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向开始保存的函数下一指令，继续运行&#xA;    数据结构: 满足后进先出的数据结构&#xA;堆&#xA;    申请方式: 程序手动申请&#xA;    申请响应: os有记录空闲内存地址的链表，申请时遍历链表，寻找第一个空间大于申请空间的堆结点，该结点从空闲结点删除，节点分配给程序。自动将多余部分重新放入空闲链表&#xA;    申请大小限制：堆是向高地址扩展的不连续内存，系统用链表存储空闲内存地址。受限于有效虚拟内存&#xA;    申请效率: 慢，容易产生内存碎片&#xA;    存储内容: 堆头部一个字节存放堆的大小。内容由程序员安排&#xA;    数据结构: 满足优先队列的数据结构(第1个元素有最高优先权)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;网络&#34;&gt;&#xA;  网络&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%bb%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;ABR(area border router)：区域边界路由器&#xA;子网隔离&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;状态&#34;&gt;&#xA;  状态&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%8a%b6%e6%80%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;cookie&#34;&gt;&#xA;  cookie&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cookie&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    cookie的弊端&#xA;        数据在客户端可以被修改，所以不能存重要数据&#xA;        cookie中字段太多会影响传输效率&#xA;请求头&#xA;    set-cookie&#xA;        # 规定cookie的格式为name = value&#xA;响应&#xA;    path&#xA;        # cookie发送的相对路径&#xA;    expires和maxAge&#xA;        # expires是UTC时间, maxAge是cookie多久后过期&#xA;        ## 不设置这两个时产生的是session cookie, 它是transient的，用户关闭浏览器时清除。一般用来保存session_id&#xA;    secure&#xA;        # true时, cookie在HTTP中是无效的, 在HTTPS中才有效&#xA;    httpOnly&#xA;        # 通知浏览器不允许脚本操作document.cookie。一般都应设置为true, 可以避免被xss攻击拿到cookie&#xA;签名( 信息摘要算法)&#xA;    原user=&#39;alsotang&#39;&#xA;    现user=sha1(&#39;my_secret&#39; + &#39;alsotang&#39;) === &#39;xxxx...xxx&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;session&#34;&gt;&#xA;  session&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#session&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    session通过cookie中存放session_id来实现&#xA;    可以存放在&#xA;        1. 内存&#xA;        2. cookie本身&#xA;            # 不用担心集群的状态共享问题，安全性可以遵照最佳实践来，也是有保证的，最大的弊端在于增大了数据量传输。有受到回放攻击的危险&#xA;        3. redis或memcached等缓存&#xA;            # 常用&#xA;        4. 数据库中&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;osi分层&#34;&gt;&#xA;  OSI分层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#osi%e5%88%86%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;物理层&#xA;数据链路层&#xA;网络层&#xA;传输层&#xA;会话层&#xA;表示层&#xA;应用层&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;数据链路层&#34;&gt;&#xA;  数据链路层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e9%93%be%e8%b7%af%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;分层&#xA;    数据链路层分为两层&#xA;        llc上层子层                # Logical Link Control 逻辑链路控制。&#xA;        mac下层子层                # Media Access Control 介质访问控制层&#xA;&#xA;帧(frame)传输&#xA;    网络驱动程序成型帧,  网卡发送到网线上，到达目的机器，以网络驱动程序解析&#xA;协议&#xA;    以太网&#xA;    令牌环&#xA;    HDLC&#xA;    帧中继&#xA;    ISDN&#xA;    ATM&#xA;    IEEE 802.11&#xA;    FDDI&#xA;    PPP&#xA;mac&#xA;    Media Access Control&#xA;        mac帧结构&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://runout.run/docs/architecture/mac.jpg&#34; alt=&#34;&amp;quot;&amp;quot;&#34; /&gt;&#xA;单位&#xA;字节&#xA;帧类型/长度（TYPE/LEN）：&#xA;该字段的值大于1500时，表示上层数据使用的协议类型。例如0x0806表示ARP请求或应答，0x0800表示IP协议。&#xA;该字段的值小于1500时表示以太网数据的长度，上层携带LLC-PDU。&#xA;帧校验FCS：&#xA;以太网采用32位CRC冗余校验。&#xA;llc&#xA;Logical Link Control&#xA;llc-pdu结构&#xA;&lt;img src=&#34;https://runout.run/docs/architecture/llc1.jpg&#34; alt=&#34;&amp;quot;&amp;quot;&#34; /&gt;&#xA;&lt;img src=&#34;https://runout.run/docs/architecture/llc2.jpg&#34; alt=&#34;&amp;quot;&amp;quot;&#34; /&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
