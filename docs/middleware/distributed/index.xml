<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>支撑-分布式 on outrun的笔记</title>
    <link>https://runout.run/docs/middleware/distributed/</link>
    <description>Recent content in 支撑-分布式 on outrun的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 22 Sep 2021 21:45:53 +0800</lastBuildDate>
    <atom:link href="https://runout.run/docs/middleware/distributed/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Cloud</title>
      <link>https://runout.run/docs/middleware/distributed/spring_cloud/</link>
      <pubDate>Thu, 11 Oct 2018 10:33:48 +0800</pubDate>
      <guid>https://runout.run/docs/middleware/distributed/spring_cloud/</guid>
      <description>&lt;h1 id=&#34;亿级流量&#34;&gt;&#xA;  亿级流量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%bf%e7%ba%a7%e6%b5%81%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;流量接入层&#34;&gt;&#xA;  流量接入层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%81%e9%87%8f%e6%8e%a5%e5%85%a5%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;二级域名&#xA;    泛域名&#xA;    A记录&#xA;dns解析&#xA;    udp&#xA;        向网关请求dns解析&#xA;    httpDNS&#xA;        用ip请求http服务, 返回域名解析的ip&#xA;        因为用ip请求，适合app，不适合网页&#xA;lvs + keepalive             # 多lvs时用dns负载&#xA;nginx&#xA;    openresty&#xA;        kong&#xA;动静分离&#xA;    cdn&#xA;        dns动态域名解析&#xA;        cdn分发服务&#xA;            源服务拉取FastDFS&#xA;            CDN节点分发&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;web服务层&#34;&gt;&#xA;  WEB服务层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#web%e6%9c%8d%e5%8a%a1%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;webflux&#xA;    不基于重量的servlet标准&#xA;    基于netty&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;eureka&#34;&gt;&#xA;  Eureka&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#eureka&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;使用&#xA;    @EnableEurekaServer&#xA;    application.properties&#xA;        eureka.client.register-with-eureka=false                # 是否注册自己&#xA;        eureka.client.fetch-registry=false                      # 是否拉取eureka&#xA;        eureka.client.service-url.defaultZone=http://localhost:7900/eureka/         # 设置注册中心的URL&#xA;        eureka.instance.hostname=euk1.com&#xA;        spring.application.name=EurekeServer                    # eureka集群中各节点要同名&#xA;行为&#xA;    register                    # 注册&#xA;    renew                       # 通过心跳, 默认30s。三次失败删除实例&#xA;    fetch registry              # 拉注册的信息&#xA;    cancel                      # 发取消请求，删除实例&#xA;    time lag                    # 同步时间延迟&#xA;    communication mechanism     # 通讯机制，默认jersey和jackson&#xA;功能&#xA;    唯一标识                        # service id&#xA;        主机名:application.name:端口&#xA;    提供RestAPI, 可多终端接入&#xA;问题&#xA;    一致性问题方案&#xA;        Eureka间不同步，client向多个Eureka提交&#xA;        Enreka间同步，Eureka强可用性弱一致性&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;基础&#34;&gt;&#xA;  基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    spring boot基础上构建，快速构建分布式系统, 全家桶&#xA;    面向云环境架构(云原生)    # 适合在docker和paas部署&#xA;功能&#xA;    配置管理&#xA;    服务发现&#xA;    熔断&#xA;    智能路由&#xA;    微代理&#xA;    控制总线&#xA;    全局锁&#xA;    决策竞选&#xA;    分布式会话&#xA;    集群状态管理&#xA;子项目&#xA;    spring cloud netflix    # 对netflix oss套件整合&#xA;        eureka     # 服务治理(注册、发现)&#xA;        hystrix    # 容错管理&#xA;        ribbon     # 软负载均衡(客户端)&#xA;        feign      # 基于hystrix和ribbon，服务调用组件&#xA;        zuul       # 网关，智能路由、访问过滤&#xA;        archaius   # 外部化配置&#xA;    基础&#xA;        spring cloud starters       # 基础依赖, 高版本取消&#xA;        spring cloud commons&#xA;    服务&#xA;        spring cloud consul         # 封装consul(服务发现与配置, 与docker无缝)&#xA;        spring cloud cluster        # 抽象zookeeper, redis, hazelcast, consul的选举算法和通用状态模式实现接口&#xA;        spring cloud cloudfoundry   # 与pivotal cloudfoundry整合&#xA;        spring cloud aws            # 整合aws&#xA;        spring cloud zookeeper      # 整合zookeeper&#xA;        spring cloud cli            # groovy中快速创建应用&#xA;        spring cloud task           # 任务&#xA;    配置&#xA;        spring cloud config         # 应用配置外部化, 推送客户端配置, 支持git存储&#xA;    消息&#xA;        spring cloud bus            # 消息总线，传播集群状态变化来触发动作，如刷新配置&#xA;        spring cloud stream         # 声明式发送、接收消息&#xA;    监控&#xA;        spring cloud sleuth         # 跟踪&#xA;    安全&#xA;        spring cloud security       # 应用安全控制, zuul代理中OAuth2中继器&#xA;    测试&#xA;        spring cloud contract       # 契约测试, 可用groovy和yaml定义&#xA;版本&#xA;    用命名不用版本号，因为有多子项目版本，易混淆&#xA;    命名用伦敦地铁站用，字母表排序&#xA;缺点&#xA;    难于追查框架问题&#xA;    非二进制通信协议&#xA;    适合中小团队&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;配置&#34;&gt;&#xA;  配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;pom.xml&#xA;    &amp;lt;modules&amp;gt;&#xA;        &amp;lt;module&amp;gt;spring-cloud-common&amp;lt;/module&amp;gt;&#xA;        &amp;lt;module&amp;gt;spring-cloud-provider-book&amp;lt;/module&amp;gt;&#xA;        &amp;lt;module&amp;gt;spring-cloud-service-discovery&amp;lt;/module&amp;gt;&#xA;        &amp;lt;module&amp;gt;spring-cloud-api-gateway&amp;lt;/module&amp;gt;&#xA;        &amp;lt;module&amp;gt;spring-cloud-consumer-book&amp;lt;/module&amp;gt;&#xA;        &amp;lt;module&amp;gt;spring-cloud-monitor-dashboard&amp;lt;/module&amp;gt;&#xA;        &amp;lt;module&amp;gt;spring-cloud-aggregator&amp;lt;/module&amp;gt;&#xA;        &amp;lt;module&amp;gt;spring-cloud-zipkin-server&amp;lt;/module&amp;gt;&#xA;        &amp;lt;module&amp;gt;spring-cloud-admin-server&amp;lt;/module&amp;gt;&#xA;        &amp;lt;module&amp;gt;spring-cloud-config-server&amp;lt;/module&amp;gt;&#xA;    &amp;lt;/modules&amp;gt;&#xA;    &amp;lt;parent&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;relativePath/&amp;gt;&#xA;    &amp;lt;/parent&amp;gt;&#xA;    &amp;lt;dependencyManagement&amp;gt;&#xA;        &amp;lt;dependencies&amp;gt;&#xA;            &amp;lt;dependency&amp;gt;&#xA;                &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xA;                &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;&#xA;                &amp;lt;version&amp;gt;Edgware.SR3&amp;lt;/version&amp;gt;&#xA;                &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xA;                &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xA;            &amp;lt;/dependency&amp;gt;&#xA;        &amp;lt;/dependencies&amp;gt;&#xA;    &amp;lt;/dependencyManagement&amp;gt;&#xA;    &amp;lt;repositories&amp;gt;&#xA;        &amp;lt;repository&amp;gt;&#xA;            &amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt;&#xA;            &amp;lt;url&amp;gt;https://repo.spring.io/libs-release&amp;lt;/url&amp;gt;&#xA;        &amp;lt;/repository&amp;gt;&#xA;    &amp;lt;/repositories&amp;gt;&#xA;    &amp;lt;pluginRepositories&amp;gt;&#xA;        &amp;lt;pluginRepository&amp;gt;&#xA;            &amp;lt;id&amp;gt;spring-releases&amp;lt;/id&amp;gt;&#xA;            &amp;lt;url&amp;gt;https://repo.spring.io/libs-release&amp;lt;/url&amp;gt;&#xA;        &amp;lt;/pluginRepository&amp;gt;&#xA;    &amp;lt;/pluginRepositories&amp;gt;&#xA;application.yml&#xA;    spring:&#xA;        profiles: peer1                         # bean的逻辑组&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;组件&#34;&gt;&#xA;  组件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%84%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;dependencyManagement&#xA;    spring-cloud-dependencies&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;spring-cloud-spring-boot&#34;&gt;&#xA;  spring cloud spring boot&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-spring-boot&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;spring-cloud-eureka&#34;&gt;&#xA;  spring cloud eureka&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-eureka&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;原理&#xA;    生产者向eureka注册, 周期发送心跳(默认30s)&#xA;    eureka服务间同步注册信息&#xA;    消费者请求地址，缓存本地&#xA;    eurake接收生产者心跳超时, 设置为down, 推送状态到消费者&#xA;    eurake短期down过多生产者，进入自我保护不再down&#xA;组件&#xA;    spring-cloud-starter-[netflix-]eureka-server&#xA;&#xA;application.yml&#xA;    eureka:&#xA;        instance:&#xA;            hostname: localhost                 # 实例主机名&#xA;        client:&#xA;            registerWithEureka: false           # 当前服务不注册&#xA;            fetchRegistry: false                # 不获取注册信息&#xA;            serviceUrl:                         # server地址&#xA;                defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/&#xA;bootstrap.yml                                   # 基础配置, 待拉取config&#xA;&#xA;注解&#xA;    @EnableEurekaServer                         # 修饰Application类&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;spring-cloud-ribbon&#34;&gt;&#xA;  spring cloud ribbon&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-ribbon&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;application.yml&#xA;    ribbon:&#xA;        eureka:&#xA;            enabled: false                      # 禁止从eureka获得注册列表&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;spring-cloud-hystrix&#34;&gt;&#xA;  spring cloud hystrix&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-hystrix&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 单个服务监控&#xA;hystrix dashboard&#xA;    路径&#xA;        /hystrix&#xA;        /hystrix.stream                         # 至少请求一次接口，才有数据&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;spring-cloud-turbine&#34;&gt;&#xA;  spring cloud turbine&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-turbine&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 多服务监控&#xA;application.yml&#xA;    turbine:&#xA;        aggregator:&#xA;            clusterConfig: default                                  # 此监控器名&#xA;        appConfig: erp-consumer-metadb, erp-consumer                # 目标服务名&#xA;        clusterNameExpression: new String(&amp;quot;default&amp;quot;)                # 名称匹配表达式&#xA;路径&#xA;    /turbine.stream&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;spring-cloud-feign&#34;&gt;&#xA;  spring cloud feign&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-feign&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;application.yml&#xA;    feign:&#xA;        hystrix:&#xA;            enabled: true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;spring-cloud-zuul&#34;&gt;&#xA;  spring cloud zuul&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-zuul&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 默认会用ribbon负载均衡&#xA;application.yml&#xA;    zuul:&#xA;        prefix: /v1&#xA;        routes:&#xA;            hiapi:&#xA;                path: /hiapi/**&#xA;                serviceId: erp-consumer-metadb&#xA;                # url: http://localhost:8762  # 这样写不会做负载均衡&#xA;                # serviceId: hiapi-v1&#xA;&#xA;    ## 手动url负载均衡&#xA;    # ribbon: &#xA;    #   eureka:&#xA;    #     enabled: false&#xA;    # hiapi-v1:&#xA;    #   ribbon:&#xA;    #     listOfServers: http://localhost:8762,http://localhost:8763&#xA;案例&#xA;    过滤&#xA;        import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.PRE_TYPE;&#xA;        @Component&#xA;        public class MyFilter extends ZuulFilter {&#xA;&#xA;            private static Logger log = LoggerFactory.getLogger(MyFilter.class);&#xA;&#xA;            @Override&#xA;            public String filterType() {&#xA;                return PRE_TYPE;&#xA;            }&#xA;&#xA;            @Override&#xA;            public int filterOrder() {&#xA;                return 0;&#xA;            }&#xA;&#xA;            @Override&#xA;            public boolean shouldFilter() {&#xA;                return true;&#xA;            }&#xA;&#xA;            @Override&#xA;            public Object run() {&#xA;                RequestContext ctx = RequestContext.getCurrentContext();&#xA;                HttpServletRequest request = ctx.getRequest();&#xA;                log.info(String.format(&amp;quot;%s &amp;gt;&amp;gt;&amp;gt; %s&amp;quot;, request.getMethod(), request.getRequestURL().toString()));&#xA;                Object accessToken = request.getParameter(&amp;quot;token&amp;quot;);&#xA;                if (accessToken == null) {&#xA;                    log.warn(&amp;quot;token is empty&amp;quot;);&#xA;        //&#xA;        //            ctx.setSendZuulResponse(false);&#xA;        //            ctx.setResponseStatusCode(401);&#xA;        //            try {&#xA;        //                ctx.getResponse().getWriter().write(&amp;quot;token is empty&amp;quot;);&#xA;        //            }catch (Exception e){&#xA;        //&#xA;        //            }&#xA;                    return null;&#xA;                }&#xA;                log.info(&amp;quot;ok&amp;quot;);&#xA;                return null;&#xA;            }&#xA;        }&#xA;    熔断&#xA;        @Component&#xA;        public class MyFallbackProvider implements ZuulFallbackProvider {&#xA;            @Override&#xA;            public String getRoute() {&#xA;                return &amp;quot;*&amp;quot;;&#xA;            }&#xA;&#xA;            @Override&#xA;            public ClientHttpResponse fallbackResponse() {&#xA;                return new ClientHttpResponse() {&#xA;                    @Override&#xA;                    public HttpStatus getStatusCode() throws IOException {&#xA;                        return HttpStatus.OK;&#xA;                    }&#xA;&#xA;                    @Override&#xA;                    public int getRawStatusCode() throws IOException {&#xA;                        return 200;&#xA;                    }&#xA;&#xA;                    @Override&#xA;                    public String getStatusText() throws IOException {&#xA;                        return &amp;quot;OK&amp;quot;;&#xA;                    }&#xA;&#xA;                    @Override&#xA;                    public void close() {&#xA;&#xA;                    }&#xA;&#xA;                    @Override&#xA;                    public InputStream getBody() throws IOException {&#xA;                        return new ByteArrayInputStream(&amp;quot;error, I&#39;m the fallback&amp;quot;.getBytes());&#xA;                    }&#xA;&#xA;                    @Override&#xA;                    public HttpHeaders getHeaders() {&#xA;                        HttpHeaders headers = new HttpHeaders();&#xA;                        headers.setContentType(MediaType.APPLICATION_JSON);&#xA;                        return headers;&#xA;                    }&#xA;                };&#xA;            }&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;spring-cloud-config&#34;&gt;&#xA;  spring cloud config&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-config&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;config-server&#xA;    application.yml&#xA;        server:&#xA;            port: 9012&#xA;        spring:&#xA;            application:&#xA;                name: erp-config-server&#xA;            cloud:&#xA;                config:&#xA;                server:&#xA;                    native:&#xA;                        search-locations: classpath:/shared             # 读取路径&#xA;            profiles:&#xA;                active: native                                          # 本地读取&#xA;    shared/config-client-dev.yml                                        # 文件名为 [客户端服务名]-[profile变量]&#xA;        server:&#xA;            port: 9013&#xA;        foo: foo version 1&#xA;    地址&#xA;        localhost:9012/config-client/dev                                # 查看分发给服务的配置&#xA;config-client&#xA;    spring:&#xA;        application:&#xA;            name: erp-config-client&#xA;        cloud:&#xA;            config:&#xA;                uri: http://localhost:9012&#xA;                fail-fast: true&#xA;        profiles:&#xA;            active: dev&#xA;注解&#xA;    @RefreshScope                           # 热更新&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;spring-cloud-bus&#34;&gt;&#xA;  spring cloud bus&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-bus&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;application.yml&#xA;    spring:&#xA;        rabbitmq:&#xA;            host: localhost&#xA;            port: 5672&#xA;            username: outrun&#xA;            password: asdf&#xA;            publisher-confirms: true&#xA;            virtual-host: /&#xA;    management:&#xA;        security:&#xA;            enabled: false&#xA;路径&#xA;    POST /bus/refresh                       # 从新拉配置, 其它服务也触发同步&#xA;        ?destination=appName:*.*            # 指定刷新服务名下实例&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;spring-cloud-stream&#34;&gt;&#xA;  spring cloud stream&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-stream&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;spring-cloud-sleuth&#34;&gt;&#xA;  spring cloud sleuth&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-cloud-sleuth&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;application.yml&#xA;    zipkin:&#xA;        base-url: http://localhost:9014&#xA;    sleuth:&#xA;        sampler:&#xA;            percentage: 1.0&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
