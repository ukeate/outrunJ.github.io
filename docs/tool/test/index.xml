<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>测试 on outrun的笔记</title>
    <link>https://runout.run/docs/tool/test/</link>
    <description>Recent content in 测试 on outrun的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://runout.run/docs/tool/test/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>程序调试</title>
      <link>https://runout.run/docs/tool/test/debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://runout.run/docs/tool/test/debug/</guid>
      <description>&lt;h1 id=&#34;分析方向&#34;&gt;&#xA;  分析方向&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%9e%90%e6%96%b9%e5%90%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cpu&#34;&gt;&#xA;  cpu&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cpu&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;方法调用&#xA;    调用栈时长比例&#xA;    录制时间内调用栈时长&#xA;火焰图(graph frames)&#xA;    宽度: 方法耗时&#xA;    高度: 调用栈深&#xA;    排序是按字母的，颜色是随机的&#xA;subsecond offset heat map&#xA;    x轴: 秒&#xA;    y轴: 一秒内各阶段&#xA;    z轴: 颜色深度标记events采样数&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;内存&#34;&gt;&#xA;  内存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%85%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;对象&#xA;    对象个数、空间比例&#xA;    调用栈分配比例&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;线程协程&#34;&gt;&#xA;  线程/协程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ba%bf%e7%a8%8b%e5%8d%8f%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;泄露&#xA;    I/O阻塞&#xA;    锁阻塞&#xA;    channel阻塞&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;gc问题&#34;&gt;&#xA;  GC问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gc%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;少建对象&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;linux&#34;&gt;&#xA;  Linux&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;time&#xA;ftrace&#xA;perf_events&#xA;eBPF&#xA;SystemTap&#xA;LTTng&#xA;ktap&#xA;dtrace4linux&#xA;OEL DTrace&#xA;sysdig&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;java&#34;&gt;&#xA;  Java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h3 id=&#34;visualvm&#34;&gt;&#xA;  VisualVM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#visualvm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;jprofiler&#34;&gt;&#xA;  JProfiler&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jprofiler&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 收费, java&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;perfino&#34;&gt;&#xA;  perfino&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#perfino&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 监测jvm&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;yourkit&#34;&gt;&#xA;  YourKit&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#yourkit&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 收费, java, 有调用链&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;spring-insight&#34;&gt;&#xA;  Spring Insight&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-insight&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# java spring&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;golang&#34;&gt;&#xA;  Golang&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#golang&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;go命令&#xA;    go tool pprof Xx.bin Xx.prof&#xA;        -inuse_space                # -inuse_space显示真正使用的内存&#xA;        -cpuprofile=cpu.prof&#xA;        -memprofile=mem.prof&#xA;        -blockprofile=block.prof&#xA;        -svg                        # 输出svg&#xA;&#xA;    go build&#xA;        -toolexec=&amp;quot;/usr/bin/time&amp;quot;   # -toolexec在每个命令加上前缀&#xA;        -toolexec=&amp;quot;perf stat&amp;quot;&#xA;        -gcflags=&#39;-memprofile=m.p&#39;&#xA;        -gcflags=&#39;-traceprofile=t.p&#39;&#xA;&#xA;    go test&#xA;        -blockprofile=b.p net/http&#xA;        -trace=t.p&#xA;    go tool trace Xx.bin t.p&#xA;    go-torch cpu.prof&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;环境变量&#xA;GODEBUG=gctrace=1&#xA;# 打印gc信息&#xA;http&#xA;import _ &amp;ldquo;net/http/pprof&amp;rdquo;&#xA;func main() {&#xA;log.Println(http.ListenAndServe(&amp;ldquo;localhost:3999&amp;rdquo;, nil))&#xA;}&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
