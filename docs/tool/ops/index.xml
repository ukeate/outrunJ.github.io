<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>运维 on ukeate的笔记</title>
    <link>https://ukeate.com/docs/tool/ops/</link>
    <description>Recent content in 运维 on ukeate的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 11 Nov 2022 15:49:15 +0800</lastBuildDate>
    <atom:link href="https://ukeate.com/docs/tool/ops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Monitor</title>
      <link>https://ukeate.com/docs/tool/ops/monitor/</link>
      <pubDate>Thu, 11 Oct 2018 18:47:57 +0800</pubDate>
      <guid>https://ukeate.com/docs/tool/ops/monitor/</guid>
      <description>&lt;h1 id=&#34;基础&#34;&gt;&#xA;  基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;监控的方式&#xA;    主动、被动、旁路（舆情）&#xA;监控类型&#xA;    服务端监控、客户端监控&#xA;目标&#xA;    全、块、准&#xA;指标&#xA;    请求量、成功率、耗时    &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;统计&#34;&gt;&#xA;  统计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%9f%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;指标&#xA;    访问、访客&#xA;    停留时长&#xA;    跳出率&#xA;    退出率&#xA;    转化率&#xA;    参与度&#xA;显示方式&#xA;    选时间段&#xA;        时序数据表&#xA;        max、min、avg&#xA;埋点&#xA;    通过可视化工具配置，非硬编码&#xA;第三方&#xA;    友盟&#xA;    百度移动&#xA;    魔方&#xA;    App Annie&#xA;    talking data&#xA;    神策数据&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;物理机&#34;&gt;&#xA;  物理机&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%89%a9%e7%90%86%e6%9c%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;load-average&#34;&gt;&#xA;  Load Average&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#load-average&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    数字n表示n倍&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;cpu&#34;&gt;&#xA;  cpu&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cpu&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Usage: 100%&#xA;    system&#xA;    user&#xA;    IO wait&#xA;Saturation: 1.0core&#xA;Max Core Usage: 1.0core&#xA;Interrupts and Context Switches: 10k&#xA;Processes: 10ops&#xA;    create(Forks)&#xA;    Runnable&#xA;    Blocked&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;mem&#34;&gt;&#xA;  mem&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mem&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Physical Memory: RAM(Random-Access Memory)存储器&#xA;    used&#xA;    free&#xA;    buffers&#xA;Virtual Memory&#xA;    介绍&#xA;        映射到RAM或Disk&#xA;    used&#xA;    available&#xA;Swap Space&#xA;    used&#xA;    free&#xA;Swap Activity&#xA;    swap in(read)&#xA;    swap out(write)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;disk&#34;&gt;&#xA;  disk&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#disk&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;space&#xA;    增长趋势&#xA;I/O Activity&#xA;    read(page in)&#xA;    write(page out)&#xA;File Descriptors: 1Milion&#xA;    limit&#xA;    allocated&#xA;I/O Latency: 5ms&#xA;    write&#xA;    read&#xA;I/O Load: 3&#xA;    write&#xA;    read&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;network&#34;&gt;&#xA;  network&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#network&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;traffic: MB/s&#xA;    inbound&#xA;    outbound&#xA;Utillization Hourly: GB&#xA;    sent&#xA;    received&#xA;Local Network Errors: 0ops&#xA;    transmit drop&#xA;    receive drop&#xA;    transmit errors&#xA;TCP Retransmission&#xA;    segments retransmitted: 0ops&#xA;    retransmit ratio: 0%&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;应用监控&#34;&gt;&#xA;  应用监控&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8%e7%9b%91%e6%8e%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;Prometheus&#xA;    # 监控, go实现&#xA;Grafana&#xA;    # 监控&#xA;Zabbix&#xA;    # 分布式监控&#xA;Nagios&#xA;    # 监控&#xA;Ganglia&#xA;Zenoss&#xA;Open-falcon&#xA;emq&#xA;    # mqtt broker, erlang开发, 管理控制台&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;apm&#34;&gt;&#xA;  APM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#apm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# Application Performance Management&#xA;SkyWalking&#xA;CAT&#xA;Jaeger&#xA;Pinpoint&#xA;Zipkin&#xA;Dapper&#xA;    # C#&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;mysql&#34;&gt;&#xA;  Mysql&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;总览&#xA;    Services: 38&#xA;    Min MySQL Uptime: 20 hours&#xA;    Max MySQL Uptime: 2.4 years&#xA;    Total Current QPS: 3.4k ops&#xA;    Total InnoDB Buffer Pool Size: 431GiB&#xA;    Top Service Used Connections: 800&#xA;    Top Service Used Connections: 80%&#xA;    Top Service Client Threads Connected: 60%&#xA;    Top Service Active Client Threads: 99%&#xA;    Top Service Threads Cached: 100%&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;单节点&#34;&gt;&#xA;  单节点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%95%e8%8a%82%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;总计 &#xA;    Uptime: 29 weeks&#xA;    Version: 5.7.26&#xA;    Current QPS: 32&#xA;    InnoDB Buffer Pool Size: 3GiB&#xA;    Buffer Pool Size of Total RAM: 10%&#xA;Connections&#xA;    Connections&#xA;        Max Connections&#xA;        Max Used Connections&#xA;        Connections&#xA;    Aborted Connections&#xA;        Aborted Connects(attempts): 0 ops&#xA;        Aborted Clients(timeout): 0 ops&#xA;Client Threads&#xA;    Clients Threads Activity&#xA;        Peak Threads Connected: 22&#xA;        Peak Threads Running: 2&#xA;    Thread Cache&#xA;        Thread Cache Size&#xA;        Threads Cached&#xA;        Threads Created&#xA;Temporary Objects &amp;amp; Slow Queries&#xA;    Temporary Objects&#xA;        Created Tmp Tables: 5&#xA;        Created Tmp Disk Tables: 0.3&#xA;        Created Tmp Files: 0&#xA;    Slow Queries: 0 ops&#xA;Select Types &amp;amp; Sorts&#xA;    Select Types&#xA;        Select Scan: 14 ops&#xA;        Select Range: 4 ops&#xA;    Sorts&#xA;        Sort Rows: 1 ops&#xA;        Sort Scan: 0 ops&#xA;        Sort Range: 0 ops&#xA;Table Locks &amp;amp; Questions&#xA;    Table Locks Immediate: 0.6 ops&#xA;    Table Locks Waited: 0 ops&#xA;Questions: 32&#xA;Network&#xA;    Network Traffic&#xA;        Outbound: 70 KBs&#xA;        Inbound: 15 KBs&#xA;    Newtwork Usage Hourly&#xA;        Sent: 240 MiB&#xA;        Received: 52 MiB&#xA;Memory&#xA;    System Memory: 31 GiB&#xA;    InnoDB Buffer Pool Data: 2 GiB&#xA;    InnoDB Log Buffer Size: 32 MiB&#xA;    Key Buffer Size: 8 MiB&#xA;    Query Cache Size: 1 MiB&#xA;Command, Handlers, Processes&#xA;    Top Command Counters&#xA;        select: 25&#xA;        set option: 4&#xA;        rollback: 0.6&#xA;        commit: 28&#xA;        stmt_prepare: 28&#xA;        stmt_execute: 28&#xA;        stmt_close: 28&#xA;        begin: 28&#xA;        show variables: 0.2&#xA;        alter_table: 0&#xA;        delete: 0.2&#xA;        insert: 3&#xA;        replace: 0&#xA;        update: 40&#xA;    Top Command Counters Hourly: 100k&#xA;    Handlers&#xA;        read_md_next: 800ops&#xA;        write: 150ops&#xA;        read_key: 100ops&#xA;        read_next: 100ops&#xA;        external_lock: 60ops&#xA;        read_first: 13ops&#xA;        update: 2ops&#xA;        delete: 1ops&#xA;        read_prev: 0ops&#xA;        read_md: 0ops&#xA;    Transaction Handlers&#xA;        commit: 25ops&#xA;        rollback: 0.6&#xA;    Process States&#xA;        idle: 20&#xA;        other: 1&#xA;        executing: 1&#xA;        sending data: 1&#xA;        statistics: 0&#xA;        preparing: 0&#xA;        init: 0&#xA;Query Cache&#xA;    Query Cache Memory&#xA;        query cache size: 1 MiB&#xA;        free memory: 1 MiB&#xA;    Query Cache Activity&#xA;        not cached: 25&#xA;        queries in cache: 0&#xA;        prunes: 0&#xA;Files and Tables&#xA;    File Openings: 0.2&#xA;    Open Files: 65k&#xA;Table Openings&#xA;    Open Cache Status&#xA;        Hits: 40ops&#xA;        Misses due to Overflows: 17&#xA;        Misses: 16&#xA;    Open Tables&#xA;        Table Open Cache: 2k&#xA;        Open Tables: 2k&#xA;Table Definition Cache&#xA;    Table Definition Cache Size: 1k&#xA;    Open Table Definitions: 700&#xA;    Opened Table Definitions: 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;node-summary&#34;&gt;&#xA;  Node Summary&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#node-summary&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;总计&#xA;    Node Name&#xA;    Uptime: 1.4 years&#xA;    Load Average: 0.6&#xA;    RAM: 32GiB&#xA;    Memory Available: 63%&#xA;    Virtual Memory: 48GiB&#xA;    Disk Space: 2.3TiB&#xA;    Min Space Available: 26%&#xA;CPU Usage&#xA;    iowait: 28%&#xA;    user: 10%&#xA;    system: 2%&#xA;CPU Saturation and Max Core Usage&#xA;    Normalized CPU Load: 0.8&#xA;    Max Cpu Core Utilization: 30%&#xA;Disk I/O and Swap Activity&#xA;    Disk Writes(page out): 30 MBs&#xA;    Disk Reads(page in): 30 MBs&#xA;    Swap Out(writes): 0&#xA;Network Traffic&#xA;    Outbound: 3MBs&#xA;    Inbound: 330 kBs&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;innodb&#34;&gt;&#xA;  InnoDB&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#innodb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;总计&#xA;    Buffer Pool Size: 16GiB&#xA;    Buffer Pool Size of Total RAM: 52%&#xA;    Total Redo Log Space: 900 MiB&#xA;    Max Log Space Used&#xA;    Max Transaction History Length: 300k&#xA;    Data Bandwidth: 23MBs&#xA;    Fsync Rate: 40ops&#xA;    Row Lock Blocking: 0.02%&#xA;Activity&#xA;    Row Reads: 20k&#xA;    Row Writes: 100&#xA;    Read-Only Transactions: 0&#xA;    Read-Write Transactions: 0&#xA;    Transactions Information(RW): 0&#xA;    Misc Transactions Information: 0&#xA;Storage Summary&#xA;    Tables: 1014&#xA;    Data Buffer Pool Fit: 2%&#xA;    Avg Row Size: 900B&#xA;    Index Size Per Row: 700B&#xA;    Space Allocated: 900GiB&#xA;    Space Used: 900 GiB&#xA;    Data Length: 500 GiB&#xA;    Index Length: 400 GiB&#xA;    Estimated Rows: 600 Mil&#xA;    Indexing Overhead: 80%&#xA;    Free Space Percent: 0.4%&#xA;    Free: 4GiB&#xA;Disk IO&#xA;    总计&#xA;        InnoDB Page Size: 16 KiB&#xA;        Avg Data Read Rq Size: 16 KiB&#xA;        Avg Data Write Rq Size: 20KiB&#xA;        Avg Log Write Rq Size: 4 KiB&#xA;        Data Written Per Fsync: 70 KiB&#xA;        Log Written Per Fsync: 20 KiB&#xA;        Data Read Per Row Read: 27B&#xA;        Data Written Per Row Written: 66 KiB&#xA;        Auto Extend Increment: 64MiB&#xA;        Double Write: ON&#xA;        Fast Shutdown: OFF&#xA;        Open Files: 2k&#xA;        File Use: 100%&#xA;    InnoDB Data I/O&#xA;        Data Reads: 37 ops&#xA;        Data Writes: 25 ops&#xA;    InnoDB Data Bandwidth&#xA;        Data Read: 10 MBs&#xA;        Data Written: 10 MBs&#xA;    InnoDB Log IO&#xA;        Log Written: 40 kBs&#xA;        Log Writes: 4 ops&#xA;    InnoDB FSyncs&#xA;        Data Fsyncs: 7 ops&#xA;        Log Fsyncs: 2 ops&#xA;    InnoDB Pending IO&#xA;        Pending Data Reads: 0&#xA;        Pending Data Writes: 0&#xA;        Pending Log Writes: 0&#xA;    InnoDB Pending Fsyncs: 0&#xA;IO Objects&#xA;    Targets Bandwidth&#xA;    Targets Load&#xA;    Targets Read&#xA;    Targets Read Load&#xA;    Targets Write&#xA;    Targets Write Load&#xA;    Targets Read Latency&#xA;    IO Targtes Write Latency&#xA;    Reads by Page Type&#xA;    Writes by Page Type&#xA;Buffer Pool&#xA;    总计&#xA;        Buffer Pool Size: 2GiB&#xA;        Buffer Pool Size of Total RAM&#xA;        NUMA Interleave&#xA;        Buffer Pool Activity: 215 ops&#xA;        BP Data&#xA;        BP Data Dirty&#xA;        BP Miss Ratio: 0.32%&#xA;        BP Write Buffering: 4&#xA;        Pool Chunk Size: 128 MiB&#xA;        Buffer Pool Instances: 8&#xA;    Buffer Pool Pages&#xA;        data: 120k&#xA;        free: 8k&#xA;        misc: 2k&#xA;    Buffer Pool Data&#xA;        data total: 2GiB&#xA;        Estimated Dirty Data Limit: 1GiB&#xA;        Data Dirty: 5MiB&#xA;    Buffer Pool Page Activity: &#xA;        Pages Read: 40 ops&#xA;        Pages Written: 20 ops&#xA;        Pages Created: 3 ops&#xA;    Buffer Pool Requests&#xA;        read requests: 10k ops&#xA;        wite requests: 200 ops&#xA;    Read-Ahead&#xA;        Pages Fetched by Linear Read Ahead: 3ops&#xA;        Paged Fetched by Read Ahead but Never Accessed: 0.01 ops&#xA;        Paged Fetched by Random Read Ahead: 0ops&#xA;    Buffer Pool LRU Sub-Chain Churn&#xA;Buffer Pool - Replacement Management&#xA;Checkpointing and Flushing&#xA;Logging&#xA;Locking&#xA;Undo Space and Purging&#xA;Page Operations&#xA;Adaptive Hash Index&#xA;Change Buffer&#xA;Contention&#xA;Misc&#xA;Online Operations(MariaDB)&#xA;    Defragmentation&#xA;    Online DDL&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;&#xA;  Overview&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#overview&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;I/O Thread Running&#xA;SQL Thread Running&#xA;Read Only&#xA;Connections&#xA;    Service Used Connections: 750&#xA;    Service Aborted Connections: 15&#xA;Threads&#xA;    Service Client Threads Connected: 500&#xA;    Service Active Client Threads: 25&#xA;    Service Thread Cached: 55&#xA;Queries &amp;amp; Questions&#xA;    总计&#xA;        Top Service Queries: 9.3k ops&#xA;        Top Service Questions: 3k ops&#xA;        Top InnoDB I/O Data Reads: 99.9%&#xA;        Top InnoDB I/O Data Writes: 100%&#xA;        Top Data Fsyncs: 50%&#xA;    Top Service Queries: 2.5k&#xA;    Top Service Questions: 0.5k&#xA;InnoDB I/O&#xA;    Top Service Data Reads: 2k rps&#xA;    Top Service Data Writes: 1.5k wps&#xA;    Top Service Data Fsyncs: 100 ops&#xA;Temporary Objects&#xA;    Service Temporary Objects: 150&#xA;    Top Service Selects&#xA;Sorts&#xA;    Top Service Sorts: 50k&#xA;Locks&#xA;    Top Service Table Locks: 3 ops&#xA;Network&#xA;    总计&#xA;        Top Service Incoming Network Traffic: 10 MBs&#xA;        Top Service Outgoing Network Traffic: 30 MBs&#xA;    Service Incoming Network Traffic: 2 MBs&#xA;    Service Outgoing Network Traffic: 5 MBs&#xA;Query Cache&#xA;    总计 &#xA;        Top Service Used Query Cache: 99%&#xA;    Service Query Cache Size: 100 MiB&#xA;Files&#xA;    总计&#xA;        Top Percentage of File Openings to Opened Files: 100%&#xA;        Top Percentage of Opened Files to the Limit: 0.25%&#xA;    Service File Openings: 250&#xA;    Service Opened Files: 160&#xA;Table Openings&#xA;    总计&#xA;        Top Open Cache Miss Ratio: 85%&#xA;    Lowest Service Open Cache Hit Ratio: 60%&#xA;Open and Cached Table Definitions&#xA;    总计 &#xA;        Min Service Opened Table Definitions: 0&#xA;        Top Service Opened Table Definitions: 230 ops&#xA;        Top Service Open Table Definitions 1.5k ops&#xA;        Top Open Table Definitions to Definition Cache: 100%&#xA;    Service Table Definition Cache: 1.5 KiB&#xA;    Service Opened Table Definitions: 210 ops&#xA;    Service Open Table Definitions: 1.4k&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;主从复制&#34;&gt;&#xA;  主从复制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%bb%e4%bb%8e%e5%a4%8d%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Replication Delay:  10&#xA;Binlogs Size:  10GiB&#xA;Binlog Data Written Hourly&#xA;Binlogs Count: 30&#xA;Binlog Cache Use Hourly: 300k&#xA;Relay Log Space: 300MiB&#xA;Relay Log Written Hourly&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;oracle&#34;&gt;&#xA;  Oracle&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#oracle&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;状态: alive&#xA;活动会话(user)&#xA;进程计数&#xA;执行计数、提交计数、回滚计数&#xA;等待时间&#xA;    并发等待: 200ms&#xA;    提交等待: 50ms&#xA;    应用等待: 50ms&#xA;    网络等待: 10ms&#xA;    系统I/O等待: 100ms&#xA;    用户I/O等待: 1s&#xA;    组态等待: 2ms&#xA;    scheduler等待: 500ms&#xA;表空间&#xA;    表空间类型：持久、临时、重做&#xA;    使用率&#xA;    剩余空间: 100GB&#xA;资源利用率&#xA;    branches&#xA;    cmtcallbk&#xA;    dml_locks&#xA;    enqueue_locks&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;postgresql&#34;&gt;&#xA;  PostgreSQL&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#postgresql&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;总览&#xA;    services个数&#xA;    Active Connections&#xA;    Total Disk-Page Buffers: 32MiB&#xA;    Total Memory Size for Each Sort: 16MiB&#xA;    Total Shared Buffers: 128GiB&#xA;    Services Autovacuum: 100%&#xA;Connections&#xA;    Top5 Service Connections: 600&#xA;    Top5 Service Active Connections: 5&#xA;    Service Idle Connections&#xA;    Service Active Connections&#xA;Autovacuum&#xA;    Service Value: Yes&#xA;Tuples&#xA;    总计&#xA;        Total: 170M ops&#xA;        Max Fetched: 6M ops&#xA;        Max Returned: 6M ops&#xA;        Max Inserted: 485 ops&#xA;        Max Updated: 560 ops&#xA;        Max Deleted: 371 ops&#xA;    Service Fetched Tuples Rate: 2M ops&#xA;    Service Returned Tuples Rate: 2M ops&#xA;    Service Inserted Tuples Rate: 100 ops&#xA;    Service Updated Tuples Rate: 100 ops&#xA;    Service Deleted Tuples Rate: 50 ops&#xA;Transactions&#xA;    总计&#xA;        Total: 7.5k ops&#xA;        Max Commits: 270 ops&#xA;        Max Rollback: 0.2 ops&#xA;        Max Duration: 55 s&#xA;    Service Commits: 100 ops&#xA;    Service Rollbacks: 0.05 ops&#xA;    Service Duration of Active Transactions: 850 ms&#xA;    Service Duration of Other Transactions: 760 ms&#xA;Temp Files&#xA;    总计&#xA;        Max Number of Temp Files: 17k&#xA;        Max Size of Temp Files: 178GiB&#xA;    Service Numbers: 17k&#xA;    Service Size: 178GiB&#xA;Conflicts &amp;amp; Locks&#xA;    总计&#xA;        Total Locks: 6.5k&#xA;        Total Deadlocks: 0&#xA;        Total Conflicts: 0&#xA;    Service Locks: 100&#xA;    Service Deadlocks: 0&#xA;    Service Conflicts: 0&#xA;Cache Hit&#xA;    总计&#xA;        Min Cache Hit Ratio: 97%&#xA;        Max Cache Hit Ratio: 100%&#xA;    Service Lowest Cache Hit Ratio: 100%&#xA;Canceled Queries&#xA;    Service Canceled Queries: 0&#xA;Blocks Operations&#xA;    总计&#xA;        Total Blocks Operations: 0 ops&#xA;        Max Blocks Writes: 0 ops&#xA;        Max Blocks Reads: 0 ops&#xA;    Servcie Blocks Reads: 0 ops&#xA;    Service Blocks Writes: 0 ops &#xA;Buffers Operations&#xA;    总计&#xA;        Max Allocaetd Bufferes: 38&#xA;    Service Allocated Buffers: 10 ops&#xA;    Service Fsync Calls by a Backend: 0 ops&#xA;    Service Written Directly by a Backend: 5 wps&#xA;    Service Written by the Background Writer: 0 wps&#xA;    Service Written During Checkpoints: 50 wps&#xA;Checkpoint Stats&#xA;    总计&#xA;        Total Written Files to Disk: 140k&#xA;        Total Files Synchronization to Disk: 27&#xA;    Service Files Synchronization to Disk: 0.1 ops&#xA;    Service Written Files to Disk: 400 wps&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Docker</title>
      <link>https://ukeate.com/docs/tool/ops/docker/</link>
      <pubDate>Thu, 11 Oct 2018 18:18:21 +0800</pubDate>
      <guid>https://ukeate.com/docs/tool/ops/docker/</guid>
      <description>&lt;h1 id=&#34;基础&#34;&gt;&#xA;  基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    基于linux LXC，可以实现虚拟化&#xA;优点&#xA;    低成本、高利用率、充分灵活、动态调度&#xA;    核心网的最终形态&#xA;目录&#xA;    /var/lib/docker&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;配置&#34;&gt;&#xA;  配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;镜象网站&#xA;    https://hub.docker.com/&#xA;阿里云个人仓库&#xA;    入口: cr.console.aliyun.com&#xA;        docker login -u 934260428@qq.com registry.cn-qingdao.aliyuncs.com&#xA;        docker tag java/device:1.0 registry.cn-qingdao.aliyuncs.com/mrs-iot/device:1.0&#xA;        docker push registry.cn-qingdao.aliyuncs.com/mrs-iot/device:1.0&#xA;        docker pull registry.cn-qingdao.aliyuncs.com/mrs-iot/device:1.0&#xA;/etc/sysconfig/docker&#xA;    # /etc/init.d/docker.conf&#xA;    OPTIONS=&#39;--selinux-enabled --log-driver=journald --insecure-registry 45.55.56.16:5000 --dns 8.8.8.8&#39;&#xA;    DOCKER_CERT_PATH=/etc/docker&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;命令&#34;&gt;&#xA;  命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;常用系统命令&#34;&gt;&#xA;  常用系统命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e7%94%a8%e7%b3%bb%e7%bb%9f%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;systemctl daemon-reload&#xA;systemctl restart docker&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;docker&#34;&gt;&#xA;  docker&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;-h&#xA;version&#xA;login&#xA;    docker login -u outrun -p asdf&#xA;search mysql                    # 搜索镜像&#xA;pull centos:7                   # 下载镜像&#xA;    centos:latest&#xA;    outrun11/test:nginx1&#xA;image&#xA;    ls&#xA;    pull&#xA;    rm&#xA;images centos                   # 本地镜象列表&#xA;rmi centos:latest               # 删除镜象&#xA;container&#xA;    run                         # 新建容器&#xA;        --user root&#xA;        --name a&#xA;        --privileged&#xA;        --name                  # 显示名&#xA;        -t                      # 伪tty, -i 交互的&#xA;        -rm=true                # 执行完后删除&#xA;        -v /etc/:/opt/etc/      # 挂载本机/etc到容器/opt/etc, /etc/:/opt/etc/:ro 只读挂载, /etc/ 对外共享/etc&#xA;        -p 1234:80              # 端口映射本机1234端口到容器80&#xA;        --volumes-from etc_share                    # 使用另一个容器对外共享的磁盘&#xA;        -d                      # 后台运行&#xA;        --link redis_server:redis                   # 连接容器的redis命令&#xA;        -w /var/node            # 当前工作目录&#xA;        -e NODE_ENV=&#39;&#39;          # 环境变量&#xA;        --net=bridge            # 网络模式，bridge使用虚拟网桥docker0, host共享主机命名空间, container与已存在的一个容器共享命名空间, none关闭网络功能, overlay&#xA;&#xA;        --name nsqd -p 4150:4150 nsqio/nsq /nsqd&#xA;            # 端口&#xA;        -it centos /bin/bash&#xA;            # 启动容器, 执行bash&#xA;        b15 /bin/echo &#39;hello&#39;&#xA;            # 启动容器&#xA;        -it --rm=true --name=ls-volume -v /etc/:/opt/etc/ centos ls /opt/etc&#xA;            # 创建共享&#xA;        -it -p 1337:1337 --name=etc_share -v /etc/ centos mkdir /etc/my_share &amp;amp;&amp;amp; /bin/sh -c &amp;quot;while true; do echo hello; sleep 1; done&amp;quot;&#xA;            # 持续运行&#xA;        -it --rm=true --volumes-from etc_share --name=ls_etc centos ls /etc&#xA;            # 使用共享&#xA;    exec                        # 已有容器中运行&#xA;        -i&#xA;        -t&#xA;    ls&#xA;    start 026                       # 启动已建立的容器, id可以只输入前几位&#xA;        cp 026e:/docker/file /local/file&#xA;    stop 026&#xA;    restart 026e&#xA;    attach 026                  # 进入容器运行命令行, 可显示日志&#xA;    kill 026e&#xA;    prune&#xA;ps -a                           # 容器列表&#xA;rm                              # 移除容器&#xA;    docker rm docker ps -aq&#xA;        # 移除所有未运行的容器&#xA;    rm -f 026&#xA;&#xA;&#xA;build .                         # 用当前目录Dockerfile创建新镜像&#xA;    -t=&amp;quot;nginx/test&amp;quot;             # target&#xA;    --no-cache                  # 不用cache&#xA;    -f a.dockerfile             # 指定文件&#xA;tag nginx/test:test1 outrun11/test:nginx1&#xA;    # 远程docker基站创建repository, 名字test&#xA;push outrun11/test:nginx1&#xA;    logs beae3392&#xA;&#xA;&#xA;swarm                           # 一个或多个docker组成&#xA;    init&#xA;node                            # swarm节点&#xA;    ls&#xA;service                         # 运行于swarm的服务&#xA;    create&#xA;    ls&#xA;    ps&#xA;    rm&#xA;    inspect                     # 详情&#xA;    scale                       # 加减副本&#xA;    update                      # 变更属性&#xA;    logs                        # 查日志&#xA;system &#xA;    prune                       # 清理所有container, network, image, cache&#xA;network                         # 网卡&#xA;    ls&#xA;    rm&#xA;    prune                       # 删除全部未使用&#xA;    inspect                     # 详情&#xA;    create&#xA;        -d nat                  # 指定驱动&#xA;volume                          # 卷标, 默认挂载到/var/lib/docker/volumes&#xA;    create&#xA;    ls&#xA;    rm&#xA;    prune                       # 删除全部未使用&#xA;    inspect&#xA;stack                           # 单文件定义多服务&#xA;    deploy&#xA;    ls&#xA;    ps&#xA;    rm&#xA;&#xA;常用&#xA;    docker inspect 45370        # 详情&#xA;        --format &amp;quot;{{.State.Pid}}&amp;quot;&#xA;    docker login a.com -u outrun -p asdf&#xA;    docker build -t java/gateway:1.0 .&#xA;    docker push java/gateway:1.0&#xA;    docker images|grep none|awk &#39;{print $3}&#39;|xargs docker rmi -f&#xA;        # 删除none镜像&#xA;    docker image inspect 4de&#xA;    docker system prune -a&#xA;    docker exec -it -u root ef2 /bin/bash&#xA;    docker run --name gateway --rm -d java/gateway:1.0&#xA;    docker run -it ubuntu&#xA;    docker restart ef2&#xA;    docker logs -f -t ef2&#xA;    docker status 45370         # 显示资源占用&#xA;    docker save -o a.tar.gz a&#xA;    docker load &amp;lt; a.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;nsenter&#34;&gt;&#xA;  nsenter&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nsenter&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 指定pid, 不需ssh进入容器运行shell&#xA;docker inspect --format {{.State.Pid}} nginx&#xA;nsenter -t4629 -n&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;场景&#34;&gt;&#xA;  场景&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;查看镜像内文件&#xA;    docker run -it --entrypoint sh nginx:latest&#xA;查看/var/lib/docker/overlay2/id文件对应container&#xA;    docker ps -q | xargs docker inspect --format &#39;{{.State.Pid}}, {{.Id}}, {{.Name}}, {{.GraphDriver.Data.WorkDir}}&#39; | grep bff250&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;dockerfile&#34;&gt;&#xA;  Dockerfile&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dockerfile&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;指令&#xA;    FROM nginx                          # 基于镜像&#xA;    MAINTAINER outrun                   # 指定维护者信息&#xA;    EXPOSE 80                           # 内部服务开启的端口&#xA;    ENV NODE_ENV test                   # 环境变量&#xA;    WORKDIR /src                        # 指定工作目录&#xA;    COPY ./bin /data/a                  # 复制外部文件到内部&#xA;    VOLUME [&amp;quot;/data/log&amp;quot;]                # 创建挂载点&#xA;    ENTRYPOINT [&amp;quot;/data/a/a&amp;quot;]            # 启动命令，只有一个&#xA;    CMD [&amp;quot;-config&amp;quot;, &amp;quot;config.toml&amp;quot;]      # docker run 时运行&#xA;    RUN echo &#39;test&#39;                     # build过程中执行的命令&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;docker-compose&#34;&gt;&#xA;  docker-compose&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker-compose&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker-compose&#xA;    -h                              # 帮助&#xA;    -f                              # 指定模板&#xA;    version&#xA;&#xA;    up                              # 所有模板创建容器&#xA;        -d                          # 后台&#xA;    down                            # 删除容器、网络、卷、镜像&#xA;    rm                              # 删除容器&#xA;    create                          # 创建容器&#xA;&#xA;    stop                            # 停止容器&#xA;    start                           # 启动容器&#xA;    restart&#xA;    pause                           # 暂停容器&#xA;    unpause&#xA;    kill                            # 强制停止容器&#xA;    scale                           # 指定容器个数&#xA;&#xA;    ps                              # 列出所有容器&#xA;    logs                            # 查日志&#xA;    port                            # 显示容器映射端口&#xA;    run                             # 容器中执行命令&#xA;    exec&#xA;&#xA;    config                          # 查看配置&#xA;    build                           # (重)构建容器&#xA;    pull                            # 拉依赖镜像&#xA;    push                            # 推送镜像&#xA;配置&#xA;    version: &#39;3&#39;&#xA;    services:&#xA;      dokuwiki:&#xA;        restart: always&#xA;        image: bitnami/dokuwiki:latest&#xA;        ports:&#xA;          - 8004:80&#xA;        environment:&#xA;          - DOKUWIKI_FULL_NAME=outrun&#xA;          - DOKUWIKI_EMAIL=934260428@qq.com&#xA;          - DOKUWIKI_WIKI_NAME=Wiki&#xA;          - DOKUWIKI_USERNAME=outrun&#xA;          - DOKUWIKI_PASSWORD=asdfasdf&#xA;        volumes:&#xA;          - ./data:/bitnami                                         # 本地:镜像&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;仓库&#34;&gt;&#xA;  仓库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%93%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;habor&#34;&gt;&#xA;  habor&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#habor&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;registry&#34;&gt;&#xA;  registry&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#registry&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;htpasswd  -Bbn outrun asdf &amp;gt; auth/htpasswd&#xA;&#xA;客户端使用&#xA;    /etc/docker/daemon.json&#xA;        {&amp;quot;insecure-registries&amp;quot;:[&amp;quot;127.0.0.1:5000&amp;quot;]}&#xA;    sudo systemctl daemon-reload&#xA;    sudo systemctl restart docker&#xA;&#xA;    docker login 127.0.0.1:5000&#xA;&#xA;    docker tag java/device:1.0 127.0.0.1:5000/java/device:1.0&#xA;    docker push 127.0.0.1:5000/java/device:1.0&#xA;    curl --user outrun:asdf 127.0.0.1:5000/v2/_catalog&#xA;        # v2表示版本 registry:2&#xA;    docker pull 127.0.0.1:5000/java/device:1.0&#xA;常用API&#xA;    curl --user outrun:asdf -X GET  registry:5000/v2/_catalog&#xA;        # 列表&#xA;    curl --user outrun:asdf -X GET  registry:5000/v2/ubuntu/tags/list&#xA;        # tags&#xA;    curl --user outrun:asdf -X GET  registry:5000/v2/ubuntu/manifests/latest&#xA;        # tag&#xA;    curl --user outrun:asdf -X GET -v --silent -H &amp;quot;Accept: application/vnd.docker.distribution.manifest.v2+json&amp;quot; registry:5000/v2/ubuntu/manifests/latest 2&amp;gt;&amp;amp;1 | grep Docker-Content-Digest | awk &#39;{print ($3)}&#39;&#xA;        # digest&#xA;    curl --user outrun:asdf -X DELETE -v --silent -H &amp;quot;Accept: application/vnd.docker.distribution.manifest.v2+json&amp;quot; registry:5000/v2/ubuntu/manifests/sha256:134c7fe821b9d359490cd009ce7ca322453f4f2d018623f849e580a89a685e5d&#xA;        # 删除&#xA;    docker exec -it 4ebff4cdc646 /bin/registry garbage-collect  /etc/docker/registry/config.yml&#xA;        # 删除后, 运行垃圾回收&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;方案&#34;&gt;&#xA;  方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;查容器pid&#xA;    docker container top ea1&#xA;    docker inspect -f &#39;{{.State.Pid}}&#39; ea1&#xA;批量删除镜像&#xA;    docker rmi $(docker image ls -a |grep jncloud |awk &#39;{print $3}&#39;)&#xA;进入容器&#xA;    docker exec -it mysql bash&#xA;制作镜像并运行&#xA;    make&#xA;    docker build -t search:v1 .&#xA;    docker images&#xA;    docker run -p 50088:80 -d search:v1&#xA;    docker ps -a&#xA;    docker logs ea1&#xA;    docker rmi bc8&#xA;提交镜像到官方&#xA;    docker -ps -a&#xA;    docker login&#xA;    docker commit d79 outrun11/node_pm2&#xA;        # 把容器提交为镜像&#xA;    docker images node_pm2&#xA;    docker push outrun11/node_pm2&#xA;代理&#xA;    /etc/systemd/system/docker.service.d/http-proxy.conf            # 没有时创建&#xA;        Environment=&amp;quot;HTTP_PROXY=http://127.0.0.1:8123&amp;quot;&#xA;            &amp;quot;HTTPS_PROXY=http://127.0.0.1:8123&amp;quot;&#xA;            &amp;quot;NO_PROXY=192.168.1.1,localhost&amp;quot;&#xA;    systemctl daemon-reload&#xA;换源&#xA;    /etc/docker/daemon.json                                         # 没有时创建&#xA;        {&#xA;          &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://nmp74w3y.mirror.aliyuncs.com&amp;quot;]&#xA;        }&#xA;    systemctl daemon-reload&#xA;    systemctl restart docker&#xA;登录运行容器&#xA;    docker exec -it --user root 8ce /bin/sh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;工具&#34;&gt;&#xA;  工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;harbor&#xA;    企业级register镜像服务器&#xA;pipwork&#xA;    shell写的docker网格配置工具&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Kubernetes</title>
      <link>https://ukeate.com/docs/tool/ops/k8s/</link>
      <pubDate>Thu, 11 Oct 2018 18:18:21 +0800</pubDate>
      <guid>https://ukeate.com/docs/tool/ops/k8s/</guid>
      <description>&lt;h1 id=&#34;常用&#34;&gt;&#xA;  常用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;查看&#34;&gt;&#xA;  查看&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9f%a5%e7%9c%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;系统日志&#xA;    journalctl -u kubelet | tail&#xA;    kubectl api-resources --verbs=list --namespaced -o name   | xargs -n 1 kubectl get --show-kind --ignore-not-found -nmdw&#xA;日志&#xA;    kubectl logs -f --since=5m --all-containers=true -lapp=[svcName] -o wide&#xA;    kubectl get pod [podName] -o yaml&#xA;    kubectl get pods -nmdw-log -l app=logstash-logstash -w    # 等待启动&#xA;    kubectl describe pods [podName]&#xA;    kubectl rollout status deploy/[deployName]          # 查升级记录&#xA;    kubectl get events -njnc&#xA;        -oyaml&#xA;        --field-selector=type=Normal            # Normal, Warning&#xA;查ns所有资源&#xA;    kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found -nairflow&#xA;查节点详情&#xA;    kubectl get nodes -o json&#xA;查扩缩状态&#xA;    kubectl rollout status deploy/[deployName]&#xA;查所有nodeport&#xA;    kubectl get svc --all-namespaces -o go-template=&#39;{{range .items}}{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{&amp;quot;\n&amp;quot;}}{{end}}{{end}}{{end}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;操作&#34;&gt;&#xA;  操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;进容器&#xA;    kubectl exec -it [podName]  -- /bin/bash&#xA;    kubectl attach [podName]            # 进入主进程IO&#xA;用busybox运行命令&#xA;    kubectl run -it --image busybox -n [nameSpace] [name] --restart=Never --rm&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;监控&#34;&gt;&#xA;  监控&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%91%e6%8e%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubectl top node -l app=app1&#xA;kubectl top pod -nmdw --containers&#xA;kubectl describe PodMetrics p1 -njnc-dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;编辑&#34;&gt;&#xA;  编辑&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%96%e8%be%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubectl apply -f a.yml&#xA;envsubst &amp;lt; jnc.yml |kubectl apply -f -&#xA;kubectl label ns jnc istio-injection=enabled --overwrite&#xA;kubectl label ns jnc istio-injection-&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;亲和性&#34;&gt;&#xA;  亲和性&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%b2%e5%92%8c%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubectl get nodes --show-labels&#xA;kubectl label nodes node1 deploy=mdw&#xA;kubectl taint nodes node1 key=value:NoSchedule                      # NoSchedule、PreferNoSchedule、NoExecute&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;调试&#34;&gt;&#xA;  调试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b0%83%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubectl proxy --port=8080 &amp;amp;&#xA;    # 以非https形式暴露api&#xA;kubectl debug a1 -it --image=yauritux/busybox-curl --share-processes --copy-to=a1-debug&#xA;    # 嫁接&#xA;kubectl run -it --rm test --image=a:0.1.0 --command -- /bin/bash&#xA;    # 改镜像命令&#xA;kubectl run -it --rm  busybox1 --image=yauritux/busybox-curl -- /bin/bash&#xA;    # 同环境busybox&#xA;kubectl cp dir1 ns1/po1:/dir1 -c c1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;清理&#34;&gt;&#xA;  清理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b8%85%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;删除Evicted/OutOfmemory pod&#xA;    kubectl get po -njnc-dev | grep OutOfmemory |awk &#39;{print$1}&#39; | tr &#39;\n&#39; &#39;&#39; | xargs kubectl delete pod -njnc-dev&#xA;强制删除pod&#xA;    kubectl delete po -nmdw --force --grace-period=0&#xA;删除pv/pvc&#xA;    kubectl patch pv mdw-mysql-data -p &#39;{&amp;quot;metadata&amp;quot;:{&amp;quot;finalizers&amp;quot;:null}}&#39;&#xA;重建pv&#xA;    kubectl get pvc p1 -o yaml &amp;gt; a.yml&#xA;    编辑a.yml&#xA;    kubectl apply -f a.yml&#xA;删除node&#xA;    kubectl drain node1&#xA;维护node不可调度与恢复&#xA;    kubectl cordon node1&#xA;    kubectl uncordon node1&#xA;强制删除ns&#xA;    kubectl get ns n1 -o json &amp;gt;tmp.json&#xA;    删除finalizers列表&#xA;    kubectl proxy&#xA;    curl -k -H &amp;quot;Content-Type: application/json&amp;quot; -X PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/n1/finalize&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;操作-1&#34;&gt;&#xA;  操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%93%8d%e4%bd%9c-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;升级镜像&#xA;    kubectl set image deploy/[deployName] [imageName]=[imageName:Version]&#xA;    kubectl edit deploy/[deployName]&#xA;扩容&#xA;    kubectl scale deployment [deployName] --replicas=3&#xA;    kubectl patch deployment [deployName] -p &#39;{&amp;quot;spec&amp;quot;:{&amp;quot;replicas&amp;quot;:3}}&#39;&#xA;重启&#xA;    kubectl rollout restart deploy xxx&#xA;回滚&#xA;    kubectl rollout undo deploy xxx&#xA;打污点&#xA;    kubectl taint nodes node1 key1=a:NoExecute&#xA;        # 添加&#xA;    kubectl taint nodes --all key1-&#xA;        # 删除&#xA;打标签&#xA;    kubectl label nodes node1 a=b&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;容器配置&#34;&gt;&#xA;  容器配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%b9%e5%99%a8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;HTTPS&#xA;    openssl req -x509 -newkey rsa:4096 -sha256 -nodes -keyout tls.key -out tls.crt -subj &amp;quot;/CN=my-domain.com&amp;quot;&#xA;    kubectl create secret tls my-domain-com-tls --cert=tls.crt --key=tls.key --namespace=allure-docker-service&#xA;    ingress.yml&#xA;        spec:&#xA;            tls:&#xA;            - secretName: my-domain-com-tls&#xA;              hosts:&#xA;                - my-domain.com&#xA;              &#xA;部署.docker/config.json成secret&#xA;    kubectl create secret generic regcred --from-file=.dockerconfigjson=&amp;lt;path/to/.docker/config.json&amp;gt; --type=kubernetes.io/dockerconfigjson&#xA;配置私有仓库&#xA;    kubectl delete secret local&#xA;    kubectl -n iot create secret docker-registry local1 \&#xA;    --docker-server=192.168.99.1:5000 \&#xA;    --docker-username=outrun \&#xA;    --docker-password=asdf \&#xA;    --docker-email=934260428@qq.com&#xA;连阿里云k8s&#xA;    kubectl config set-cluster mrs --server=https://106.14.49.217:6443 --certificate-authority=/home/outrun/scripts/work/mrs-k8s/crt --embed-certs=true&#xA;    kubectl config set-context 297351062922226746-cdf45d630b2284f8ab79bea186c161d9f --cluster=mrs --user=297351062922226746 --namespace=lora-app&#xA;    kubectl config use-context 297351062922226746-cdf45d630b2284f8ab79bea186c161d9f&#xA;    kubectl config set-credentials 297351062922226746  --user=297351062922226746 --client-key=/home/outrun/scripts/work/mrs-k8s/297351062922226746.key.pem --client-certificate=/home/outrun/scripts/work/mrs-k8s/297351062922226746.crt --embed-certs=true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;集群配置&#34;&gt;&#xA;  集群配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9b%86%e7%be%a4%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;设置当前集群namespace&#xA;    kubectl config set-context $(kubectl config current-context) --namespace=default&#xA;配置DNS解析&#xA;    kubectl edit configmap coredns -n kube-system&#xA;        apiVersion: v1&#xA;        data:&#xA;        Corefile: |&#xA;            .:53 {&#xA;                errors&#xA;                hosts {&#xA;                    192.168.1.107 a.b.com&#xA;                }&#xA;            }&#xA;    kubectl rollout restart deploy coredns -n kube-system&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;文件目录&#34;&gt;&#xA;  文件目录&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%87%e4%bb%b6%e7%9b%ae%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;/etc/kubernetes&#xA;/etc/resolve.conf&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;命令&#34;&gt;&#xA;  命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;kubeadm&#34;&gt;&#xA;  kubeadm&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kubeadm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;kubeadm init&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;kubectl&#34;&gt;&#xA;  kubectl&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kubectl&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;全局参数&#xA;    --help                  # -h&#xA;    --output=&amp;quot;jsonpath={.data.\.dockerconfigjson}&amp;quot;&#xA;    --output=yaml&#xA;    --context=iot&#xA;    --namespace=iot &#xA;    --all-namespaces=true&#xA;    -n [namespace] &#xA;    --all                           # 如匹配所有deploy文件&#xA;Other Commands&#xA;    api-resources           # 查所有resource&#xA;        namespace/ns&#xA;        endpoints/ep&#xA;        nodes/no&#xA;        configmap/cm  &#xA;        replicationcontrollers/rc&#xA;        deployments/deploy&#xA;        statefulsets/sts&#xA;        service/svc &#xA;        ingresses/ing&#xA;        persistentvolumes/pv&#xA;        persistentvolumeclaims/pvc&#xA;        storageclasses/sc&#xA;        pods/po&#xA;        cronjobs/cj&#xA;        daemonset/ds                    # 每个node运行一个&#xA;        certificatesigningrequests/csr  # csr证书&#xA;    api-versions            # 所有可用的apiVersion&#xA;    config                  # 设置集群&#xA;        config set current-context c1&#xA;    plugin                  # 设置插件&#xA;    version&#xA;Basic Commands:&#xA;    create&#xA;        -f y1.yml&#xA;    expose                          # 修改端口&#xA;        expose deployment/[deployName]&#xA;        --target-port=8080 &#xA;        --type=NodePort&#xA;    run   &#xA;        run [deployName] &#xA;        --image=gcr.io/google-samples/hello-app:1.0&#xA;        --port=8080&#xA;    set                             # 更新配置&#xA;        set image deploy/[deployName] *=image1:1.1&#xA;            # 所有镜像更新为image1:1.1&#xA;    explain                         # 查resource文档&#xA;        pv&#xA;    get&#xA;        -o                          # 格式&#xA;            yaml&#xA;            wide&#xA;            jsonpath=&#39;{.items[0].metadata.name}&#39;&#xA;        -l app=a1                   # select label&#xA;        -c gateway&#xA;        --show-labels&#xA;        --selector app=a1&#xA;        --all-containers=true&#xA;    edit                            # 修改配置&#xA;        edit ingress ingress1&#xA;    delete &#xA;        --force  &#xA;        --grace-period=0&#xA;Deploy Commands:&#xA;    rollout&#xA;        history deploy/deploy1&#xA;        pause deploy/deploy1&#xA;        restart&#xA;        resume deploy/deploy1&#xA;        status &#xA;        undo deploy/deploy1         # 回滚到上一版本&#xA;    scale&#xA;        scale deploy/deploy1&#xA;            --replicas=1&#xA;    autoscale&#xA;        autoscale deploy/deploy1&#xA;            --min=1&#xA;            --max=3&#xA;            --cpu-percent=80&#xA;Cluster Management Commands:&#xA;    certificate&#xA;        approve [csrName]           # 手动签发证书，/etc/kubernetes/ssl/*&#xA;        deny&#xA;    cluster-info                    # 集群信息 &#xA;        dump&#xA;    top                             # cpu 内存负载&#xA;        node&#xA;        pod&#xA;    cordon [nodeName]               # node不可调度&#xA;    uncordon                        # node可调度&#xA;    drain [nodeName]                # 移除node&#xA;    taint                           # node污点&#xA;        taint nodes node1 key1=val1:NoSchedule&#xA;Troubleshooting and Debugging Commands:&#xA;    describe     &#xA;    logs&#xA;    attach                          # 当前终端成为entrypoint&#xA;    exec         &#xA;        -it device-7b8965d85d-xz4qm bash&#xA;        -it device-7b8965d85d-xz4qm --container device -- /bin/bash&#xA;    port-forward                    # 端口映射&#xA;        port-forward [podName] 本地端口:pod端口&#xA;    proxy                           # 映射ApiServer到本地端口&#xA;        --port=8080&#xA;    cp                              # copy容器文件&#xA;        cp [namespaceName]/[podName]:[filePath] .&#xA;    auth         &#xA;        can-i list pods             # judge权限&#xA;        reconcile -f rbac.yaml      # 应用权限配置&#xA;            --dry-run               # 仅测试，列出变更&#xA;            --remove-extra-subjects         # 删除除外subject&#xA;            --remove-extra-permissions      # 删除除外权限&#xA;    debug                           # pod调试模式, alpha版功能，需要--feature-gates=&amp;quot;EphemeralContainers=true&amp;quot;&#xA;        -it pod1 &#xA;        --image=image1              # 排错工具镜像&#xA;        --share-processes           # 共享进程&#xA;        --copy-to=pod1-debug&#xA;Advanced Commands:&#xA;    diff      &#xA;        diff -f a.yml               # dry run 找出将实行的变更&#xA;    apply           # 升级&#xA;        -f y1.yml&#xA;        -k overlays/&#xA;    patch                           # 更新属性&#xA;        patch deploy/deploy1&#xA;        -p &#39;{&amp;quot;spec&amp;quot;:{&amp;quot;unschedulable&amp;quot;:true}}&#39;&#xA;    replace                         # 替换resource&#xA;        replace -f a.yml&#xA;    wait                            # 等待直到满足条件&#xA;        -f a.yml&#xA;        --for=condition=Available&#xA;        --timeout=1h&#xA;    kustomize                       # 多环境部署的overlays补丁&#xA;        kustomize [dir with kustomization.yml]&#xA;Settings Commands:&#xA;    label&#xA;        label pods/pod1 a=b&#xA;        --overwrite                 # 覆盖更新&#xA;        --resource-version=1        # 匹配没修改过的情况&#xA;    annotate&#xA;        annotate pods/pod1 a=&#39;b&#39;&#xA;        --overwrite&#xA;    completion                      # 生成终端命令补全配置&#xA;        completion bash &amp;gt; /etc/bash_completion.d/kubectl&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;helm&#34;&gt;&#xA;  Helm&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#helm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;目录&#xA;    charts/&#xA;    Chart.yaml&#xA;        apiVersion: v1&#xA;        appVersion: &amp;quot;1.0&amp;quot;&#xA;        description: A Helm chart for Kubernetes&#xA;        name: nginx-test&#xA;        version: 0.1.0&#xA;    requirements.yaml&#xA;    requirements.lock&#xA;    values.yaml&#xA;        replicaCount: 1&#xA;    templates/&#xA;        _helpers.tpl&#xA;        deployment.yaml&#xA;    &#xA;helm命令&#xA;    查看&#xA;        ls/list&#xA;            --all-namespaces&#xA;        get values a1                   # 查看已部署的values变更&#xA;        history  a1                     # 查看历史版本&#xA;        get manifest a1                 # 查看已安装模板&#xA;        template                        # 查看编译后内容&#xA;            --debug&#xA;        search repo a1 &#xA;            --versions&#xA;    安装&#xA;        repo&#xA;            update&#xA;        install [deployName] [packageName|packageFile|packagePath] &#xA;            -f values.yaml&#xA;            --values=values.yaml&#xA;            --set a=b&#xA;        upgrade                         # 热更新部署文件&#xA;            --debug --dry-run           # 只输出编译结果&#xA;            -i                          # 没有时执行install&#xA;            --disable-openapi-validation&#xA;        uninstall&#xA;    插件&#xA;        plugin&#xA;            install --version master https://gitee.com/mirrors_sonatype-nexus-community/helm-nexus-push.git&#xA;            ls&#xA;    运维&#xA;        rollback a1 1                   # 回滚到1版本&#xA;    打包&#xA;        create a1&#xA;        lint --strict a1                # 校验&#xA;        package a1                      # 打包成a1-0.1.0.tgz&#xA;&#xA;相关命令&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;minikube&#34;&gt;&#xA;  minikube&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#minikube&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker login --username=934260428@qq.com registry.cn-hangzhou.aliyuncs.com&#xA;命令&#xA;    minikube&#xA;        start --vm-driver=virtualbox \&#xA;            --memory=4096 \&#xA;            --cpus=2 \&#xA;            --log_dir=/home/outrun/logs \&#xA;            --insecure-registry=192.168.99.1:5000 \&#xA;            --insecure-registry=registry.cn-qingdao.aliyuncs.com \&#xA;            --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers&#xA;&#xA;            --kubernetes-version v1.17.0&#xA;            --docker-env=HTTP_PROXY=$HTTP_PROXY \&#xA;            --docker-env=HTTPS_PROXY=$HTTPS_PROXY \&#xA;            --docker-env=NO_PROXY=$NO_PROXY \&#xA;            --image-mirror-country=cn \&#xA;            --registry-mirror=https://registry.docker-cn.com \&#xA;            --extra-config=kubelet.MaxPods=5.&#xA;                # registry一定是minikube容器ip, 可用ifconfig查看&#xA;                # --insecure-registry修改需要minikube delete&#xA;        stop&#xA;        delete&#xA;        status &#xA;        docker-env&#xA;        ip      # 得到单机集群ip&#xA;        service  -n iot mosquitto --url&#xA;            # 得到service的nodePort&#xA;&#xA;        ssh&#xA;        dashboard&#xA;        addons&#xA;            list&#xA;            enable heapster&#xA;            enable ingress&#xA;服务&#xA;    kube-system&#xA;        coredns&#xA;        etcd-minikube&#xA;        kube-addon-manager-minikube&#xA;        kube-proxy&#xA;        kube-scheduler-minikube&#xA;        nginx-ingress-controller&#xA;        storage-provisioner&#xA;    kubernetes-dashboard&#xA;        dashboard-metrics-scraper&#xA;        kubernetes-dashboard&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;平台&#34;&gt;&#xA;  平台&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b9%b3%e5%8f%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;HPE Container Platform&#xA;OpenShift&#xA;VMware VSphere&#xA;Minikube&#xA;Rancher&#xA;KubeSphere&#xA;Google Cloud Platform(GCP)&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
