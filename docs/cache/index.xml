<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cache on ukeate的笔记</title>
    <link>https://ukeate.com/docs/cache/</link>
    <description>Recent content in Cache on ukeate的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://ukeate.com/docs/cache/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://ukeate.com/docs/cache/ops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/cache/ops/</guid>
      <description>&lt;h1 id=&#34;java&#34;&gt;&#xA;  java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;-Dserver.port=18001&#xA;-Deureka.client.serviceUrl.defaultZone=http://localhost:19090/eureka&#xA;-javaagent:/opt/svc/apache-skywalking-apm-bin/agent/skywalking-agent.jar&#xA;-Dspring.profiles.active=prod&#xA;-Dlogging.config=classpath:logback-spring-prod.xml&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;mac-os-改mac&#34;&gt;&#xA;  mac os 改mac&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mac-os-%e6%94%b9mac&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;sudo /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -z&#xA;sudo ifconfig &amp;lt;intf&amp;gt; lladdr 00:bb:cc:dd:ee:ff &#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://ukeate.com/docs/cache/work_code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/cache/work_code/</guid>
      <description>&lt;h1 id=&#34;框架编写&#34;&gt;&#xA;  框架编写&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a1%86%e6%9e%b6%e7%bc%96%e5%86%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;命令&#34;&gt;&#xA;  命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;git update-index &amp;ndash;assume-unchanged a&#xA;mvn clean deploy -P keruyun -pl alsc-item-solution-kryun-dish-client -DskipTests&lt;/p&gt;&#xA;&lt;h1 id=&#34;阿里云搜索词&#34;&gt;&#xA;  阿里云搜索词&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%98%bf%e9%87%8c%e4%ba%91%e6%90%9c%e7%b4%a2%e8%af%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;大屏&#34;&gt;&#xA;  大屏&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%a7%e5%b1%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;and &lt;strong&gt;tag&lt;/strong&gt;:&lt;strong&gt;path&lt;/strong&gt;: &amp;ldquo;/data/app/jncloud/screen/log/info.log&amp;rdquo;  and resourceMap and {7435ca87-1c8c-4c76-bcfd-6f45b9c8b167}&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;时长请求&#34;&gt;&#xA;  时长请求&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%95%bf%e8%af%b7%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;tag&lt;/strong&gt;:&lt;strong&gt;path&lt;/strong&gt;:/var/log/nginx/access.log and upstream_response_time &amp;gt; 1 | select distinct request_uri , count(request_uri) as &amp;ldquo;count&amp;rdquo;, max(upstream_response_time) as max_time, min(upstream_response_time) as min_time, avg(upstream_response_time) as avg_time from log group by request_uri order by count desc&lt;/p&gt;&#xA;&lt;h2 id=&#34;ip分布&#34;&gt;&#xA;  IP分布&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ip%e5%88%86%e5%b8%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;tag&lt;/strong&gt;:&lt;strong&gt;path&lt;/strong&gt;:/var/log/nginx/access.log | select count(1) as c, ip_to_province(remote_addr) as address group by address order by c desc limit 100&#xA;&lt;strong&gt;tag&lt;/strong&gt;:&lt;strong&gt;path&lt;/strong&gt;:/var/log/nginx/access.log | select count(1) as c, remote_addr, ip_to_province(remote_addr) as address group by remote_addr order by c desc limit 100&lt;/p&gt;</description>
    </item>
    <item>
      <title>软考架构师</title>
      <link>https://ukeate.com/docs/cache/soft_arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/cache/soft_arch/</guid>
      <description>&lt;h1 id=&#34;计算机基础&#34;&gt;&#xA;  计算机基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;冯诺依曼&#xA;&#x9;输入、输出、存储器(中心)、运算器控制器(CPU)&#xA;硬件图&#xA;&#x9;主机(运算器、控制器、主存)&#xA;&#x9;存储器: 主存、辅存&#xA;&#x9;I/O设备&#xA;CPU&#xA;&#x9;指令: 操作码, 地址码&#xA;&#x9;运算器&#xA;&#x9;&#x9;ALU: 算逻运算&#xA;&#x9;&#x9;&#x9;PSW状态寄存器&#xA;&#x9;&#x9;&#x9;&#x9;ACC &#x9;&#x9;&#x9;MQ&#x9;&#x9;&#x9;&#x9;X&#xA;&#x9;&#x9;&#x9;加 &#x9;被加数、和&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;加数&#xA;&#x9;&#x9;&#x9;减&#x9;被减数、差&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;减数&#xA;&#x9;&#x9;&#x9;乘&#x9;乘积高位&#x9;&#x9;乘数、乘积低位&#x9;被乘数&#xA;&#x9;&#x9;&#x9;除&#x9;被除数、余数&#x9;商&#x9;&#x9;&#x9;&#x9;除数&#xA;&#x9;控制器&#xA;&#x9;&#x9;CU: 控制单元&#xA;&#x9;&#x9;&#x9;时序部件: 时钟控制&#xA;&#x9;&#x9;&#x9;ID: 指令译码器&#xA;&#x9;&#x9;&#x9;IR: 指令寄存器,即将执行的指令,查MAR&#xA;&#x9;&#x9;&#x9;PC: 程序计数器,下条指令地址&#xA;&#x9;存储体&#xA;&#x9;&#x9;MAR: 地址寄存器, 现在集成到了CPU&#xA;&#x9;&#x9;MDR: 数据寄存器, 指令存到IR&#xA;主存&#xA;&#x9;存储单元: 存1字节, 唯一地址用16进制数表示&#xA;&#x9;总线&#xA;&#x9;&#x9;地址总线: 长度表示n位二进制数地址数&#xA;&#x9;&#x9;数据总线: 长度表示一次处理多少位，叫作1个字的长度&#xA;存储器&#xA;&#x9;分类&#xA;&#x9;&#x9;位置&#xA;&#x9;&#x9;&#x9;内存(主存)&#xA;&#x9;&#x9;&#x9;外存(辅存)&#xA;&#x9;&#x9;材料&#xA;&#x9;&#x9;&#x9;半导体&#xA;&#x9;&#x9;&#x9;&#x9;静态: 双稳态触发器&#xA;&#x9;&#x9;&#x9;&#x9;动态: 依靠电容上的电荷存储，主存&#xA;&#x9;&#x9;&#x9;磁介质: 磁性材料的不同状态存储，外存&#xA;&#x9;&#x9;&#x9;光: 利用光斑、晶像的变化表示信息，外存&#xA;&#x9;&#x9;工作方式&#xA;&#x9;&#x9;&#x9;读/写RAM&#xA;&#x9;&#x9;&#x9;只读&#xA;&#x9;&#x9;&#x9;&#x9;固定ROM: 用户不可写&#xA;&#x9;&#x9;&#x9;&#x9;可编程PROM: 用户写1次&#xA;&#x9;&#x9;&#x9;&#x9;可擦除可编程EPROM: 可多次编程，紫外线擦除&#xA;&#x9;&#x9;&#x9;&#x9;电擦除可编程EEPROM: 可多次编程，电擦除&#xA;&#x9;&#x9;&#x9;&#x9;闪存: 接近EEPROM&#xA;&#x9;&#x9;访问方式&#xA;&#x9;&#x9;&#x9;按地址访问的&#xA;&#x9;&#x9;&#x9;按内容访问的&#xA;&#x9;&#x9;寻址方式&#xA;&#x9;&#x9;&#x9;随机RAM: 按地址访问任一单元，主存&#xA;&#x9;&#x9;&#x9;顺序SAM: 访问时按顺序查找目标地址，磁带&#xA;&#x9;&#x9;&#x9;直接DAM: 按照数据块所在位置访问，磁盘&#xA;&#x9;&#x9;&#x9;相联：按照内容进行访问，Cache&#xA;校验码&#xA;&#x9;类别&#xA;&#x9;&#x9;奇偶校验码&#xA;&#x9;&#x9;&#x9;只能发现奇数个位出错&#xA;&#x9;&#x9;海明码&#xA;&#x9;&#x9;&#x9;奇偶校验、分组校验&#xA;&#x9;&#x9;&#x9;n为数据位个数，求校验位个数k: 2^k &amp;gt;= n+k+1&#xA;&#x9;&#x9;CRC循环冗余校验码&#xA;&#x9;码距: 任意两个码字的最小距离&#xA;&#x9;&#x9;检测出e个误码，要求码距d&amp;gt;=e+1&#xA;&#x9;&#x9;纠正t个误码，要求码距d&amp;gt;=2t+1&#xA;指令&#xA;&#x9;指令周期&#xA;&#x9;执行&#xA;&#x9;&#x9;顺序执行&#xA;&#x9;&#x9;重叠执行&#xA;&#x9;&#x9;流水线&#xA;&#x9;&#x9;&#x9;建立时间: 第一条指令执行完毕时间&#xA;&#x9;&#x9;&#x9;流水线周期: 部件(取指、分析、执行)执行时间最长的一段&#xA;&#x9;&#x9;&#x9;全部执行完时间&#xA;&#x9;&#x9;&#x9;&#x9;理论公式: (t1+t2+...+tk) + (n-1)*t&#xA;&#x9;&#x9;&#x9;&#x9;实践公式: (k+n-1)*t&#xA;&#x9;&#x9;&#x9;吞吐率: 指令条数/执行时间&#xA;&#x9;&#x9;&#x9;最大吞吐率: 1/流水线周期时间&#xA;&#x9;&#x9;&#x9;加速比: 不使用流水线时间/使用流水线时间&#xA;高速缓存&#xA;&#x9;局部性原理&#xA;&#x9;&#x9;时间局部性: 经常使用&#xA;&#x9;&#x9;空间局部性: 相临空间内容&#xA;&#x9;架构&#xA;&#x9;&#x9;地址总线、数据总线&#xA;&#x9;&#x9;地址映射、变换机构&#xA;&#x9;&#x9;&#x9;直接映像: 放到cache第0页。简单，但不灵活，块冲突率高&#xA;&#x9;&#x9;&#x9;&#x9;离cpu近时用&#xA;&#x9;&#x9;&#x9;全相联映像: 灵活但变换复杂&#xA;&#x9;&#x9;&#x9;&#x9;离cpu远时用&#xA;&#x9;&#x9;&#x9;组相联映像: 组间直接映像, 主存区映射到cache页, 组内全相联映像。&#xA;&#x9;&#x9;&#x9;&#x9;离cpu近时用&#xA;&#x9;&#x9;主存装入或替换&#xA;&#x9;平均访问时间: ta=Hctc+(1-HC)tm&#xA;&#x9;写策略&#xA;&#x9;&#x9;写直达(write-through): 同步修改主存&#xA;&#x9;&#x9;写回法(write-back): cache被替换时写主存&#xA;&#x9;&#x9;标记法: 有效位1未修改,0时读主存&#xA;&#x9;替换算法&#xA;&#x9;&#x9;随机算法&#xA;&#x9;&#x9;先进先出(FIFO)&#xA;&#x9;&#x9;近期最少使用(LRU)&#xA;&#x9;&#x9;最不经常使用(LFU): 有时间窗口的LRU&#xA;磁盘存储器&#xA;&#x9;磁盘、磁头、磁道、扇区、数据块、柱面&#xA;&#x9;存取时间: 寻道时间 + 等待时间 + 读/写时间(可忽略)&#xA;计算机系统结构分类&#xA;&#x9;Flynn分类法&#xA;&#x9;&#x9;指令流: 执行的指令序列&#xA;&#x9;&#x9;数据流: 指令流调用的数据序列, 包括输入数据和中间结果&#xA;&#x9;Flynn类别&#xA;&#x9;&#x9;单指令流单数据流(SISD)&#xA;&#x9;&#x9;单指令流多数据流(SIMD)&#xA;&#x9;&#x9;多指令流单数据流(MISD): 少见&#xA;&#x9;&#x9;多指令流多数据流(MIMD)&#xA;&#x9;指令系统&#xA;&#x9;&#x9;复杂指令系统(CISC)&#xA;&#x9;&#x9;&#x9;指令多, 大概100-250条&#xA;&#x9;&#x9;&#x9;只有20%常用&#xA;&#x9;&#x9;&#x9;寻址方式多(5-20种)&#xA;&#x9;&#x9;&#x9;变长指令电路复杂&#xA;&#x9;&#x9;&#x9;直接交互主存速度慢&#xA;&#x9;&#x9;&#x9;用微程序而非硬布线逻辑电路控制&#xA;&#x9;&#x9;精简指令系统(RISC)&#xA;&#x9;&#x9;&#x9;指令数量少&#xA;&#x9;&#x9;&#x9;寻址方式少，通常只有寄存器寻址、立即数寻址、相对寻址&#xA;&#x9;&#x9;&#x9;指令长度固定&#xA;&#x9;&#x9;&#x9;硬布线逻辑控制为主&#xA;&#x9;&#x9;&#x9;流水线技术&#xA;&#x9;&#x9;&#x9;优化的编译器，编译简化&#xA;&#x9;&#x9;&#x9;交互CPU寄存器, 一般32个以上&#xA;总线&#xA;&#x9;位置分类&#xA;&#x9;&#x9;内部&#xA;&#x9;&#x9;外部&#xA;&#x9;功能分类&#xA;&#x9;&#x9;地址&#xA;&#x9;&#x9;数据&#xA;&#x9;&#x9;控制&#xA;&#x9;数据线多少分类&#xA;&#x9;&#x9;并行: 速率高，近距离传输(内部部件系统总线)&#xA;&#x9;&#x9;串行: 速率不高，长距离传输&#xA;磁盘阵列&#xA;&#x9;RAID 0: 无冗余无校验, 存储性能最高&#xA;&#x9;RAID 1: 磁盘镜像阵列&#xA;&#x9;RAID 2: 海明码纪错, 增加3个校验盘提供单纠错和双验错。大量数据时I/O性能高，应用少&#xA;&#x9;RAID 3、4: 奇偶校验码, 3采用位交叉, 4采用块交叉。3适用大型文件且I/O需求不频繁, 4适用大型文件读取&#xA;&#x9;RAID 5: 无独立校验盘，校验信息分布在组内所有盘上，用户实际空间是N-1块盘。大批量和小批量数据的读写性能好了，适用I/O需求频繁的应用。应用多&#xA;&#x9;RAID 6: 独立数据盘+2个独立的分布式校验盘，用户实际空间是N-2块。效率一般，应用少&#xA;&#x9;RAID 7: 独立存储计算机，带操作系统和管理工具&#xA;&#x9;RAID 10: RAID 1+0结合。RAID 0下挂RAID 1, 应用多&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;操作系统基础&#34;&gt;&#xA;  操作系统基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;处理机管理&#xA;&#x9;进程状态&#xA;&#x9;&#x9;三状态: 运行、就绪、阻塞&#xA;&#x9;&#x9;组成: 程序、数据、PCB(进程唯一标识)&#xA;&#x9;&#x9;&#x9;PCB结构&#xA;&#x9;&#x9;&#x9;&#x9;线性方式&#xA;&#x9;&#x9;&#x9;&#x9;链接方式&#xA;&#x9;&#x9;&#x9;&#x9;索引方式&#xA;&#x9;前驱图: 有向无循环图&#xA;&#x9;PV操作&#xA;&#x9;&#x9;加锁(P操作信号量-1, 可能锁别的进程), 信号量为0时产生临界区&#xA;&#x9;&#x9;解锁(V操作信号量+1, 发现信号量为负时唤醒别的进程)&#xA;&#x9;&#x9;同步问题&#xA;&#x9;&#x9;&#x9;缓冲区满时不写空时不读，每个时刻只能一个操作(存或取)&#xA;&#x9;&#x9;&#x9;关键操作前P，关键操作后V&#xA;&#x9;&#x9;&#x9;两个信号量,加互斥信号量&#xA;存储器管理&#xA;&#x9;逻辑地址、物理地址&#xA;&#x9;&#x9;静态重定位: 绝对地址=相对地址+程序存放的内存起始地址&#xA;&#x9;&#x9;&#x9;运行前确定映射关系&#xA;&#x9;&#x9;&#x9;装入后不能移动&#xA;&#x9;&#x9;&#x9;占用连续的内存空间&#xA;&#x9;&#x9;动态重定位: 绝对地址=重写位寄存器的值(BR)+逻辑地址寄存器的值(VR)。硬件加寄存器实现地址转换&#xA;&#x9;&#x9;&#x9;程序占用的内存空间可动态变化&#xA;&#x9;&#x9;&#x9;不要求连续的内存空间&#xA;&#x9;&#x9;&#x9;便于多进程共享代码&#xA;&#x9;存储管理&#xA;&#x9;&#x9;分区管理: 主存用户区划分区域，每个区域分配给一个用户，并限制用户只能在区域中&#xA;&#x9;&#x9;&#x9;固定分区: 空间浪费&#xA;&#x9;&#x9;&#x9;可变分区: 根据程序大小选择合适分区&#xA;&#x9;&#x9;&#x9;&#x9;首次适应算法&#xA;&#x9;&#x9;&#x9;&#x9;最佳适应算法&#xA;&#x9;&#x9;&#x9;&#x9;最差适应算法&#xA;&#x9;&#x9;&#x9;可重定位分区&#xA;&#x9;&#x9;分页管理&#xA;&#x9;&#x9;&#x9;逻辑地址&#xA;&#x9;&#x9;&#x9;&#x9;页号: 20位&#xA;&#x9;&#x9;&#x9;&#x9;页内地址: 12位&#xA;&#x9;&#x9;&#x9;物理地址&#xA;&#x9;&#x9;&#x9;&#x9;块号&#xA;&#x9;&#x9;&#x9;&#x9;块内地址: 等于页内地址&#xA;&#x9;&#x9;&#x9;页表&#xA;&#x9;&#x9;&#x9;&#x9;硬件生成&#xA;&#x9;&#x9;&#x9;&#x9;页起始地址、页长度&#xA;&#x9;&#x9;分段管理&#xA;&#x9;&#x9;&#x9;逻辑地址: 段号、段内地址&#xA;&#x9;&#x9;&#x9;物理地址&#xA;&#x9;&#x9;&#x9;段表: 基址、段长&#xA;&#x9;&#x9;段页式管理&#xA;&#x9;&#x9;&#x9;逻辑地址: 段号、页号、页内地址&#xA;&#x9;&#x9;&#x9;物理地址: &#xA;&#x9;&#x9;虚拟存储&#xA;&#x9;&#x9;&#x9;请求分页&#xA;&#x9;&#x9;&#x9;请求分段&#xA;&#x9;&#x9;&#x9;请求段页式&#xA;设备管理: 输入输出控制方式&#xA;&#x9;程序控制: 串行&#xA;&#x9;&#x9;无条件传送&#xA;&#x9;&#x9;程序查询&#xA;&#x9;中断: 并行&#xA;&#x9;DMA(直接内存访问): 设备访问内存，CPU不能访问内存&#xA;文件管理&#xA;&#x9;文件索引&#xA;&#x9;&#x9;一个节点占4字节&#xA;&#x9;&#x9;直接索引: 检索范围小&#xA;&#x9;&#x9;间接索引&#xA;&#x9;&#x9;&#x9;一级&#xA;&#x9;&#x9;&#x9;二级&#xA;&#x9;使用情况: bitmap标记&#xA;&#x9;&#x9;字长x字编号&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;计算机网络基础&#34;&gt;&#xA;  计算机网络基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;OSI七层&#xA;&#x9;应用层&#xA;&#x9;&#x9;HTTP、Telnet、FTP、SMTP、NFS&#xA;&#x9;表示层&#xA;&#x9;&#x9;JPEG、ASCII、GIF、DES、MPEG&#xA;&#x9;会话层&#xA;&#x9;&#x9;RPC、SQL&#xA;&#x9;传输层&#xA;&#x9;&#x9;TCP、UDP、SPX&#xA;&#x9;网络层&#xA;&#x9;&#x9;IP、IPX、ICMP&#xA;&#x9;链路层&#xA;&#x9;&#x9;MAC(媒介访问层)、LLC(逻辑链路层)&#xA;&#x9;&#x9;IEEE802.3/.2、HDLC、PPP、ATM&#xA;&#x9;物理层&#xA;&#x9;&#x9;RS232、V.35、RJ-45、FDDI&#xA;IP协议&#xA;&#x9;IPV4: 32位&#xA;&#x9;&#x9;A类: 0开头: 1-126&#xA;&#x9;&#x9;B类: 10开头: 128-191&#xA;&#x9;&#x9;C类: 110开头: 192-223&#xA;&#x9;&#x9;D类: 1110开头: 224-239, 组播&#xA;&#x9;&#x9;E类: 1110开头: 240-255, 保留&#xA;&#x9;子网&#xA;&#x9;&#x9;三级IP地址: 子网号主机号中借出来&#xA;&#x9;&#x9;子网掩码&#xA;&#x9;&#x9;&#x9;A类地址的: 255.0.0.0&#xA;&#x9;&#x9;&#x9;B类地址的: 255.255.0.0&#xA;&#x9;&#x9;&#x9;C类地址的: 255.255.255.0&#xA;&#x9;IPV4数据报&#xA;&#x9;&#x9;版本&#xA;&#x9;&#x9;首部长度&#xA;&#x9;&#x9;区分服务&#xA;&#x9;&#x9;总长度: 2^16-1=65535字节&#xA;&#x9;&#x9;标识&#xA;&#x9;&#x9;标志: DF不分片, MF: 片未分完&#xA;&#x9;&#x9;片偏移&#xA;&#x9;&#x9;生存时间&#xA;&#x9;&#x9;协议&#xA;&#x9;&#x9;首部校验和&#xA;&#x9;&#x9;可选字段&#xA;&#x9;&#x9;填充: 达到4的倍数&#xA;&#x9;IPV6: 128位，共8段用:分开, 每段4个16进制数&#xA;&#x9;&#x9;支持单播/多播/组播/任播&#xA;&#x9;&#x9;支持自动配置&#xA;&#x9;IPV4过渡IPV6&#xA;&#x9;&#x9;双协议栈&#xA;&#x9;&#x9;遂道&#xA;&#x9;&#x9;NAT-PT&#xA;&#x9;IPV6数据报&#xA;&#x9;&#x9;版本&#xA;&#x9;&#x9;流量分类: 相当于区分服务&#xA;&#x9;&#x9;流标签&#xA;&#x9;&#x9;有效负载长度: 除基本首部外的字节数&#xA;&#x9;&#x9;下一头部: 相当于协议&#xA;&#x9;&#x9;跳数限制: 相当于生存时间&#xA;&#x9;TCP/UDP&#xA;&#x9;&#x9;TCP&#xA;&#x9;&#x9;&#x9;数据报标记序号&#xA;&#x9;&#x9;&#x9;确认、校验、定时器，重传&#xA;&#x9;&#x9;&#x9;窗口机制流量调整&#xA;&#x9;&#x9;TCP协议&#xA;&#x9;&#x9;&#x9;校验和: 校验所有数据&#xA;&#x9;&#x9;UDP&#xA;&#x9;&#x9;&#x9;无连接&#xA;&#x9;&#x9;&#x9;尽最大努力交付&#xA;&#x9;&#x9;&#x9;面向报文&#xA;&#x9;&#x9;&#x9;无拥塞控制&#xA;&#x9;&#x9;&#x9;支持1对1、1对多、多对1通信&#xA;&#x9;&#x9;&#x9;首部小，只有8字节。TCP20字节&#xA;&#x9;&#x9;UDP协议&#xA;&#x9;&#x9;&#x9;校验和: 不校验或校验头部&#xA;&#x9;网络设计&#xA;&#x9;&#x9;接入层: 收集用户信息如Ip、MAC、访问日志。管理功能如MAC地址、计费管理&#xA;&#x9;&#x9;汇聚层: 网络访问策略控制，数据包处理、过滤、寻址&#xA;&#x9;&#x9;核心层: 双机冗余热备份&#xA;&#x9;&#x9;出口层&#xA;&#x9;综合布线系统&#xA;&#x9;&#x9;工作区子系统: 插座&#xA;&#x9;&#x9;水平子系统: 楼层, 接入管理子系统&#xA;&#x9;&#x9;管理子系统&#xA;&#x9;&#x9;垂直(干线)子系统: 主设备间至各层管理间&#xA;&#x9;&#x9;设备间子系统: 连接跳线架及支撑硬件，防雷电，是中心单元&#xA;&#x9;&#x9;建筑群子系统: 楼间连线&#xA;域名和地址&#xA;&#x9;DNS: UDP协议&#xA;&#x9;&#x9;结构&#xA;&#x9;&#x9;&#x9;根: 用.表示&#xA;&#x9;&#x9;&#x9;顶级域: com, edu, gov&#xA;&#x9;&#x9;&#x9;二级域: baidu&#xA;&#x9;&#x9;&#x9;子域: 最多63个字符&#xA;&#x9;&#x9;&#x9;主机&#xA;域名&#xA;&#x9;服务器&#xA;&#x9;&#x9;主域名服务器: 本区域名解析&#xA;&#x9;&#x9;辅助域名服务器: 备份&#xA;&#x9;&#x9;缓存域名服务器: 缓存查询结果&#xA;&#x9;&#x9;转发域名服务器: 非本地缓存中没有的，先查自身缓存，没有时转发到指定域名服务器&#xA;&#x9;查询方式&#xA;&#x9;&#x9;递归&#xA;&#x9;&#x9;&#x9;本服务器解析名字&#xA;&#x9;&#x9;迭代&#xA;&#x9;&#x9;&#x9;问别的服务器&#xA;&#x9;设备&#xA;&#x9;&#x9;中继器: 物理层，信号再生和发送,只直到扩展传输距离的作用，个数有限(以太网4个)&#xA;&#x9;&#x9;网桥: 数据链路层, 物理地址转发，只能连接相同MAC层的网络&#xA;&#x9;&#x9;路由器: 网络层&#xA;&#x9;&#x9;网关: 4-7层&#xA;&#x9;&#x9;集线器: 多端口中继器&#xA;&#x9;&#x9;二层交换机: 数据链路层，传统交换机，多端口网桥&#xA;&#x9;&#x9;三层交换机: 网络层，带路由功能的二层交换机&#xA;&#x9;&#x9;多层交换机: 4-7层，带协议转换&#xA;&#x9;网络存储&#xA;&#x9;&#x9;DAS: 直接附加存储, 设备通过SCSI电缆直接连到服务器，无操作系统存储的操作依赖于服务器。也叫作SAS(服务器附加存储)&#xA;&#x9;&#x9;NAS: 网络附加存储, 不再通过I/O总线附属特定服务器，而是通过网络接口与网络直接相连，用户通过网络访问。专用的文件服务器，即插即用&#xA;&#x9;&#x9;SAN: 存储区域网络, 专用交换机连接磁盘阵列与服务器&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;数据库基础&#34;&gt;&#xA;  数据库基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;结构&#xA;    开发人员: 三级模式，DBMS管理&#xA;        内模式: 内部视图, 只有一个&#xA;        概念模式: 概念视图, 公共视图, 只有一个&#xA;        外模式: 外部视图, 可以多个&#xA;    最终用户:&#xA;        单用户&#xA;        主从&#xA;        分布式&#xA;        客户-服务器&#xA;        浏览器-应用服务器/数据库服务器&#xA;独立性&#xA;&#x9;逻辑独立性: 数据的逻辑独立性&#xA;&#x9;&#x9;模式改变时，只改变映像&#xA;&#x9;物理独立性&#xA;&#x9;&#x9;存储结构改变，只改变映像&#xA;数据模型&#xA;&#x9;概念数据模型: E-R图&#xA;&#x9;基本数据模型: 计算机的观点来建模，用于DBMS实现&#xA;&#x9;&#x9;分类&#xA;&#x9;&#x9;&#x9;层次模型&#xA;&#x9;&#x9;&#x9;网状模型&#xA;&#x9;&#x9;&#x9;关系模型&#xA;&#x9;&#x9;&#x9;面向对象模型&#xA;&#x9;&#x9;关注&#xA;&#x9;&#x9;&#x9;数据结构&#xA;&#x9;&#x9;&#x9;数据操作&#xA;&#x9;&#x9;&#x9;数据约束条件&#xA;&#x9;&#x9;&#x9;&#x9;主属性非空&#xA;&#x9;&#x9;&#x9;&#x9;参照完整性: 外键，可以空但不能没有&#xA;&#x9;&#x9;&#x9;&#x9;用户定义完整性&#xA;概念&#xA;&#x9;关系: 表名&#xA;&#x9;元组: 记录&#xA;&#x9;属性: 列&#xA;&#x9;域: 取值范围&#xA;&#x9;关键字: 一组唯一标识元组的属性&#xA;&#x9;关系模式: 表结构&#xA;关系代数&#xA;&#x9;U: 并&#xA;&#x9;-: 差&#xA;&#x9;n: 交&#xA;&#x9;x: 笛卡尔积&#xA;&#x9;o: 选择, 取得符合条件的行&#xA;&#x9;π: 投影, 取得符合条件的列&#xA;&#x9;&amp;gt;&amp;lt;: 连接&#xA;&#x9;&#x9;等值连接: 笛卡尔积筛选属性相等的元组&#xA;&#x9;&#x9;自然连接: 等值连接去重复的列&#xA;&#x9;&#x9;外连接&#xA;&#x9;&#x9;&#x9;左外连接&#xA;&#x9;&#x9;&#x9;右外连接&#xA;&#x9;&#x9;&#x9;完全外连接 &#xA;函数依赖&#xA;&#x9;X-&amp;gt;Y&#xA;&#x9;&#x9;X函数确定Y&#xA;&#x9;&#x9;Y函数依赖于X&#xA;&#x9;平凡&#xA;&#x9;&#x9;X-&amp;gt;Y Y不包含于X，X-&amp;gt;Y非平凡函数依赖&#xA;&#x9;&#x9;X-&amp;gt;Y Y包含于X，X-&amp;gt;Y平凡函数依赖&#xA;&#x9;完全&#xA;&#x9;&#x9;完全函数依赖: 条件都用上, 完全依赖于主键&#xA;&#x9;&#x9;部分函数依赖: 条件过剩, 对主键有传递依赖&#xA;&#x9;&#x9;传递依赖 &#xA;&#x9;Armstrong公理&#xA;&#x9;&#x9;自反律: 内部包含的关系, Y属于X属于U，则X-&amp;gt;Y&#xA;&#x9;&#x9;增广律: X-&amp;gt;Y被F蕴含，则XZ-&amp;gt;YZ被F蕴含&#xA;&#x9;&#x9;传递律: 推导, X-&amp;gt;Y, Y-&amp;gt;Z, 则X-&amp;gt;Z&#xA;&#x9;&#x9;合并规则: X-&amp;gt;Y, X-&amp;gt;Z，则X-&amp;gt;YZ&#xA;&#x9;&#x9;伪传递规则: X-&amp;gt;Y, WY-&amp;gt;Z，则WX-&amp;gt;Z&#xA;&#x9;&#x9;分解规则: X-&amp;gt;Y, Z属于Y, 则X-&amp;gt;Z&#xA;&#x9;超键: 主键和其它键组合&#xA;&#x9;主键: 无多余属性&#xA;&#x9;候选键: 无多余属性可成为主键的键&#xA;&#x9;外键: 关联其它表主键&#xA;&#x9;主属性非主属性: 主键中的属性是主属性&#xA;&#x9;全码: 属性全是主键&#xA;规范化: 拆分表&#xA;&#x9;1NF: 每个属性(列)不可再分&#xA;&#x9;&#x9;不满足后果&#xA;&#x9;&#x9;&#x9;冗余大&#xA;&#x9;&#x9;&#x9;插入入异常、删除异常、修改异常&#xA;&#x9;2NF: 非主属性不完全依赖主键，即有对主键的部分依赖，不满足&#xA;&#x9;3NF: 有非主属性的传递依赖不完全依赖主键(比如依赖其它非主键属性)，不满足&#xA;&#x9;BC范式: 主键包含依赖的所有决定性因素(所有主属性)&#xA;&#x9;&#x9;不满足后果&#xA;&#x9;&#x9;&#x9;冗余大&#xA;&#x9;&#x9;&#x9;插入异常、删除异常&#xA;&#x9;&#x9;&#x9;修改复杂&#xA;&#x9;4NF: 没有多值属性&#xA;&#x9;5NF&#xA;&#x9;无损连接, 函数依赖性&#xA;设计&#xA;&#x9;规划阶段: 必要性、可行性&#xA;&#x9;需求分析: 产出需求规格说明书、数据字典&#xA;&#x9;&#x9;调查重点是&amp;quot;数据&amp;quot;、&amp;quot;处理&amp;quot;&#xA;&#x9;&#x9;数据字典: 数据项、数据流、数据存储、数据加工(结构化语言、判定数、判定表)&#xA;&#x9;概念设计: E-R图, 不依赖DBMS&#xA;&#x9;&#x9;局部E-R图，实体联系，消除冲突(属性冲突、结构冲突、命名冲突)成全局E-R图&#xA;&#x9;逻辑设计: 逻辑模型，产出关系模式&#xA;&#x9;&#x9;实体-&amp;gt;关系&#xA;&#x9;&#x9;属性-&amp;gt;属性&#xA;&#x9;&#x9;&#x9;复合属性、多值属性、派生属性、BLOB型属性、联系属性&#xA;&#x9;&#x9;关键字-&amp;gt;关键字&#xA;&#x9;物理设计: 建立物理模型, create table&#xA;反规范化&#xA;&#x9;增加冗余列、派生列&#xA;&#x9;重新组表&#xA;&#x9;分割表: 水平分割、垂直分割&#xA;事务管理ACID&#xA;&#x9;原子性Atomicity&#xA;&#x9;一致性Consistency&#xA;&#x9;隔离性Isolation&#xA;&#x9;持久性Durability&#xA;并发控制&#xA;    封锁&#xA;        排他锁(X)&#xA;        共享锁(S)&#xA;    协议&#xA;        一级: 加X锁&#xA;        二级: 加S锁，读完后释放&#xA;        三级: 加S锁，事务结束释放&#xA;        两段: 封锁阶段(扩展)加锁，释放阶段(收缩) 解锁&#xA;            可串行化，但可能死锁&#xA;分布式数据库&#xA;    特点&#xA;        分布性、统一性、透明性&#xA;    相对集中式数据库优点&#xA;        坚固性好&#xA;        可扩充性好&#xA;        可改善性能&#xA;        自治性好&#xA;    问题&#xA;        异构数据库集成复杂&#xA;    分布透明性&#xA;        分片透明: 透明性的最高层次&#xA;        位置透明: 用户需要了解分片，但不用了解存储场地&#xA;        局部数据透明: 需要了解分片和存储场地，不必了解局部场地的数据类型 &#xA;故障恢复&#xA;    事务故障: 系统扫描日志恢复&#xA;    系统故障&#xA;        正向扫描日志，已提交的redo, 未提交的undo&#xA;        撤销队列的事务撤销&#xA;        重做队列重做&#xA;    介质故障: 装入新副本，redo&#xA;    计算机病毒: 装入新副本，redo&#xA;检查点恢复&#xA;    建立检查点时刻所有正在执行的事务清单&#xA;    找到最后一个检查点, redo, undo&#xA;备份&#xA;    物理备份: 冷备、热备&#xA;    逻辑备份&#xA;备份类型&#xA;    完全备份&#xA;    增量备份: 需要恢复上次完全备份后的所有增量&#xA;    差异备份: 每次备份上次完全备份的差异&#xA; 数据仓库&#xA;    特点&#xA;        面向主题的、集成的、相对稳定的、反映历史变化的&#xA;        数据库是面向即时的&#xA;    建立 &#xA;        自顶向下&#xA;        自底向上&#xA;        混合法&#xA;数据挖掘&#xA;    流程&#xA;        问题定义，建立数据挖掘库，分析数据，调整数据，模型化，评价和解释&#xA;    方式&#xA;        关联分析，序列分析，分类分析，聚类分析，预测，时间序列&#xA;NoSQL&#xA;    ACID&#xA;    CAP&#xA;        Consistency&#xA;        Availability&#xA;        Partition tolerance&#xA;    BASE&#xA;        Basically available&#xA;        Soft state&#xA;        Eventually consistent&#xA;    类型&#xA;        键值&#xA;        列族: 关心的是属性列，适合分析&#xA;            列族，列限定符，行键，时间戳&#xA;        文档&#xA;        图&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;专业知识&#34;&gt;&#xA;  专业知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%93%e4%b8%9a%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;软件工程&#34;&gt;&#xA;  软件工程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bd%af%e4%bb%b6%e5%b7%a5%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;历史&#xA;    1960年软件危机: 价格贵、质量差、不符合用户需求、文档不完整、可维护性差&#xA;    1946-1956: 程序设计时代&#xA;    1956-1968: 程序系统时代&#xA;    1968: 软件工程时代&#xA;过程&#xA;    需求分析: 效果图&#xA;        用例图&#xA;    软件设计&#xA;        类图&#xA;        活动图&#xA;        状态图&#xA;    软件实现&#xA;    软件交付&#xA;生命周期&#xA;    定义&#xA;        定义问题、可行性研究、需求分析&#xA;    开发&#xA;        概要设计、详细设计、编码、测试&#xA;    运维&#xA;        更正性维护、适应性维护、预防性维护、完善性维护&#xA;    消亡&#xA;        报废&#xA;        遗留系统&#xA;开发方法&#xA;    开发风范分类&#xA;        自顶向下&#xA;        自底向上&#xA;    性质分类&#xA;        形式化&#xA;            基于数学，一般用于一致性检查、类型检查、有效性验证、行为预测、设计求精验证&#xA;            包括: 有限状态机、Petri网、VDM语言、Z语言等&#xA;        非形式化&#xA;            结构化: 面向过程&#xA;&#x9;&#x9;&#x9;&#x9;结构化方法&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;设计&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;分析(SA, Structured Analysis)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;适用面向过程、数据流&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;数据流图DFD: 功能&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;数据流&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;存储和实体, 实体实体间必须经过加工。看输入输出是否缺失&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;分类: 写、读、输入、输出&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;加工&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;实现: 结构化语言、判定表、判定树&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;分类: 黑洞、奇迹、灰洞&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;数据存储&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;外部实体: 人、物品、其它系统&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;状态转换图STD: &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;数据字典&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;条目: 数据流、数据项、数据存储、基本加工&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;程序设计&#xA;&#x9;&#x9;&#x9;&#x9;特点&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;目标清晰&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;工作阶段化&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;文档规范&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;设计方法结构化&#xA;&#x9;&#x9;&#x9;&#x9;缺点&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;串行开发周期长&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;要求需求明确, 难以适应变化&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;很少考虑数据结构&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;要向上回溯所以要文档齐全&#xA;            面向对象&#xA;&#x9;&#x9;&#x9;&#x9;喷泉模型&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;面向对象方法&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;步骤: 分析、设计、实现、维护、演化&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;特点&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;过程节点无间隙&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;迭代&#xA;&#x9;&#x9;&#x9;&#x9;V模型: 测试模型, 基准于瀑布模型&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;编码: 单元测试&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;详细设计: 集成测试&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;概要设计: 系统测试&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;需求分析: 验收测试&#xA;&#x9;&#x9;&#x9;&#x9;实现: 对象标识、对象属性、对象方法、对象消息&#xA;&#x9;&#x9;&#x9;&#x9;分类: 面向对象分析OOA, 面向对象设计OOD, 面向对象程序设计OOP&#xA;&#x9;&#x9;&#x9;&#x9;方法&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Coad/Yourdon: OOA,OOD, 不需要表示法的转换&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Booch&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;开发模型&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;静态模型: 逻辑模型(类图、对象图)，物理模型(模块图、进程图)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;动态模型: 状态图、顺序图&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;OMT: 建模的思想&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;对象模型(对象图)，动态模型(状态图)，功能模型(DFD)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;OOSE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;用例取代了DFD&#xA;&#x9;&#x9;&#x9;&#x9;分析&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;功能模型: 用例图(取代DFD数据流图)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;组成: 参与者、用例、通信关联&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;方法: &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;识别参与者(外部实体): 人、物、其它系统、时钟&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;合并需求获得用例 &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;细化用例描述: 用例名称、简要说明、事件流(主事件流、备选事件流)、非功能性需求、前置条件、后置条件、扩展点、优先级&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;调整用例模型: 用例间关系调整&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;包含关系(属于依赖关系): 基用例指向子用例&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;扩展关系(属于依赖关系): 扩展用例指向基用例&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;泛化关系(继承关系): 子用例指向父用例&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;行为模型: 活动图、顺序图、状态图(取代状态转换图)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;数据模型: 类图(取代ER图)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;步骤&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;定义概念类: 显而易见的类、明显无意义的类、不确定的类&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;发现类: 名词短语法&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;发现用例: 动词&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;确定类之间的关系: 形成领域模型&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;关联&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;聚合、组合、&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;依赖、泛化、实现&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;为类添加职责&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;建立交互图&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;设计&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;用例图表示需求&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;用例模型提炼领域模型，用例的实现用交互图&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;领域模型和用例图形成类图&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;包图和类图形成体系结构图&#xA;&#x9;&#x9;&#x9;构件(组件)化开发: 装配式思想&#xA;&#x9;&#x9;&#x9;&#x9;RAD快速应用开发; 基于瀑布模型&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;步骤&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;规划&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;设计实现, 不断迭代&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;运行&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;不适合新技术, 因为适用性窄还好拆成熟构件&#xA;                UP/RUP统一过程模型: 基于面向对象，比较重型&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;内容组织&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;核心工作过程&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;核心过程工作流&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;商业建模&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;需求&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;分析和设计&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;实现&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;支持工作过程&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;测试&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;部署&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;配置和变更管理&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;项目管理&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;环境&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;时间组织&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;阶段&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;初始: 明确项目规模、评估项目风险、制定项目计划、阶段技术评审&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;细化: 确定架构、制定构建阶段计划、建立支持环境、选择构件、阶段技术评审&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;构建: 详细设计，编码、测试、集成&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;交付: 全面测试、补充文档、产品移交用户&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;迭代: 每个步骤都有迭代&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;思想&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;用例驱动&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;以架构为中心&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;迭代&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;增量&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;4+1视图&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;逻辑视图: 类图、对象图、状态图、协作图&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;进程(过程)视图: 活动图&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;实现(开发)视图: 包图、组件图&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;物理视图&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;场景(用例视图)&#xA;&#x9;&#x9;&#x9;&#x9;连接件&#xA;&#x9;&#x9;&#x9;&#x9;构件和对象&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;构件: 包含对象可独立部署、是组装单元、没有外部可见状态&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;对象: 有唯一标志，具有外部可见状态，封装了自己的状态和行为&#xA;&#x9;&#x9;&#x9;&#x9;构件与类&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;构件不一定包含类，一个类只属于一个构件&#xA;&#x9;&#x9;&#x9;&#x9;构件间消息通过接口&#xA;            面向服务: 构件化开发发展而来&#xA;                SOA: 可跨平台&#xA;&#x9;&#x9;&#x9;&#x9;组成: ESB&#xA;&#x9;&#x9;&#x9;&#x9;SO方法&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;操作层&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;服务层: 操作分组&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;业务流程层: 服务编排&#xA;            原型法: 需求不明确时&#xA;                原型(演化)模型&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;原型-&amp;gt;交流-&amp;gt;快速计划、构建、交付&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;优点&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;引导出高质量产品要求&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;缺点&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;用户接触未稳定功能，对开发失去信心&#xA;&#x9;&#x9;&#x9;&#x9;螺旋模型&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;每一圈: 原型模型、瀑布模型&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;有风险: 适用大项目复杂项目, 需要风险分析&#xA;&#x9;&#x9;&#x9;&#x9;功能划分&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;水平原型: 行为原型，用于界面&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;垂直原型: 结构化原型，用于复杂算法&#xA;&#x9;&#x9;&#x9;&#x9;结果划分&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;抛弃式: 探索式，解决需求不确定性&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;演化式: 逐步演化，用于易于升级和优化的场合&#xA;            敏捷: 小和快&#xA;&#x9;&#x9;&#x9;&#x9;特点&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;以人为本&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;与用户协作&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;面对面沟通&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;尽早发布增量&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;小而自主的团队&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;规模小的项目&#xA;                极限编程XP&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;特点&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;更短的周期，更早反馈&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;迭代的计划编制&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;测试先行, 自动测试来监控开发进度, 口头交流&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;团队紧密合作&#xA;                并列争求法Scrum&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;product backlog -&amp;gt; sprint backlog&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sprint周期4周&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;daily meeting&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;燃尽图&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;评审会&#xA;&#x9;&#x9;开发方法与开发模型&#xA;&#x9;&#x9;&#x9;开发方法为指导思想, 可以多模型&#xA;&#x9;&#x9;&#x9;开发模型为图形化表示，具体开发过程&#xA;    适用范围分类&#xA;        整体性方法&#xA;        局部性方法&#xA;过程管理&#xA;&#x9;人员、技术设备、过程&#xA;&#x9;能力成熟度模型CMM&#xA;&#x9;&#x9;初始级&#xA;&#x9;&#x9;可重复级: 有项目管理过程，对成、进度、功能跟踪&#xA;&#x9;&#x9;已定义级: 文档化、标准化，形成标准软件过程&#xA;&#x9;&#x9;已管理级: 可预测，软件过程和产品质量有度量标准&#xA;&#x9;&#x9;优化级: 持续改进&#xA;&#x9;能力成熟度模型集成CMMI&#xA;&#x9;&#x9;初始级&#xA;&#x9;&#x9;已管理级: 有监督和控制&#xA;&#x9;&#x9;已定义级: 更严谨更积极的管理&#xA;&#x9;&#x9;已量化级: 可预测性高&#xA;&#x9;&#x9;持续优化级: 过程与技术改进，关注整体绩效&#xA;&#x9;连续式模型&#xA;&#x9;&#x9;CL0未完成级: 未执行&#xA;&#x9;&#x9;CL1已执行级: 特定目标&#xA;&#x9;&#x9;CL2已管理级: 管理过程制度化 &#xA;&#x9;&#x9;CL3已定义级: 已定义过程的制度化&#xA;&#x9;&#x9;CL4定量管理级: 可定量管理的过程的制度化&#xA;&#x9;&#x9;CL5优化级: 使用量化(统计学)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;系统分析&#34;&gt;&#xA;  系统分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;初始需求 -&amp;gt; 逻辑模型，产出系统需求规格说明书&#xA;步骤&#xA;&#x9;详细调查: 收集资料、开调查会、个别访问、书面调查、抽样调查、现场观摩、参加业务实践&#xA;&#x9;现有系统分析: 获得物理模型，建立逻辑模型，建立新系统逻辑模型、推出新系统物理模型&#xA;&#x9;组织结构分析: 组织结构图，组织结构调查&#xA;&#x9;系统功能分析: 功能体系图，功能流程图&#xA;&#x9;业务流程分析: 价值链分析法，客户关系分析，供应链分析法，基于ERP的分析法，业务流程重组&#xA;&#x9;业务流程建模&#xA;&#x9;&#x9;建模方式&#xA;&#x9;&#x9;&#x9;自顶向下: 企业任务目标出发&#xA;&#x9;&#x9;&#x9;自底向上: 分析现有系统&#xA;&#x9;&#x9;描述方法&#xA;&#x9;&#x9;&#x9;形式化描述: 严谨可读性差&#xA;&#x9;&#x9;&#x9;图示化描述&#xA;&#x9;&#x9;建模方法&#xA;&#x9;&#x9;&#x9;标杆瞄准&#xA;&#x9;&#x9;&#x9;IDEF&#xA;&#x9;&#x9;&#x9;DEMO: 交互模型、业务流程模型、事务模型、行为模型、事实模型、互约束模型&#xA;&#x9;&#x9;&#x9;Petri: 流程&#xA;&#x9;&#x9;&#x9;业务流程建模语言(文本类和图元类): UML、BPEL(文本类)、BPML(文本类, BPMI补充了图元)、BPMN、XPDL(文本+图元)&#xA;&#x9;&#x9;&#x9;基于服务的BPM&#xA;&#x9;数据与数据流程分析&#xA;&#x9;&#x9;收集数据，分类编码排放&#xA;&#x9;&#x9;按业务流程自顶向下整理&#xA;&#x9;&#x9;分类&#xA;&#x9;&#x9;确定类型&#xA;&#x9;数据属性分析&#xA;&#x9;&#x9;静态分析: 类型、取值范围、业务量、哪些业务使用、重要程度紧急程度&#xA;&#x9;&#x9;动态分析: &#xA;&#x9;&#x9;&#x9;动态特征: 固定值属性、固定个体变动属性、随机变动属性&#xA;&#x9;存储分布&#xA;&#x9;流程分析: 与组织结构无关&#xA;&#x9;&#x9;组成: 输入、输出、流动、传递、处理、存储&#xA;&#x9;&#x9;步骤 &#xA;&#x9;&#x9;&#x9;收集输入报表、存储介质&#xA;&#x9;&#x9;&#x9;明确各处理过程的方法&#xA;&#x9;&#x9;&#x9;调查数据制作单位、报送单位、存储单位、发生频率、发生的高峰时间和高峰量&#xA;&#x9;&#x9;&#x9;数据类型、长度、取值范围&#xA;&#x9;结构化开发(SA)方法: 使用DFD&#xA;&#x9;面向对象(OO)方法: 使用对象交互，对象持久化&#xA;需求规格说明书&#xA;&#x9;设计阶段依据， 验收标准之一&#xA;结构化方法&#xA;&#x9;组成&#xA;&#x9;&#x9;结构化分析: 分解与抽象原则，数据流图, 系统逻辑模型&#xA;&#x9;&#x9;结构化设计: 模块独立性准则、软件结构优化准则&#xA;&#x9;&#x9;结构化程序设计: &#xA;&#x9;特点&#xA;&#x9;&#x9;不适合大型项目&#xA;&#x9;&#x9;要求需求清晰&#xA;结构化分析：数据流图，系统逻辑图、划清人机界限&#xA;    数据流图平衡: 数据流条数一致&#xA;        父图和子图&#xA;        子图内部&#xA;    数据字典&#xA;结构化设计: 系统结构、接口、数据、过程&#xA;    模块化&#xA;        外部特性: 接口和功能定义&#xA;        内部特性: 局部数据和程序代码&#xA;    注意点&#xA;        抽象化&#xA;            过程&#xA;            数据&#xA;            控制&#xA;        自顶向下&#xA;        信息隐蔽: 可修改性、可测试、可移植性&#xA;        模块独立&#xA;    模块原则&#xA;        模块大小适中&#xA;        扇入扇出要合理: 扇入大表示复用高，扇出大表示复杂高&#xA;        深度和宽度适当: 层数和每层的模块数&#xA;    内聚类型: 由高到低&#xA;        功能: 单一功能&#xA;        顺序: 元素相关顺序执行&#xA;        通信: 元素集中在一个数据结构的区域上&#xA;        过程: 元素相关，按次序执行&#xA;        瞬时: 在同一时间间隔内执行(如初始化)&#xA;        逻辑: 逻辑相关的一组任务&#xA;        偶然: 没有关系或松散关系的任务&#xA;    耦合类型: 由低到高&#xA;        非直接: 没有直接联系&#xA;        数据: 参数表传递简单数据&#xA;        标记: 数据结构的一部分借助接口传递&#xA;        控制: 传递的信息可以控制内部逻辑&#xA;        外部: 与软件外环境相关&#xA;        公共: 多模块引用同一全局数据区&#xA;        内容: 访问另一模块内部数据、不通过正常入口转到另一模块内部、代码重叠、一个模块多个入口&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;软件架构设计&#34;&gt;&#xA;  软件架构设计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;软件架构(体系结构)&#xA;    接入层&#xA;    网关层&#xA;    业务服务层&#xA;    支撑服务&#xA;    平台服务&#xA;    基础设施层&#xA;生命周期&#xA;    需求分析: 需求模型，软件架构模型（可追踪到需求模型）&#xA;    设计: 组成元素，体系结构描述语言ADL，4+1视图&#xA;    实现: 项目组织结构，配置管理，中间件，程序设计语言，逐步细化&#xA;    构件组装阶段、部署、后开发&#xA;基于架构的软件设计方法ABSD&#xA;    商业，功能(视角视图)，非功能(质量)&#xA;    体系结构开发模型&#xA;        需求: 需求获取，生成类图，对类进行分组，把类打包成构件，需求评审&#xA;        设计: 提出体系结构模型，映射构件，分析构件的相互作用，产生体系结构，设计评审&#xA;        文档化: 规格说明，质量设计说明书&#xA;        复审&#xA;        演化&#xA;三个基础&#xA;    功能的分解&#xA;    选择体系结构风格&#xA;    软件模板的使用&#xA;结构风格&#xA;    系统家族&#xA;        一个词汇表: 构件，连接件类型&#xA;        一组约束: 构件、连接件组合方式&#xA;    反映领域中众多系统共有的结构、语义特性&#xA;    数据流风格&#xA;        流动: 自由流动、近线性流动、有限循环流动&#xA;        类型&#xA;            批处理风格: 粒度大，顺序执行，完整传输, 延迟高，无并发&#xA;            管道过滤器风格(如编译器): 粒度小，增量传输, 实时, 可以并发&#xA;    调用返回风格&#xA;        类型&#xA;            主程序子程序(开发语言)&#xA;            面向对象&#xA;            层次&#xA;    独立构件风格&#xA;        进程通信: 点对点，异步同步，远程调用&#xA;        事件驱动: 隐式调用，分离的交互，一对多，基于事件触发器，异步&#xA;&#x9;虚拟机风格&#xA;&#x9;&#x9;解释器&#xA;&#x9;&#x9;基于规则的系统 &#xA;&#x9;仓库(数据共享)风格&#xA;&#x9;&#x9;数据库系统&#xA;&#x9;&#x9;黑板系统: 语音识别&#xA;&#x9;&#x9;超文本系统&#xA;&#x9;闭环(过程)控制: 数据流风格&#xA;&#x9;&#x9;空调，巡航系统&#xA;&#x9;C2风格: 层次架构风格&#xA;&#x9;&#x9;构件顶部底部都是连接件&#xA;特定领域软件体系结构DSSA&#xA;&#x9;层次&#xA;&#x9;&#x9;领域开发环境(领域架构师)&#xA;&#x9;&#x9;领域特定应用开发环境(应用工程师)&#xA;&#x9;&#x9;应用执行环境(操作员)&#xA;&#x9;过程&#xA;&#x9;&#x9;领域分析&#xA;&#x9;&#x9;领域设计&#xA;&#x9;&#x9;领域实现&#xA;&#x9;参与角色: 领域专家, 领域分析人员，领域设计人员，领域实现人员&#xA;二层及三层C/S架构风格&#xA;&#x9;二层：客户机，服务器&#xA;&#x9;三层: 表示层，功能层，数据层&#xA;&#x9;B/S&#xA;J2EE&#xA;&#x9;客户层：Applet&#xA;&#x9;Web层: Servlet&#xA;&#x9;业务逻辑层：EJB(Entity, Session, Message)&#xA;&#x9;持久层：ORM&#xA;多层架构优缺点&#xA;&#x9;优点&#xA;&#x9;&#x9;可以只关注某层&#xA;&#x9;&#x9;容易替换成新实现&#xA;&#x9;&#x9;降低层与无尾熊依赖&#xA;&#x9;&#x9;利于标准化&#xA;&#x9;&#x9;利于各层逻辑复用&#xA;&#x9;&#x9;扩展性强，不同层负责不同的层面&#xA;&#x9;&#x9;安全性高，用户只能通过逻辑层访问&#xA;&#x9;&#x9;项目结构更清楚，分工更明确，有利于后期的维护和升级&#xA;&#x9;缺点&#xA;&#x9;&#x9;严格的分层可能有性能问题&#xA;&#x9;&#x9;清晰的分层架构并不总容易&#xA;&#x9;MVP: View和Model没有交互，都通过Presenter&#xA;&#x9;MVVM: ViewModel双向绑定&#xA;SOA&#xA;&#x9;实现&#xA;&#x9;&#x9;注册中心，服务者，消费者&#xA;&#x9;&#x9;ESB&#xA;&#x9;&#x9;&#x9;作用&#xA;&#x9;&#x9;&#x9;&#x9;服务连接整合&#xA;&#x9;&#x9;&#x9;&#x9;描述服务元数据，服务注册管理&#xA;&#x9;&#x9;&#x9;&#x9;服务请求者提供者间传递数据, 并进行数据转换: 支持同步、异步&#xA;&#x9;&#x9;&#x9;&#x9;发现、路由、匹配、选择。安全支持、服务质量、可管理性、负载均衡&#xA;&#x9;&#x9;&#x9;技术&#xA;&#x9;&#x9;&#x9;&#x9;SOAP: 简单对象访问协议&#xA;&#x9;&#x9;&#x9;&#x9;WSDL: Web服务描述语言&#xA;&#x9;&#x9;&#x9;&#x9;UDDI: 统一描述、发现和集成&#xA;微服务&#xA;&#x9;分层&#xA;&#x9;&#x9;基础设施&#xA;&#x9;&#x9;平台服务&#xA;&#x9;&#x9;支撑服务&#xA;&#x9;&#x9;业务服务&#xA;&#x9;&#x9;网关层&#xA;&#x9;&#x9;接入层&#xA;质量属性&#xA;&#x9;特点&#xA;&#x9;&#x9;非功能性需求&#xA;&#x9;&#x9;不同的软件项目，关注不同的质量属性&#xA;&#x9;&#x9;质量属性之间可能 相互抑制   &#xA;&#x9;评价&#xA;&#x9;&#x9;性能:&#xA;&#x9;&#x9;&#x9;刺激源，刺激，制品，环境，响应，响应度量指标&#xA;&#x9;&#x9;&#x9;提升&#xA;&#x9;&#x9;&#x9;&#x9;资源需求&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;减少资源占用: 改进算法，减少计算开销&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;减少处理事件的数量: 控制事件到来的速率，控制采样频率&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;控制资源的使用: 限制执行时间，限制队列大小&#xA;&#x9;&#x9;&#x9;&#x9;资源管理&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;并发机制: 多核，多线程&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;增加资源&#xA;&#x9;&#x9;&#x9;&#x9;资源仲裁&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;先来先服务&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;固定优先级&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;动态优先：时限时间最早优先，轮转调度&#xA;&#x9;&#x9;可靠性：容错，健壮性&#xA;&#x9;&#x9;可用性&#xA;&#x9;&#x9;安全性&#xA;&#x9;&#x9;&#x9;提升&#xA;&#x9;&#x9;&#x9;&#x9;抵抗攻击 &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;身份验证，授权，维护数据机密性，维护数据完整性, 限制暴露，限制访问&#xA;&#x9;&#x9;&#x9;&#x9;检测攻击: 入侵检测&#xA;&#x9;&#x9;&#x9;&#x9;恢复: 恢复状态，识别攻击者&#xA;&#x9;&#x9;可修改性: 可维护性，可扩展性，结构重组，可移植性&#xA;&#x9;&#x9;&#x9;提升&#xA;&#x9;&#x9;&#x9;&#x9;局部化修改: 高内聚低耦合，预测变更，模块通用&#xA;&#x9;&#x9;&#x9;&#x9;防止连锁反应: 信息隐藏，维持现有接口，限制通信路径, 使用中介(数据、服务(桥接，工厂，代理))&#xA;&#x9;&#x9;&#x9;&#x9;推迟绑定时间: 运行时注册, 多态, 配置文件&#xA;&#x9;&#x9;功能性&#xA;&#x9;&#x9;可变性&#xA;&#x9;&#x9;互操作性&#xA;&#x9;质量场景组成部分: 可用性&#xA;&#x9;&#x9;刺激源: 故障(系统内部或外部)&#xA;&#x9;&#x9;刺激: 出错，系统崩溃&#xA;&#x9;&#x9;制品: 计算、存储、网络&#xA;&#x9;&#x9;环境: 正常，降级&#xA;&#x9;&#x9;响应&#xA;&#x9;&#x9;响应度量指标&#xA;&#x9;可用性提升&#xA;&#x9;&#x9;错误检测: 心跳, Ping/echo, 异常&#xA;&#x9;&#x9;错误恢复: 表决, 冗余, 检查点回滚, 下线, 事务&#xA;&#x9;&#x9;错误避免: 进程监控&#xA;&#x9;辅助条件&#xA;&#x9;&#x9;敏感点&#xA;&#x9;&#x9;权衡点&#xA;&#x9;&#x9;风险点&#xA;&#x9;架构评估&#xA;&#x9;&#x9;调查问卷/检查表&#xA;&#x9;&#x9;基于场景&#xA;&#x9;&#x9;&#x9;架构权衡分析法ATAM: 对质量属性做评价和折中&#xA;&#x9;&#x9;&#x9;&#x9;质量效应树&#xA;&#x9;&#x9;&#x9;&#x9;评估参与者: 评估小组，项目决策者，项目干系人&#xA;&#x9;&#x9;&#x9;&#x9;步骤&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;描述介绍阶段: 描述ATAM方法，描述业务动机，描述架构&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;调查分析阶段: 确定架构方法，生成质量属性效用树，分析架构方法&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;测试阶段: 讨论场景和对场景分级，分析架构方法&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;报告阶段: 讨论场景和对场景分级&#xA;&#x9;&#x9;&#x9;软件架构分析方法SAAM: 场景优先级分类&#xA;&#x9;&#x9;&#x9;成本收益分析方法CBAM&#xA;&#x9;&#x9;基于度量&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;系统设计&#34;&gt;&#xA;  系统设计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;分类&#xA;&#x9;体系结构设计&#xA;&#x9;数据设计&#xA;&#x9;接口设计&#xA;&#x9;过程设计&#xA;结构化设计&#xA;&#x9;概要设计: 确定结构&#xA;&#x9;&#x9;模块: SC系统结构图&#xA;&#x9;&#x9;&#x9;模块，模块间调用关系与通信，模块间层次结构&#xA;&#x9;详细设计: 实现细节&#xA;&#x9;&#x9;流程设计&#xA;&#x9;&#x9;&#x9;程序流程图&#xA;&#x9;&#x9;&#x9;IPO图: 每个模块内部流程&#xA;&#x9;&#x9;&#x9;N-S图：五种控制结构(顺序型，选择型，while循环型，until循环型，多分支选择型)&#xA;&#x9;&#x9;&#x9;问题分析图PAD: 相对N-S图可以展示递归&#xA;&#x9;&#x9;&#x9;过程设计语言PDL: 伪代码&#xA;&#x9;&#x9;&#x9;判定表, 判定树&#xA;&#x9;&#x9;面向对象设计&#xA;面向对象&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;uml&#34;&gt;&#xA;  UML&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#uml&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;4种事务&#xA;&#x9;结构: 名词&#xA;&#x9;行为: 动词&#xA;&#x9;分组: 包&#xA;&#x9;注释: 注释&#xA;视图 &#xA;&#x9;用例图&#xA;&#x9;&#x9;参与者&#xA;&#x9;&#x9;用例: 基用例，子用例&#xA;&#x9;&#x9;边界&#xA;&#x9;&#x9;关系: 包含，扩展(基用例不一定执行子用例)，泛化&#xA;&#x9;类图&#xA;&#x9;&#x9;类：实体类(名词)，控制类(执行)，边界类(用户系统交互)&#xA;&#x9;&#x9;关系&#xA;&#x9;&#x9;&#x9;依赖&#xA;&#x9;&#x9;&#x9;泛化&#xA;&#x9;&#x9;&#x9;&#x9;多态&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;参数多态&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;包含多态: 用于子类型，需要运行时类型检查&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;强制多态: 编译时强行变类型&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;过载多态: 同名在不同上下文有不同类型&#xA;&#x9;&#x9;&#x9;关联: 双向，单向，自关联，多重关联&#xA;&#x9;&#x9;&#x9;&#x9;组合，聚合&#xA;&#x9;&#x9;&#x9;实现&#xA;&#x9;对象图&#xA;&#x9;交互图&#xA;&#x9;&#x9;序列图&#xA;&#x9;&#x9;通信图/协作图: 不强调时间&#xA;&#x9;状态图&#xA;&#x9;活动图&#xA;&#x9;构件图/组件图&#xA;&#x9;&#x9;部署构件: dll&#xA;&#x9;&#x9;工作产品构件: 源代码&#xA;&#x9;&#x9;执行构件: 执行后得到的构件&#xA;&#x9;组合结构图&#xA;&#x9;部署图&#xA;&#x9;包图&#xA;分类&#xA;&#x9;静态模型: 用例图，类图，对象图，构件图，部署图&#xA;&#x9;动态模型: 状态图，活动图，顺序图，协作图&#xA;设计模式: 类模式，对象模式&#xA;&#x9;创建型&#xA;&#x9;&#x9;工厂方法(类)&#xA;&#x9;&#x9;抽象工厂&#xA;&#x9;&#x9;建造者&#xA;&#x9;&#x9;原型&#xA;&#x9;&#x9;单例模式&#xA;&#x9;&#x9;适配器&#xA;&#x9;&#x9;桥接: 抽象与实现分离&#xA;&#x9;&#x9;组合&#xA;&#x9;&#x9;装饰&#xA;&#x9;&#x9;外观&#xA;&#x9;&#x9;享元&#xA;&#x9;&#x9;代理&#xA;&#x9;&#x9;责任链&#xA;&#x9;&#x9;解释器&#xA;&#x9;&#x9;模板方法&#xA;&#x9;&#x9;命令&#xA;&#x9;&#x9;迭代器&#xA;&#x9;&#x9;中介者&#xA;&#x9;&#x9;备忘录&#xA;&#x9;&#x9;观察者/发布订阅&#xA;&#x9;&#x9;状态&#xA;&#x9;&#x9;策略&#xA;&#x9;&#x9;访问者&#xA;&#x9;结构型&#xA;&#x9;行为型&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;可靠性分析与设计&#34;&gt;&#xA;  可靠性分析与设计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%af%e9%9d%a0%e6%80%a7%e5%88%86%e6%9e%90%e4%b8%8e%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;指标&#xA;&#x9;平均无故障时间MTTF&#xA;&#x9;平均故障修改时间MTTR&#xA;&#x9;平均故障间隔时间MTBF=MTTF+MTTR&#xA;串联系统&#xA;关联系统&#xA;冗余&#xA;&#x9;结构冗余: 硬件冗余，软件冗余&#xA;&#x9;&#x9;静态冗余: 三模冗余，多模冗余&#xA;&#x9;&#x9;&#x9;奇数个，表决器&#xA;&#x9;&#x9;动态冗余: 检测到错误用备用模块替代&#xA;&#x9;&#x9;混合冗余：先静态后动态&#xA;&#x9;信息冗余: 检错码，纠错码&#xA;&#x9;时间冗余: 重复执行&#xA;&#x9;冗余附加: 冗余资源&#xA;软件容错技术&#xA;&#x9;N版本程序设计：一种静态故障屏蔽，用前向恢复的策略&#xA;&#x9;&#x9;组，版本，表决器&#xA;&#x9;恢复块方法&#xA;&#x9;&#x9;主块，备用块&#xA;&#x9;防卫式程序设计&#xA;双机容错技术&#xA;&#x9;主设备，从设备, 故障切换&#xA;&#x9;服务器两块网卡，一块对外服务，一块与另外服务器连接&#xA;&#x9;方式&#xA;&#x9;&#x9;双机热备: 从设备不工作只监控&#xA;&#x9;&#x9;双机互备: 服务不同同时工作，可互相替代&#xA;&#x9;&#x9;双机双工: 服务相同集群方式工作&#xA;集群技术&#xA;&#x9;服务器组，对外网络，心跳信号，磁盘阵列&#xA;&#x9;类型&#xA;&#x9;&#x9;高性能计算集群&#xA;&#x9;&#x9;负载均衡集群: 集中式，分布式&#xA;&#x9;&#x9;高可用性集群&#xA;高并发下的高可用技术&#xA;&#x9;CDN&#xA;&#x9;负载均衡&#xA;&#x9;&#x9;HTTP: 重定向两次请求&#xA;&#x9;&#x9;DNS: 基于地理位置返回不同IP, 但可能缓存导致访问失败&#xA;&#x9;&#x9;NAT: 速度比反向代理快, 但大文件&#xA;&#x9;&#x9;反向代理&#xA;&#x9;负载均衡算法&#xA;&#x9;&#x9;轮询法&#xA;&#x9;&#x9;&#x9;优点：简单高效，易于水平扩展&#xA;&#x9;&#x9;&#x9;缺点：木桶原理，集群性能瓶颈于性能差的服务器&#xA;&#x9;&#x9;随机法&#xA;&#x9;&#x9;源地址hash法&#xA;&#x9;&#x9;&#x9;优点: 可干预请求方向&#xA;&#x9;&#x9;&#x9;缺点: 容易负载不均衡&#xA;&#x9;&#x9;加权轮询法&#xA;&#x9;&#x9;加权随机法&#xA;&#x9;&#x9;键值范围法&#xA;&#x9;&#x9;&#x9;优点：水平扩展容易&#xA;&#x9;&#x9;&#x9;缺点：容易负载不均衡&#xA;&#x9;&#x9;动态负载均衡&#xA;&#x9;&#x9;&#x9;最小连接数法&#xA;&#x9;&#x9;&#x9;&#x9;优点：根据节点状况实时变化 &#xA;&#x9;&#x9;&#x9;&#x9;缺点：提高了复杂度&#xA;&#x9;&#x9;&#x9;最快响应速度法&#xA;&#x9;&#x9;&#x9;观察模式法&#xA;性能评价指标&#xA;&#x9;计算机&#xA;&#x9;&#x9;主频/时钟频率&#xA;&#x9;&#x9;&#x9;外频*倍频&#xA;&#x9;&#x9;&#x9;主频的倒数: 脉冲/CPU时钟周期&#xA;&#x9;&#x9;机器周期: 若干时钟周期&#xA;&#x9;&#x9;指令周期：若干机器周期&#xA;&#x9;&#x9;CPI: 指令平均时钟周期&#xA;&#x9;&#x9;MIPS: 每秒百万条指令平均执行速度, 主频/CPI&#xA;&#x9;&#x9;阿姆达尔解决方案&#xA;&#x9;网络&#xA;&#x9;操作系统&#xA;&#x9;数据库管理系统&#xA;&#x9;Web服务器&#xA;性能评估方法&#xA;&#x9;时钟频率法&#xA;&#x9;指令执行速度法MIPS&#xA;&#x9;等效指令速度法&#xA;&#x9;数据处理速率法PDR&#xA;&#x9;综合理论性能法&#xA;&#x9;基准程序法&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;软件测试&#34;&gt;&#xA;  软件测试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bd%af%e4%bb%b6%e6%b5%8b%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;测试目的：发现错误&#xA;测试类型&#xA;&#x9;动态&#xA;&#x9;&#x9;黑盒&#xA;&#x9;&#x9;&#x9;等价类划分: 等价的数据合并&#xA;&#x9;&#x9;&#x9;边值分析&#xA;&#x9;&#x9;&#x9;错误猜测&#xA;&#x9;&#x9;&#x9;因果图&#xA;&#x9;&#x9;&#x9;功能图&#xA;&#x9;&#x9;白盒&#xA;&#x9;&#x9;&#x9;基本路径&#xA;&#x9;&#x9;&#x9;循环覆盖&#xA;&#x9;&#x9;&#x9;&#x9;单循环，嵌套循环&#xA;&#x9;&#x9;&#x9;逻辑覆盖&#xA;&#x9;&#x9;&#x9;&#x9;语句覆盖，判定覆盖，条件覆盖，判定/条件覆盖，条件组合覆盖，点覆盖，边覆盖，路径覆盖&#xA;&#x9;&#x9;灰盒: 表征性现象，判断内部运行状态&#xA;&#x9;静态&#xA;&#x9;&#x9;桌前检查&#xA;&#x9;&#x9;代码审查&#xA;&#x9;&#x9;代码走查&#xA;测试阶段&#xA;&#x9;单元测试&#xA;&#x9;集成/组装/联合测试&#xA;&#x9;&#x9;概要设计阶段计划&#xA;&#x9;&#x9;自顶向下，自底向上，混合/三明治&#xA;&#x9;&#x9;冒烟/版本验证/提交测试&#xA;&#x9;确认测试&#xA;&#x9;&#x9;有效性测试, 需求分析阶段计划&#xA;&#x9;&#x9;类型：内部确认测试，Alpha测试，Beta测试，验收测试&#xA;&#x9;系统测试&#xA;&#x9;&#x9;软件，硬件，网络，外部支持硬件、软件、数据等系统元素结合&#xA;&#x9;&#x9;系统分析阶段(需求分析阶段)完成计划&#xA;&#x9;&#x9;包括：功能测试，健壮性测试，性能测试, 用户界面测试，安全性测试，安装与反安装测试&#xA;&#x9;&#x9;回归测试&#xA;性能测试&#xA;&#x9;目的&#xA;&#x9;&#x9;评估系统的能力，识别体系中的弱点，系统调优，检测软件中的问题，验证稳定性和可靠性&#xA;&#x9;分类&#xA;&#x9;&#x9;负载压力测试：超负荷情况&#xA;&#x9;&#x9;强度测试: 资源低的情况下运行情况&#xA;&#x9;&#x9;容量测试: 同时在线的最大用户数&#xA;&#x9;指标: 客户端，网络，服务器&#xA;第三方测试&#xA;面向对象测试&#xA;&#x9;层次&#xA;&#x9;&#x9;算法层&#xA;&#x9;&#x9;类层&#xA;&#x9;&#x9;模板层&#xA;&#x9;&#x9;系统层&#xA;&#x9;方案&#xA;&#x9;&#x9;逻辑覆盖&#xA;&#x9;&#x9;等价划分&#xA;&#x9;&#x9;边界值分析&#xA;&#x9;&#x9;错误推测&#xA;软件维护&#xA;&#x9;软件生命周期&#xA;&#x9;&#x9;规划&#xA;&#x9;&#x9;开发: 分析，设计，实施，验收&#xA;&#x9;&#x9;运维&#xA;&#x9;&#x9;解散/升级&#xA;&#x9;类型&#xA;&#x9;&#x9;改正性维护&#xA;&#x9;&#x9;适应性维护&#xA;&#x9;&#x9;完善性维护&#xA;&#x9;&#x9;预防性维护&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;安全性保密性设计&#34;&gt;&#xA;  安全性保密性设计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%89%e5%85%a8%e6%80%a7%e4%bf%9d%e5%af%86%e6%80%a7%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;安全防范体系层次&#xA;&#x9;物理层&#xA;&#x9;系统层&#xA;&#x9;网络层&#xA;&#x9;应用层&#xA;&#x9;安全管理&#xA;数据加密&#xA;&#x9;对称加密: 分组密码，序列密码&#xA;&#x9;&#x9;DES: 分组密码, 3DES&#xA;&#x9;&#x9;IDEA: 明文密文64，密钥128&#xA;&#x9;非对称加密&#xA;&#x9;&#x9;RSA, 公私钥&#xA;&#x9;认证技术&#xA;&#x9;&#x9;确保发送者接收者的真实性，报文的完整性&#xA;&#x9;&#x9;数字签名&#xA;&#x9;&#x9;&#x9;非对称加密&#xA;&#x9;&#x9;&#x9;杂凑算法: 摘要(MD5), 安全散列算法(SHA)&#xA;&#x9;&#x9;&#x9;数字证书: X.509&#xA;&#x9;&#x9;&#x9;身份认证: 口令，动态口令，生物特征&#xA;&#x9;密钥管理体制&#xA;&#x9;&#x9;KMI密钥管理基础设施 &#xA;&#x9;&#x9;&#x9;适用于&#xA;&#x9;&#x9;&#x9;&#x9;开放网的PKI(公钥基础设施)&#xA;&#x9;&#x9;&#x9;&#x9;规模化专用网的SPK(种子化公钥)&#xA;&#x9;通信与网络安全&#xA;&#x9;&#x9;防火墙&#xA;&#x9;&#x9;&#x9;功能类型：包过滤型，电路级网关型，应用网关型，代理服务型，状态检测型，自适应代理型&#xA;&#x9;&#x9;&#x9;实现模式：宿主机模式，屏蔽主机模式，屏蔽子网模式&#xA;&#x9;&#x9;安全协议&#xA;&#x9;&#x9;&#x9;SSL&#xA;&#x9;&#x9;&#x9;HTTPS&#xA;&#x9;&#x9;&#x9;PGP: 邮件加密&#xA;&#x9;&#x9;&#x9;IPSec: 防止Sniffer、数据篡改、身份欺骗等应用层攻击、中间人攻击、拒绝服务攻击&#xA;&#x9;&#x9;入侵检测与入侵防护IDS&#xA;&#x9;&#x9;&#x9;基于数据源分类：基于主机的IDS, 基于网络的IDS&#xA;&#x9;&#x9;&#x9;基于检测方法：异常检测，误用检测&#xA;&#x9;&#x9;入侵防护系统IPS&#xA;&#x9;&#x9;访问控制&#xA;&#x9;&#x9;&#x9;自主访问控制DAC：ACL, 不能组上间接访问&#xA;&#x9;&#x9;&#x9;强制访问控制MAC &#xA;&#x9;&#x9;&#x9;基于角色的访问控制RBAC&#xA;&#x9;&#x9;&#x9;基于任务的访问控制TBAC&#xA;&#x9;&#x9;&#x9;基于对象的访问控制OBAC&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;中间件&#34;&gt;&#xA;  中间件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ad%e9%97%b4%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;功能&#xA;&#x9;客户机和之间的连接和通信&#xA;&#x9;提供应用层不同服务之间的互操作机制, 以及应用层与数据库之间的连接和控制机制&#xA;&#x9;提供多层架构的应用开发和运行平台，以及应用开发框架&#xA;&#x9;屏蔽硬件、操作系统、网络和数据库的差异&#xA;&#x9;负载均衡, 高可用&#xA;&#x9;通用的服务，避免重复工作&#xA;类型&#xA;&#x9;通信处理(消息)&#xA;&#x9;事务处理(交易)&#xA;&#x9;数据存取管理&#xA;&#x9;Web服务器&#xA;&#x9;安全&#xA;&#x9;跨平台和架构&#xA;&#x9;专用平台&#xA;&#x9;网络&#xA;应用服务器&#xA;&#x9;J2EE: 建立标准，控制构件生命周期&#xA;&#x9;&#x9;构件: 应用客户端、EJB、Servlets和JSP、Applet&#xA;&#x9;&#x9;构成：容器，组件，服务&#xA;&#x9;&#x9;分层&#xA;&#x9;&#x9;&#x9;表示层&#xA;&#x9;&#x9;&#x9;业务逻辑层(中间层、领域层)&#xA;&#x9;&#x9;&#x9;&#x9;实体Bean: 表映射到对象&#xA;&#x9;&#x9;&#x9;&#x9;会话Bean: 与客户端交互&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;有状态，无状态&#xA;&#x9;&#x9;&#x9;&#x9;消息驱动Bean&#xA;&#x9;&#x9;&#x9;数据访问层&#xA;&#x9;.NET&#xA;&#x9;&#x9;分层&#xA;&#x9;&#x9;&#x9;通用语言运行时CLR: 受控代码&#xA;&#x9;&#x9;&#x9;基础类库&#xA;&#x9;&#x9;&#x9;ADO.NET: XML支持, 数据缓冲区&#xA;&#x9;&#x9;&#x9;ASP.NET&#xA;&#x9;&#x9;&#x9;通用语言规范&#xA;企业应用集成EAI&#xA;&#x9;分类&#xA;&#x9;&#x9;应用集成&#xA;&#x9;&#x9;业务过程集成&#xA;&#x9;&#x9;数据集成: 单一数据库&#xA;&#x9;Java企业应用框架&#xA;&#x9;&#x9;MVC&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;进阶知识&#34;&gt;&#xA;  进阶知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%9b%e9%98%b6%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;信息系统基础&#34;&gt;&#xA;  信息系统基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bf%a1%e6%81%af%e7%b3%bb%e7%bb%9f%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;控制论：维纳&#xA;信息论：香农&#xA;认识论: 主观角度&#xA;质量属性：精确性，完整性，可靠性，及时性，经济性，可验证性，安全性&#xA;信息化&#xA;&#x9;层次：产品，企业，产业，国民经济，社会生活&#xA;&#x9;主体：全体社会成员&#xA;&#x9;空域：政治、经济、文化、军事、社会生活一切领域&#xA;&#x9;时域: 长期的过程&#xA;&#x9;资源是核心，信息技术应用是龙头，信息网络是基础，信息技术和产业是国家信息化建设基础，人才是关键，政策法规和标准规范是保障&#xA;战略纲要&#xA;&#x9;2017-2020：网信先行&#xA;&#x9;2025: 技术先进，产业发达，应用领先，网络安全&#xA;&#x9;21世纪中叶：网络强国，引领全球信息化发展&#xA;两化融合: 信息化和工业化&#xA;电子政务:&#xA;&#x9;G2G: 政府对政府&#xA;&#x9;G2B: 政府对企业&#xA;&#x9;G2C: 政府对公民&#xA;&#x9;G2E: 政府对公务员&#xA;电子商务&#xA;&#x9;发展&#xA;&#x9;&#x9;原始电子商务&#xA;&#x9;&#x9;现代电子商务：使用了EDI(电子数据交换)&#xA;&#x9;结构&#xA;&#x9;&#x9;网络&#xA;&#x9;&#x9;网络基础设施&#xA;&#x9;&#x9;多媒体内容和网络出版的基础设施&#xA;&#x9;&#x9;FAX, E-mail, EDI, HTTP&#xA;&#x9;&#x9;报文和信息传播的基础设施&#xA;&#x9;&#x9;目录服务、安全、认证、电子付款&#xA;&#x9;&#x9;商业服务的基础设施&#xA;&#x9;&#x9;电子商务应用&#xA;&#x9;类型&#xA;&#x9;&#x9;网络划分&#xA;&#x9;&#x9;&#x9;EDI(电子数据交换)商务&#xA;&#x9;&#x9;&#x9;Internet(互联网)商务&#xA;&#x9;&#x9;&#x9;Intranet(企业内部网)商务&#xA;&#x9;&#x9;&#x9;Extranet(企业外部网)商务&#xA;&#x9;&#x9;交易内容划分&#xA;&#x9;&#x9;&#x9;直接电子商务&#xA;&#x9;&#x9;&#x9;&#x9;无形商品&#xA;&#x9;&#x9;&#x9;&#x9;各种服务&#xA;&#x9;&#x9;&#x9;间接电子商务&#xA;&#x9;&#x9;&#x9;&#x9;有形商品&#xA;&#x9;&#x9;&#x9;&#x9;相关服务&#xA;&#x9;&#x9;交易对象规划&#xA;&#x9;&#x9;&#x9;O2O: 线上购买线下&#xA;&#x9;&#x9;&#x9;C2C: 淘宝&#xA;&#x9;&#x9;&#x9;B2C: 京东&#xA;&#x9;&#x9;&#x9;B2B&#xA;&#x9;&#x9;&#x9;&#x9;阶段: 电子数据交换(EDI), 基本的电子商务，电子交易集市，协同商务&#xA;&#x9;基本原则&#xA;&#x9;&#x9;企业主体，政府推动。统筹兼顾，虚实结合。着力创新，注重实效。规范发展，保障安全。&#xA;&#x9;支撑保障体系&#xA;企业信息化 &#xA;&#x9;大吃小变为快吃慢&#xA;&#x9;原则: 效益原则、一把手原则、中长期与短期建设相结合原则、规范化和标准化原则，以人为本原则&#xA;&#x9;&amp;quot;两网一站四库十二金&amp;quot;工程&#xA;&#x9;&#x9;政务内网(物理隔离)，政务外网(逻辑隔离)&#xA;&#x9;&#x9;中华人民共和国政府网站&#xA;&#x9;&#x9;基础信息库：人口库，法人库，资源地理，宏观经济&#xA;&#x9;&#x9;办公业务资源系统，宏观经济管理系统，金税，金审，金财，金融监管，金关，金盾，金保，金农，金水，金质&#xA;信息系统&#xA;&#x9;集成&#xA;&#x9;生命周期&#xA;&#x9;&#x9;立项&#xA;&#x9;&#x9;开发: 分析、设计、实施、验收&#xA;&#x9;&#x9;运维: 纠错性维护，适应性维护，预防性维护，完善性维护&#xA;&#x9;&#x9;消亡&#xA;IT服务管理ITSM&#xA;&#x9;低成本高质量，以服务为中心, 以客户为中心提供服务, 可准确计价&#xA;&#x9;原理：“二次转换”&#xA;&#x9;&#x9;梳理: 技术管理转化为流程管理&#xA;&#x9;&#x9;打包: 流程管理转化为服务管理&#xA;&#x9;服务级别管理SLA&#xA;&#x9;事件管理，问题管理&#xA;&#x9;监理：四控三管一协调&#xA;&#x9;&#x9;质量控制、进度控制、投资控制、变更控制&#xA;&#x9;&#x9;安全管理、合同管理、信息管理&#xA;&#x9;&#x9;项目组织协调&#xA;IT服务构成ITSS&#xA;&#x9;四要素PPTR&#xA;&#x9;&#x9;人员&#xA;&#x9;&#x9;过程&#xA;&#x9;&#x9;技术&#xA;&#x9;&#x9;资源&#xA;软件工程&#xA;&#x9;需求分析与定义&#xA;&#x9;&#x9;需求必须可以被验证&#xA;&#x9;&#x9;目标：检测和解决需求之间的冲突，发现系统的边界，详细描述系统需求&#xA;&#x9;软件设计&#xA;&#x9;软件测试&#xA;&#x9;配置管理&#xA;&#x9;&#x9;权限：Read, Check, Add, Destroy&#xA;&#x9;过程管理: 项目启动和范围定义，项目规划，项目实施、项目监控与评审、项目收发与关闭&#xA;&#x9;软件开发工具&#xA;&#x9;软件复用&#xA;&#x9;面向对象系统分析与设计&#xA;&#x9;&#x9;对象：标识、状态、行为&#xA;&#x9;UML&#xA;&#x9;&#x9;5种视图: 用例视图，逻辑视图，实现视图，过程视图，部署视图&#xA;应用集成技术&#xA;&#x9;数据仓库: 面向主题，集成的，相对稳定的，反映历史变化的&#xA;&#x9;WebService&#xA;&#x9;&#x9;不适合场景: 单机应用，局域网应用&#xA;&#x9;&#x9;适合场景: 跨防火墙，应用程序集成，B2B集成，软件重用&#xA;&#x9;软件中间件&#xA;&#x9;&#x9;数据库访问: ODBC, JDBC&#xA;&#x9;&#x9;远程过程调用RPC&#xA;&#x9;&#x9;面向消息中间件MOM: IBM的MQSeries&#xA;&#x9;&#x9;分布式对象中间件: OMG的CORBA, Java的RMI/EJB, Microsoft的DCOM&#xA;&#x9;&#x9;事务中间件: IBM/BEA的Tuxedo, JavaEE的EJB&#xA;网络技术&#xA;&#x9;OSI七层协议&#xA;&#x9;TCP/IP体系的四层协议：网络接口层，网际层，传输层，应用层&#xA;&#x9;网络分类&#xA;&#x9;&#x9;地理分类：局域网，城域网，广域网&#xA;&#x9;&#x9;链路传输控制技术：以太网(总线争用)，令牌网，FDDI网，ATM网(异步传输模式), 帧中继网，ISDN(综合业务数据网)&#xA;&#x9;&#x9;拓扑结构：总线型，星型，树型，环型，网状&#xA;&#x9;数据交换：电路交换，分组交换，ATM交换，全光交换，标记交换&#xA;&#x9;接入：光纤，同轴电缆，铜线，无线&#xA;&#x9;无线网络：无线个域网，无线局域网，无线城域网，蜂窝移动通信网&#xA;&#x9;存储技术&#xA;&#x9;&#x9;与个人计算机差异：多用户多任务&#xA;&#x9;&#x9;技术：DAS, NAS, SAN&#xA;&#x9;机房&#xA;&#x9;&#x9;综合布线系统&#xA;&#x9;&#x9;&#x9;6个子系统&#xA;&#x9;&#x9;分区: 主机区，存储器区，数据输入区，数据输出区，通信区，监控调度区&#xA;&#x9;&#x9;供电：双回路供电，三相五线制&#xA;&#x9;&#x9;接地方式: 交流工作接地，安全工作接地，直流工作接地，防雷接地&#xA;&#x9;&#x9;温湿度&#xA;&#x9;&#x9;&#x9;开机: &#xA;&#x9;&#x9;&#x9;&#x9;A级机房&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;温度: 夏季23度, 冬季20度&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;湿度: 45%-65%&#xA;&#x9;&#x9;&#x9;停机    &#xA;&#x9;RJ45接头需求量：m = nx4 + nx4x15%, m为总需求量，n为信息点总量，nx4x15%为富余量&#xA;&#x9;信息模块需求量：m = n + nx3%, m为总需求量，n为信息点总量，nx3%为富余量&#xA;&#x9;曲率半径&#xA;&#x9;&#x9;光缆30cm, 同轴粗电缆30cm, 同轴细电缆20cm&#xA;&#x9;暗敷管路&#xA;&#x9;&#x9;应直线为主&#xA;&#x9;&#x9;弯曲时曲率半径不小于管外径的6倍(暗管外径大于50mm，不小于10倍)&#xA;&#x9;&#x9;转弯夹角不小于90度，不应有两个以上弯曲(应设在弯管段落两端，长度不超过15m, 段落内不应有S形弯或U形弯)&#xA;&#x9;&#x9;段长超过20m，应装接头箱(接头盒或过渡盒)&#xA;&#x9;规划、设计和实施&#xA;&#x9;&#x9;局域网主要是交换以太网&#xA;&#x9;&#x9;拓扑结构考虑主要因素: 地理环境，传输介质，传输距离，可靠性&#xA;&#x9;&#x9;汇聚层是否存在，取决于网络规模的大小&#xA;&#x9;&#x9;网络通信设备选型：核心交换机选型，汇聚层/接入层交换机选型，远程接入与访问设备选型&#xA;&#x9;安全&#xA;&#x9;&#x9;要素: 机密性，完整性，可用性，可控性，可审查性&#xA;&#x9;&#x9;工作：制定安全策略，用户验证，加密，访问控制，审计，管理&#xA;&#x9;&#x9;典型网络攻击步骤：信息收集，试探寻找突破口，实施攻击，消防记录，保留访问权限&#xA;&#x9;&#x9;安全的5个等级：用户自主保护级，系统审计保护级, 安全标记保护级, 结构化保护级，访问验证保护级&#xA;&#x9;&#x9;基本属性：完整性，可用性，保密性，可控性，可靠性&#xA;&#x9;&#x9;活动: 定义策略，定义范围，风险评估，确定管理目标和管理措施，准备适用性申明&#xA;&#x9;&#x9;等级保护(破坏后): 定级，备案，安全建设整改，等级评测，安全检查&#xA;&#x9;&#x9;风险保护：秘密，机密，绝密&#xA;大数据&#xA;&#x9;特点5V: Volume(大量), Velocity(高速), Variety(多样), Value(价值), Veracity(真实性)&#xA;&#x9;5个环节: 数据准备，存储，计算，分析，知识展现&#xA;&#x9;关键技术: HDFS, HBase, MapReduce, Chukwa&#xA;云计算&#xA;&#x9;分层&#xA;&#x9;&#x9;设施层：供电，制冷，布线&#xA;&#x9;&#x9;资源层&#xA;&#x9;&#x9;&#x9;物理资源：服务器，存储设备，网络，数据库&#xA;&#x9;&#x9;&#x9;虚拟资源：虚拟主机，虚拟块/对象存储，虚拟网络&#xA;&#x9;&#x9;资源控制层&#xA;&#x9;&#x9;&#x9;分布式资源调度: 分布式算法，控制锁机制，消息队列&#xA;&#x9;&#x9;&#x9;资源管理: 虚拟机管理，分布式文件系统，分布式数据库&#xA;&#x9;&#x9;服务层&#xA;&#x9;&#x9;&#x9;IaaS: VDC, VDL&#xA;&#x9;&#x9;&#x9;PaaS: 开发环境，运行环境&#xA;&#x9;&#x9;&#x9;SaaS: CRM, OA&#xA;物联网&#xA;&#x9;分层&#xA;&#x9;&#x9;感知层: 物物之间信息传输&#xA;&#x9;&#x9;网络层: 标准化程序最高&#xA;&#x9;&#x9;应用层&#xA;&#x9;关键技术&#xA;&#x9;&#x9;感知层为关键&#xA;&#x9;&#x9;&#x9;产品和传感器(条码、RFID，传感器)自动化识别技术&#xA;&#x9;&#x9;&#x9;无线传输技术(WLAN, Bluetooth, ZigBee, UWB)&#xA;&#x9;&#x9;&#x9;自组织组网技术&#xA;&#x9;&#x9;&#x9;中间件技术&#xA;移动互联网: 移动通信网络+互联网内容和应用&#xA;&#x9;特征：接入移动性，时间碎片性，生活相关性，终端多样性&#xA;&#x9;关键技术: SOA Web2.0, HTML5, Android, iOS, Windows Phone&#xA;首席信息官CIO(IT行业可合并到CTO)&#xA;&#x9;业务专家，IT专家，管理专家&#xA;&#x9;职责&#xA;&#x9;&#x9;提供信息帮助企业决策&#xA;&#x9;&#x9;帮助企业制定中长期发展战略&#xA;&#x9;&#x9;有效管理IT部门&#xA;&#x9;&#x9;制定信息系统 发展规划&#xA;&#x9;&#x9;建立积极的IT文化&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;##　项目管理&#xA;组成：项目开发计划，范围管理，进度管理，成本管理，软件配置管理，质量管理，人力资源管理，风险管理，信息文档管理&#xA;制约因素: 范围，进度，成本，质量&#xA;本质：认识本质，找出规律，有效管理&#xA;生命周期: 概念阶段，开发阶段，实施阶段，结束阶段&#xA;目标：成果性目标，约束性目标&#xA;开发计划&#xA;作用：展望未来，实施依据，确定团队成员和责任范围，促进团队交流，明确奋斗目标&#xA;内容：工作计划，人员组织计划，设备采购和资源供应计划，配置管理计划，进度计划，成本计划，质量计划，风险计划，文档计划，支持计划&#xA;监控：&#xA;设置里程碑&#xA;正规和非正规&#xA;事前控制，事中控制，事后控制&#xA;直接控制，间接控制&#xA;编制:&#xA;指南：引言，项目概述，实施计划，支持条件，专题计划要点&#xA;过程：逐渐求精&#xA;范围管理&#xA;产品范围(产品需求)，工作范围(工作计划)&#xA;范围管理计划4W1H&#xA;需求管理&#xA;收集需求&#xA;挖掘真实需求：显性利益，关系维护和交往，情感感受和信任&#xA;需求跟踪矩阵&#xA;从来源连接到可交付成果&#xA;用于验收&#xA;需求文件描述单一需求如何满足，用于生成范围说明书&#xA;范围说明书&#xA;工作分解结构WBS&#xA;词典&#xA;结果&#xA;范围确认：确认可交付成果&#xA;范围控制&#xA;范围变更的压力&#xA;范围蔓延&#xA;进度管理&#xA;内容&#xA;1谋: 规划进度管理&#xA;4备:&#xA;备定义出清单: 活动清单，里程碑清单&#xA;备排序出路线: 排列活动顺序&#xA;备资源出参数: 项目资源管理-估算活动资源&#xA;备历时出长短: 活动持续时间&#xA;2反复:&#xA;反复进行进度计划编制更新&#xA;反复进行进度控制与优化&#xA;进度管理计划&#xA;活动定义&#xA;活动清单&#xA;里程碑清单&#xA;活动排序&#xA;提前量滞后量&#xA;四种依赖关系&#xA;强制性依赖: 工作中固有的依赖&#xA;选择性依赖: 经验和编好定义，无必然规律&#xA;外部依赖: 项目组与项目组外&#xA;内部依赖: 项目活动之间&#xA;活动时间估算&#xA;三点估算PERT&#xA;进度计划&#xA;总时差&#xA;自由时差&#xA;浮动时间&#xA;关键路线&#xA;赶工(时间压缩)，快速跟进(改逻辑关系为并行)&#xA;资源平衡&#xA;资源平滑&#xA;进度控制&#xA;成本管理&#xA;包含：规划成本管理, 成本估算，制定预算，成本控制&#xA;概念&#xA;储备：应急储备(已知的未知, 估算阶段)，管理储备(无知, 预算阶段)&#xA;学习曲线&#xA;质量成本&#xA;成本估算&#xA;类比估算(自上而下)&#xA;自下而上&#xA;参数估算&#xA;成本预算&#xA;项目总预算 = 成本基线BAC(基础成本 + 应急储备金) + 管理储备&#xA;成本控制&#xA;挣值&#xA;实际成本(AC)，计划值(PV)，挣值(EV)&#xA;进度绩效, 成本绩效&#xA;配置管理&#xA;CMMI: 9部分&#xA;配置标识&#xA;确定配置项: 配置项命名，配置项描述&#xA;基线(里程碑): 功能基线，指派基线，产品基线; 发行基线，构造基线&#xA;建立配置管理系统&#xA;配置库：开发库，受控库，产品库&#xA;变更控制&#xA;变更控制系统&#xA;变更控制委员会CCB&#xA;变更控制流程&#xA;利用配置库实现变更控制&#xA;版本控制&#xA;配置审核&#xA;配置状态报告&#xA;质量管理&#xA;基础&#xA;核心概念&#xA;客户发现缺陷：代价最大&#xA;趋势和新兴实践&#xA;客户满意，持续改进，管理层责任，与供应商互利合作&#xA;概述&#xA;遵从组织质量体系QS&#xA;制定质量计划QP&#xA;实施质量管理QM, 包含QA&#xA;落实质量控制QC&#xA;坚持持续改进QI&#xA;ISO9000质量管理体系: 关注程序的高质量&#xA;八项原则&#xA;规划质量管理&#xA;质量管理体系&#xA;质量成本&#xA;一致性成本: 预防成本，评估成本&#xA;不一致性成本: 内部失败成本，外部失败成本&#xA;管理质量&#xA;质量报告&#xA;亲和图，因果图，流程图，直方图，帕累托图，矩阵图，散点图&#xA;控制质量&#xA;控制图&#xA;人力资源管理&#xA;规划资源管理&#xA;组织结构图和职位描述&#xA;责任分配矩阵RAM&#xA;估算活动资源&#xA;获取资源&#xA;资源日历&#xA;建设团队&#xA;一般成长规律BruceTuckmans模型：形成，震荡，规范，成熟，解散&#xA;权力类型：正式，惩罚，奖励，专家，参考&#xA;激励理论&#xA;马斯洛,需求层次5个：生理，安全，社会需求，尊重，自我实现&#xA;海兹伯格，激励理论：保健因素，激励因素&#xA;麦克格利格, X理论，Y理论&#xA;期望理论&#xA;Z理论&#xA;成就动机理论&#xA;冲突管理&#xA;管理学原理&#xA;彼得原理: 组织中每个人都可能朝不适合他的岗位发展&#xA;光环效应：一个人某方面好，往往被认为其他方面也好&#xA;墨菲定律&#xA;帕金森定律：无论给多少时间，事情总是要拖到最后一刻才能完成&#xA;布鲁克斯定律：为一个延误的项目增加人员，将导致更多的延误&#xA;手表定律：有两块手表且走时不相同, 就不知道时间了&#xA;KISS法则&#xA;黄金法则：你期望别人怎样对待你，你也要怎样对待别人&#xA;控制资源&#xA;风险管理&#xA;已知风险，未知风险&#xA;已知的已知风险：直接成本&#xA;已知的未知风险：应急储备&#xA;未知的未知风险：管理储备&#xA;概念&#xA;风险责任人，次生风险，残余风险，弹回计划，权变措施，风险承受力，风险临界值&#xA;概述&#xA;规则风险管理&#xA;识别风险: 风险登记册&#xA;实施定性风险分析: 优先级排序, 风险登记册&#xA;实施定量风险分析: 敏感性分析，龙卷风图，决策树分析，蒙特卡罗技术&#xA;规划风险应对&#xA;实施风险应对&#xA;监督风险&#xA;文档管理&#xA;质量等级&#xA;1级文档：最底限度文档&#xA;2级文档：内部文档&#xA;3级文档：工作文档&#xA;4级文档：正式文档&#xA;文档标准: 开发文档，产品文档，管理文档&#xA;测试报告&#xA;技术报告&#xA;开发总结报告&#xA;项目管理网络图&#xA;单代号网络图(工作在节点上)&#xA;双代号网络图(工作在线上)&#xA;关键路线&#xA;紧前工作, 紧后工作，虚工作&#xA;时标网络图&#xA;计算&#xA;最早开始，最迟开始，最早结束，最迟结束&#xA;总时差：不影响总工期, ls-es, lf-ef&#xA;自由时差: 不影响紧后工作, es-ef&#xA;施工&#xA;依次施工, 平行施工, 流水施工&#xA;压缩&#xA;有充足备用资源的工作&#xA;对质量和安全影响不大的工作&#xA;所需增加成本最少的工作&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
