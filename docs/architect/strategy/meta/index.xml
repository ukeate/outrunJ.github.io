<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IoT on outrun的笔记</title>
    <link>https://runout.run/docs/architect/strategy/meta/</link>
    <description>Recent content in IoT on outrun的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 11 Nov 2022 15:49:15 +0800</lastBuildDate>
    <atom:link href="https://runout.run/docs/architect/strategy/meta/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>媒体</title>
      <link>https://runout.run/docs/architect/strategy/meta/media/</link>
      <pubDate>Wed, 10 Oct 2018 15:13:01 +0800</pubDate>
      <guid>https://runout.run/docs/architect/strategy/meta/media/</guid>
      <description>&lt;h1 id=&#34;原理&#34;&gt;&#xA;  原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;硬件&#34;&gt;&#xA;  硬件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%a1%ac%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;CRT cathode ray tube 阴极射线管显示器&#xA;    随机扫描方式&#xA;    光栅扫描方式&#xA;    DPU distributed processing unit 分散处理单元&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;标准&#34;&gt;&#xA;  标准&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%87%e5%87%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;Core Graphics System&#xA;    CGI(computer graphics interface)&#xA;        # 与设备无关的方法，方便的直接控制图形设备&#xA;    CGM(computer graphics metafile)&#xA;        # 设备无关的主义定义图形文件格式&#xA;    GKS(graphics kernal system)&#xA;        # 应用程序与图形输入输出设备之间的功能接口&#xA;    PHIGS(programmer&#39;s hierarchical interactive graphics system)&#xA;        # 为3d设计的工具库&#xA;    GL(graphics library)&#xA;        # 广泛应用的标准图形程序库&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;算法&#34;&gt;&#xA;  算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;基元的显示&#xA;    直线扫描转换&#xA;        DDA&#xA;        中点画线法&#xA;        Bresenham画线&#xA;    圆的扫描转换&#xA;        中点画圆&#xA;        Bresenham&#xA;    区域填充&#xA;        种子填充&#xA;        多边形扫描转换&#xA;图形变换&#xA;    二维图形变换&#xA;    二维视见变换&#xA;    三维图形变换&#xA;    投影&#xA;        平行正交&#xA;        平行斜交&#xA;        透视投影&#xA;    裁剪&#xA;        直线段裁剪算法&#xA;            Cohen-Sutherland算法&#xA;            中点分割算法&#xA;            梁友栋-Barsky算法&#xA;        多边形裁剪Sutherland-Hodgman算法&#xA;        三维图形裁剪&#xA;            梁友栋-Barsky算法&#xA;曲线和曲面&#xA;    概念&#xA;        插值&#xA;        逼近&#xA;        参数连续性&#xA;        几何连续性&#xA;        光顺(smoothness)&#xA;    Hermite插值曲线多项式 Coons曲面&#xA;    Bezier曲线和曲面&#xA;    B样条曲线和曲面&#xA;图形运算&#xA;    交点计算&#xA;    多边形表面交线计算&#xA;    平面中的凸壳算法&#xA;        Graham扫描&#xA;        Jarvis行进&#xA;    包含与重叠&#xA;        凸多边形&#xA;    多边形的三角剖分&#xA;形体的表示&#xA;    概念&#xA;        图形信息&#xA;            几何信息&#xA;            拓扑信息&#xA;        非图形信息&#xA;            颜色&#xA;            亮度&#xA;            质量&#xA;            体积&#xA;    二维&#xA;        边界&#xA;            拆线逼近曲线&#xA;                选点&#xA;                    共线性&#xA;                    三点转角阈值&#xA;                带树法&#xA;        图形的四叉树表示法&#xA;    三维&#xA;        几何元素&#xA;            点&#xA;            边&#xA;            环(有序有向边)&#xA;            面&#xA;            体&#xA;            体素&#xA;                一组单元实体: 长方体、圆柱体、圆锥体、球体&#xA;                扫描体&#xA;                代数半空间定义的形体&#xA;        线框图&#xA;            顶点表、边表、面表&#xA;            边界表示法&#xA;        实体&#xA;            CSG(constructive solid geometry), 指任意复杂形体都可用的体素组合&#xA;            特征表示&#xA;            Brep表示&#xA;        八叉树(四叉树的推广)&#xA;    分形&#xA;        规则分形&#xA;            # 严格自相似性的分形&#xA;        Von Koch算法&#xA;        Julia集和Mandelbrot集&#xA;消除隐藏线和隐藏面&#xA;    线面比较法消除隐藏线&#xA;    浮动水平线消除曲面隐藏线&#xA;    深度排序算法(优先级算法)&#xA;        画家算法(深度优先级表法)&#xA;        z一缓冲算法(深度缓冲算法)&#xA;    扫描线算法消除隐藏面&#xA;    区域分割算法消除隐藏面&#xA;    BSP(binary space partitioning)树算法判别物体可见性&#xA;    八叉树算法消除隐藏面&#xA;    光线投射算法找到可见面&#xA;        # 对包含曲面(特别球面的场景效率高)&#xA;真实感&#xA;    漫反射及光源照明&#xA;        照明效应&#xA;            漫射照明&#xA;            具体光源照明的照射效应、透射效应&#xA;                漫反射、镜面反射&#xA;        环境光&#xA;        漫反射&#xA;        镜面反射与Phong模型&#xA;        光的衰减&#xA;    多边形网的明暗处理&#xA;        常数明暗法&#xA;        亮度插值明暗法(Gouraund着色)&#xA;        法向量插值明暗法(Phong着色)&#xA;    阴影&#xA;    纹理(texture)&#xA;    整体光&#xA;        透射光亮度模拟&#xA;        Whitted光照模型(以Phong为基础)&#xA;    光线跟踪&#xA;        # 适用光滑表面&#xA;        包围盒&#xA;        空间分割成网格单元&#xA;    辐射度方法&#xA;        # 描述封闭环境中的能量交换&#xA;        # 可模拟彩色渗透现象&#xA;    色彩模型&#xA;        颜色&#xA;            色彩(Hue)&#xA;            色饱和度(Saturation)&#xA;            明度(Brightness)&#xA;        CIE(国际照明委员会)色度图(红绿蓝)&#xA;        混合系统&#xA;            面向硬件&#xA;                RGB 红绿蓝加色系统&#xA;                CMY 青、品红、黄着色系统&#xA;                    彩色印刷、胶卷等非发光显示体中采用&#xA;            面向用户&#xA;                HSV(Hue, saturation, value)&#xA;                    # 六棱锥模型&#xA;                    # 可与RGB空间互相转化&#xA;                    HLS(Hue, lightness, saturation)双六棱锥模型&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;2d&#34;&gt;&#xA;  2d&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;分形&#34;&gt;&#xA;  分形&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%bd%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;    Fractal&#xA;    具有自相似性质的多个形状&#xA;        大的部分由小的部分组成，小的部分像大的部分&#xA;        用递归算法模拟&#xA;Mandelbrot Set&#xA;    介绍&#xA;        分形领域最著名的科学家 本华.曼德博&#xA;        曼德博集合常常由 z^2 + c定义&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;3d&#34;&gt;&#xA;  3d&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;术语&#34;&gt;&#xA;  术语&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%af%e8%af%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;顶点(vertexs): &#xA;图元(primitives, entity, 图素, 实体): 顶点组合为图元&#xA;片元(fragments, 片段): 图元裁剪、颜色、纹理、坐标转换等后合成片元&#xA;像素(pixels)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;硬件-1&#34;&gt;&#xA;  硬件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%a1%ac%e4%bb%b6-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;cpu与gpu&#xA;    特点&#xA;        cpu串行运算，电量分配给控制器和缓存，没有太多计算单元&#xA;        97, 98年 nvidia 出品 nvidia系列显卡，并行计算。gpu控制单元少，计算单元多&#xA;    构造&#xA;        cpu通过cpu总线连接内存，cpu总线和pci总线通过主桥(北桥)连接，pci总线连接显卡&#xA;        webgl中大量控制逻辑用js编写cpu执行，交给gpu渲染。要渲染的数据从内存传入显存，再由显卡计算&#xA;            最耗时的是内存到显存之前的数据传输&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;模型&#34;&gt;&#xA;  模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;mesh模型&#xA;    无数三角形面组成的物体（可帖上纹理）。&#xA;概念&#xA;    3d模型由顶点(vertex)组成，顶点连成三角形或四边形，再组成复杂的立体模型&#xA;    网格模型&#xA;加载过程&#xA;    ajax下载文件&#xA;    解析成Mesh模型&#xA;    显示在场景中&#xA;三角形&#xA;    # 渲染效率最高&#xA;    顶点&#xA;        Vertex&#xA;    正反面&#xA;        顶点顺时针排列为正面&#xA;    法线&#xA;        Normal&#xA;        正面指向，垂直于面的矢量&#xA;        作用&#xA;            法线与入射光角度越小，该点光线越强&#xA;    顶点法线&#xA;        Vertex Normal&#xA;        过顶点的矢量&#xA;        作用&#xA;            高洛德着色(Gouraud Shading) 中计算光照和纹理效果。&#xA;            生成平滑的棱时，令顶点法线和相邻多平面法线保持等角&#xA;            生成棱时顶点法线为点所在平面的法线(可多个), 这样在面连接处形成突出的边缘。&#xA;google 3d模型库&#xA;    sketchup.google.com/3dwarehouse/&#xA;vtk&#xA;    vtk DataFile Version 3.0                # 4.0已经出来，3.0广泛使用&#xA;    vtk output                                # 一般不改变&#xA;    ASCII                                        # 使用标准ASCII码， 也可以写binary&#xA;    DATASET POLYDATA                        # 表示多边形面集，面由点组成&#xA;                                            ## POLYDATA是数据类型, 可以是STRUCTED_POINTS, STRUCTURED_GRID, UNSTRUCTURED_GRID, POLYDATA, FIELD等。POLYDATA表示三角形或四边形数据。&#xA;    POINTS 35947 float                        # 表示该模型由35947个点组成，坐标分量是浮点型&#xA;                                            ## 这行的后面是35947 * 3个float型数字。每三个数字表示一个点&#xA;    POLYGONS 69451 277804                # POLYGONS是关键字, 69451表示模型有69451个多边形&#xA;                                            ## 后面行的 3 21216 21215 20399中3表示每个多边形三个顶点。每一行是一个多边形面。21216 21215 20399表示在POINTS 35947 float段中的索引。&#xA;                                            ## 277804表示整个POLYGONS占据的数组的长度，计算公式是69451 * 4 = 277804, 乘数4是3 21216 21215 20399这组元素的长度。用于计算存储空间&#xA;    CELL_DATA 69451                        # 表示面的个数，和POLYGONS上定义的面个数一致。&#xA;    POINT_DATA 35947                        # 表示点的个数, 和POINTS中定义的点个数一致。&#xA;贴图&#xA;    立方体环境贴图(Cubic Environment Mapping)&#xA;        # 简称立方体贴图&#xA;        介绍&#xA;            一个纹理包含了包围物体场景的图像数据。x, y, z轴正负方向各一张图片，首尾相连。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;计算&#34;&gt;&#xA;  计算&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%a1%e7%ae%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;旋转的三种工具&#xA;    矩阵&#xA;        用来与点相乘，改变点的位置&#xA;    欧拉角&#xA;        三个轴的旋转角度(Yaw[z], Pitch[y], Roll[x])来表示几何体的旋转&#xA;        欧拉角很容易转换为矩阵。使用欧拉角更形象一些&#xA;    四元组&#xA;四元组&#xA;    介绍&#xA;        表示任何一个方向上的轴，和围绕这个轴旋转的弧度&#xA;        可方便地与欧拉角和矩阵之间通过公式转换&#xA;三维投影&#xA;    三维空间中的点变为二维屏幕上的点是投影运算&#xA;        # 二维空间变到三维空间是反投影运算&#xA;        ## 如鼠标从二维到三维的反投影&#xA;三维布尔运算&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;渲染&#34;&gt;&#xA;  渲染&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b8%b2%e6%9f%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h1 id=&#34;工具&#34;&gt;&#xA;  工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;flash&#xA;3d max&#xA;blender&#xA;ps&#xA;unity3d&#xA;wirefusion&#xA;maya&#xA;rhino&#xA;illustrator&#xA;gimp&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
