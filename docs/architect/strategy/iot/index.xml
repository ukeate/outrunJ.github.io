<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IoT on ukeate的笔记</title>
    <link>https://ukeate.com/docs/architect/strategy/iot/</link>
    <description>Recent content in IoT on ukeate的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 14 Nov 2022 20:22:20 +0800</lastBuildDate>
    <atom:link href="https://ukeate.com/docs/architect/strategy/iot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://ukeate.com/docs/architect/strategy/iot/framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ukeate.com/docs/architect/strategy/iot/framework/</guid>
      <description>&lt;h1 id=&#34;thingsboard&#34;&gt;&#xA;  ThingsBoard&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#thingsboard&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;# java, 社区版、企业版&#xA;文档&#xA;    github.com/thingsboard/thingsboard&#xA;    thingsboard.io/docs&#xA;    localhost:8080/swagger-ui.html      # 本地swagger&#xA;安装&#xA;    docker&#xA;        docker run -it -p 9090:9090 -p 1883:1883 -p 5683:5683/udp -v ~/.mytb-data:/data -v ~/.mytb-logs:/var/log/thingsboard --name mytb thingsboard/tb-postgres&#xA;    maven&#xA;        确定ui/pom.xml中&amp;lt;nodeVersion&amp;gt;&#xA;        mvn install -DskipTests&#xA;    配置&#xA;        application&#xA;            zk&#xA;                ZOOKEEPER_ENABLED&#xA;                ZOOKEEPER_URL&#xA;            cassandra&#xA;                CASSANDRA_URL&#xA;                CASSANDRA_USERNAME&#xA;                CASSANDRA_PASSWORD&#xA;            redis&#xA;                REDIS_HOST&#xA;                REDIS_PORT&#xA;                REDIS_DB&#xA;                REDIS_PASSWORD&#xA;            postgresql&#xA;                SPRING_DATASOURCE_URL&#xA;                SPRING_DATASOURCE_USERNAME&#xA;                SPRING_DATASOURCE_PASSWORD&#xA;            kafka&#xA;                TB_KAFKA_SERVERS&#xA;    运行&#xA;        application&#xA;            server&#xA;        transport&#xA;            http&#xA;    demo数据&#xA;        admin&#xA;            sysadmin@thingsboard.org    sysadmin&#xA;        tenant&#xA;            tenant@thingsboard.org  tenant&#xA;        customer&#xA;            customer@thingsboard.org或customerA@thingsboard.org  customer&#xA;            customerB@thingsboard.org   customer&#xA;            customerC@thingsboard.org   customer&#xA;        device&#xA;            A1, A2, A3  A1_TEST_TOKEN,...   customerA&#xA;            B1  B1_TEST_TOKEN   customerB&#xA;            C1  C1_TEST_TOKEN   customerC&#xA;            &#39;DHT11 Demo Device&#39;     DHT11_DEMO_TOKEN&#xA;            &#39;Raspberry Pi Demo Device&#39;  RASPBERRY_PI_DEMO_TOKEN&#xA;包结构&#xA;    application                         # 可改, 网关&#xA;        server&#xA;            install&#xA;            config                      # 同源策略、swagger、websocket、消息、安全&#xA;            exception&#xA;            controller                  # 页面调用&#xA;            service&#xA;            actors&#xA;                service&#xA;                    DefaultActorService&#xA;                        actorContext&#xA;                            actorService(this)&#xA;                            actorSystem&#xA;                            appActor&#xA;                            statsActor&#xA;                        rpcManagerActor&#xA;    common                              # 不可改, 功能代理&#xA;        data                            # 数据结构&#xA;        message                         # 消息类型&#xA;        transport                       # 客户端调用&#xA;    dao                                 # 可改, 业务, 适配db&#xA;        model                           # 数据库对象&#xA;        resources&#xA;            sql                         # 表结构&#xA;    netty-mqtt                          # 不可改, 数据通信协议&#xA;    rule-engine                         # 不可改, 规则引擎&#xA;    transport                           # 不可改, 设备端运行&#xA;        http                            # 启动http传输协议&#xA;        coap&#xA;        mqtt&#xA;    tools                               # 可改, 工具&#xA;    ui                                  # 可改, 页面, angular, react, webpack&#xA;    docker                              # 不可改, 打包&#xA;    msa                                 # 不可改，分布式&#xA;        black-box-tests                 # 黑盒测试&#xA;        js-executor                     # 执行js&#xA;    log&#xA;    img         &#xA;模块&#xA;    application&#xA;        common&#xA;            data                        # 数据结构&#xA;            message                     # 消息结构&#xA;            transport                   # 接口结构，适配客户端&#xA;    dao                                 # 交互data, 兼容不同db&#xA;    tools&#xA;        extensions&#xA;            kafka&#xA;            mqtt&#xA;            rabbitmq&#xA;            rest-api-call&#xA;        extensions-api&#xA;            action&#xA;            filter&#xA;            plugin&#xA;            processor&#xA;        extensions-core                 # 实现公用extensions-api&#xA;    transport&#xA;        http                            # rest&#xA;        coap                            # californium&#xA;        mqtt                            # netty&#xA;    规则引擎                             # 基于actors执行&#xA;        filters&#xA;        processors&#xA;        action&#xA;    ui                                  # node.js + yarn&#xA;表结构&#xA;    tenant&#xA;    customer                            # 关联tenant&#xA;    tb_user                             # user信息、角色&#xA;    user_credentials                    # user密码&#xA;    admin_settings                      # admin信息, key value形式&#xA;    audit_log                           # 登录日志&#xA;&#xA;    asset&#xA;    entity_view     &#xA;    attribute_kv                        # entity attribute&#xA;    component_descriptor                # node类&#xA;&#xA;    device                              # 设备, label&#xA;    device_credentials                  # 设备ACCESS_TOKEN&#xA;    ts_kv                               # 设备事件&#xA;    ts_kv_latest                        # 设备当前状态&#xA;&#xA;    rule_chain                          # rule root chain&#xA;    rule_node                           # rule节点&#xA;    relation                            # rule关系&#xA;    event                               # rule事件&#xA;    alarm                               # alarm事件&#xA;&#xA;    dashboard                           # dashboard设置&#xA;    widget_type                         # widget, 别名&#xA;    widgets_bundle&#xA;api&#xA;    host:port/api/v1/$ACCESS_TOKEN/&#xA;        telementry                      # 上传遥测数据&#xA;            post {&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;}&#xA;            post [{&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;}]&#xA;            post {&amp;quot;ts&amp;quot;:1451649600512, &amp;quot;values&amp;quot;:{&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;}}&#xA;        attributes&#xA;            post {&amp;quot;attribute1&amp;quot;:&amp;quot;value1&amp;quot;}          # 更新属性&#xA;            get                         # 请求属性&#xA;        attributes/updates&#xA;            get ?timeout=20000          # 订阅属性&#xA;        rpc&#xA;            get ?timeout=20000          # 要求订阅，返回id, method, params&#xA;            post {&amp;quot;method&amp;quot;: &amp;quot;getTime&amp;quot;, &amp;quot;params&amp;quot;:{}}     # 执行method&#xA;        rpc/{$id}&#xA;            post&#xA;        claim                           # 用户认领设备&#xA;            post&#xA;服务架构&#xA;产品架构&#xA;    设备接入: MQTT、CoAP、HTTP&#xA;    规则引擎                             # 处理设备消息&#xA;        消息(message)&#xA;            设备传入数据&#xA;            设备生命周期事件&#xA;            rest api事件&#xA;            rpc请求&#xA;        规则节点(node)                   # 过滤消息&#xA;            filter&#xA;            enrichment&#xA;            transformation&#xA;            action&#xA;            external&#xA;            rule chain&#xA;        规则链                           # 连接节点&#xA;    核心服务&#xA;        设备认证: token、X.509&#xA;        规则和插件&#xA;        多租户(tenant)&#xA;            客户&#xA;                资产&#xA;                设备&#xA;        部件(widget)仪表盘(dashboard)&#xA;            alarm&#xA;            实体视图&#xA;                设备即服务(DaaS)&#xA;                共享资产、设备&#xA;                传感器等权限&#xA;        告警和事件&#xA;    网关: rest api, websocket&#xA;    actor模型: 用于并发&#xA;    集群: zookeeper服务发现, 一致性哈希&#xA;    安全: SSL&#xA;    第三方&#xA;        akka&#xA;        zookeeper&#xA;        grpc&#xA;        cassandra&#xA;&#xA;    system&#xA;        general&#xA;        mail&#xA;        security&#xA;功能模块&#xA;    admin&#xA;    tenant&#xA;        rule chain&#xA;            filter&#xA;            enrichment&#xA;            transformation&#xA;            action&#xA;            *analytics&#xA;            external&#xA;            rule chain&#xA;        *data converters&#xA;        *integrations&#xA;        *roles&#xA;        *customers hierarchy&#xA;        *user groups&#xA;        customers&#xA;        *customer groups&#xA;        assets&#xA;        *asset groups&#xA;        devices&#xA;        *device groups&#xA;        entity views&#xA;        *entity view groups&#xA;        widgets library&#xA;        dashboards&#xA;        *dashboard groups&#xA;        *scheduler&#xA;            report&#xA;            send rpc&#xA;            update attributes&#xA;        *white labeling&#xA;            main server&#xA;            mail templates&#xA;            custom translation&#xA;            custom menu&#xA;            white labeling&#xA;            login white labeling&#xA;            self registration&#xA;        audit logs&#xA;    entities&#xA;        包含&#xA;            tenants&#xA;            customers&#xA;            users&#xA;            devices&#xA;            assets&#xA;            alarms&#xA;            dashboards&#xA;            rule node&#xA;            rule chain&#xA;        操作&#xA;            detail&#xA;            assigned to customer&#xA;            attributes&#xA;                client&#xA;                server&#xA;                shared&#xA;            telemetry&#xA;            alarms&#xA;            events&#xA;            relations&#xA;            audit logs&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
