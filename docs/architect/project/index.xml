<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工程设计 on ukeate的笔记</title>
    <link>https://ukeate.com/docs/architect/project/</link>
    <description>Recent content in 工程设计 on ukeate的笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 31 Aug 2022 17:07:09 +0800</lastBuildDate>
    <atom:link href="https://ukeate.com/docs/architect/project/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>工程</title>
      <link>https://ukeate.com/docs/architect/project/ddd/</link>
      <pubDate>Wed, 10 Oct 2018 17:39:31 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/project/ddd/</guid>
      <description>&lt;h1 id=&#34;介绍&#34;&gt;&#xA;  介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;&#x9;Domain-driven Design&#xA;    针对传统软件开发流程（分析-设计-编码）各阶段业务割裂问题，一开始定义好领域&#xA;目标&#xA;    维护概念完整性(纯洁)，避免语义泄露和腐化&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;概念&#34;&gt;&#xA;  概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;领域（Domain）&#xA;界限上下文（Bounded Context）&#xA;领域模型（Domain Model）&#xA;领域通用语言&#xA;分层架构&#xA;    展示层、应用层、领域层、基础设施层&#xA;最佳实践&#xA;    关联尽量少、尽量单项、尽量降低整体复杂度&#xA;    实体（Entity）&#xA;        领域中的唯一标识，属性尽量少&#xA;    值对象（Value Object）&#xA;        没有唯一标识，属性值不变&#xA;    领域服务（Domain Service）&#xA;        协调多个领域对象，只有方法没有状态&#xA;        应用层服务、领域层服务、基础层服务&#xA;    聚合、聚合根（Aggregate, Aggregate Root）&#xA;        聚合定义了一组有内聚关系的对象集合，聚合根是对聚合引用的唯一元素&#xA;        修改聚合必须在事务级别&#xA;        70%的聚合只有一个实体, 30%有2到3个实体。&#xA;        只有一个实体时，实体就是聚合根。多实体时思考哪个对象有独立存在的意义，且可与外部直接交互&#xA;    工厂（Factory）&#xA;        工厂模式&#xA;    仓储（Repository）&#xA;        持久化到DB，管理对象&#xA;        只对聚合设计仓储&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;建模&#34;&gt;&#xA;  建模&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bb%ba%e6%a8%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;原则&#34;&gt;&#xA;  原则&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%9f%e5%88%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;简单、容易、清晰&#xA;使用不动点&#xA;领域专注&#xA;聚合内强一致，跨聚合最终一致&#xA;内部概念完整一致(unification)&#xA;&#x9;术语不变、不矛盾、不重叠&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;数据模型do&#34;&gt;&#xA;  数据模型（DO）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e6%a8%a1%e5%9e%8bdo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;失血&#xA;&#x9;DO和DAO无业务逻辑，纯数据&#xA;贫血&#xA;&#x9;持久化逻辑在DAO中&#xA;充血&#xA;&#x9;service很薄，持久化的逻辑在DO中，无DAO或与DO双向依赖&#xA;肿胀&#xA;&#x9;无service，全部逻辑放DO&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;分析设计&#34;&gt;&#xA;  分析设计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%9e%90%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;分析模型&#34;&gt;&#xA;  分析模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e6%9e%90%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 业务领域分析, 不考虑代码&#xA;问题&#xA;&#x9;含意不完整，不可图形或文字表达，错误假设&#xA;&#x9;会深入某细节&#xA;&#x9;忽略某细节直到设计或实现, 如持久化、性能&#xA;目标&#xA;&#x9;领域模型&#xA;&#x9;架构设计&#xA;事件风暴                    # 是开发建模，不是用户需求故事&#xA;&#x9;准备&#xA;&#x9;&#x9;功能确认: 近期milestone&#xA;&#x9;&#x9;找正确的人: 领域专家, 前后端，架构师&#xA;&#x9;&#x9;引导者: 准备资料, 排程, 时间, 2/3时间预警&#xA;&#x9;事件风暴&#xA;&#x9;&#x9;领域事件: 用户可感知状态&#xA;&#x9;&#x9;分支小组 -&amp;gt; 个人发散 -&amp;gt; 小组一致 -&amp;gt; 整体一致        # 不能一致表示准备不足&#xA;&#x9;&#x9;逻辑顺序 -&amp;gt; 最终流程&#xA;&#x9;命令风暴                # 为什么, 分色&#xA;&#x9;&#x9;事件触发原因、方式&#xA;&#x9;&#x9;用户角色&#xA;&#x9;&#x9;读模型: 用户前置需求&#xA;&#x9;&#x9;写模型: 动词&#xA;&#x9;&#x9;描述&#xA;&#x9;聚合&#xA;&#x9;&#x9;取名, 分职责&#xA;&#x9;持续探索&#xA;领域模型一开始就结合编码设计    # 设计围绕模型, 模型受设计反馈改善&#xA;&#x9;开发时意识到模型变更, 会保持完整性&#xA;&#x9;每个开发在修改前需要了解模型&#xA;&#x9;面向对象更易于建模, 过程化易于流程，如数学&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;重构&#34;&gt;&#xA;  重构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%87%8d%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;要求&#xA;&#x9;设计灵活&#xA;&#x9;使用经过验证的构造&#xA;目标&#xA;&#x9;领域理解更深、更清晰&#xA;&#x9;&#x9;深刻(incisive)、深层(deep)的模型&#xA;&#x9;技术的动机的代码转换&#xA;实现&#xA;&#x9;小幅可控&#xA;&#x9;基于测试&#xA;&#x9;突破&#xA;&#x9;&#x9;新的概念或抽象&#xA;&#x9;&#x9;隐含的概念被凸显&#xA;&#x9;&#x9;&#x9;倾听领域语言&#xA;&#x9;&#x9;&#x9;过分复杂是因为关键点被替代&#xA;&#x9;&#x9;&#x9;领域文献        # 深层视图&#xA;&#x9;&#x9;&#x9;约束            # 表达不变量&#xA;&#x9;&#x9;&#x9;过程(process)   # 面向对象中的面向过程, 多个过程时用策略&#xA;&#x9;&#x9;&#x9;规约            # 测试对象返回布尔值, 重构成对象而非写在application&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;战略建模&#34;&gt;&#xA;  战略建模&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%88%98%e7%95%a5%e5%bb%ba%e6%a8%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 形成上下文映射图&#xA;问题空间&#xA;&#x9;领域                                            # 与公司组织关联&#xA;&#x9;&#x9;子域                                        # 最好对应一个限界上下文&#xA;&#x9;&#x9;&#x9;核心域(core domain)                     # 项目动机, 公司核心竞争力, 尽量小, 最高优先级&#xA;&#x9;&#x9;&#x9;通用子域(generic subdomain)             # 作用于整个系统的支撑子域&#xA;&#x9;&#x9;&#x9;支撑子域                                # 重要非核心&#xA;&#x9;集成&#xA;&#x9;&#x9;合作关系(partnership)                       # 同时成功失败&#xA;&#x9;&#x9;共享内核(shared kernel)                     # 小型内核, 持续集成功能&#xA;&#x9;&#x9;客户/供应(customer-supplier development)    # 上下游&#xA;&#x9;&#x9;遵从(conformist)                            # 下游遵从上游&#xA;&#x9;&#x9;防腐层(anticorruption layer)                # 翻译转换领域服务&#xA;&#x9;&#x9;开放主机服务(open host service)             # 公开协议，子系统访问&#xA;&#x9;&#x9;发布语言(published language)                # dsl, 通常与开放主机服务一起&#xA;&#x9;&#x9;分隔(separate way)                          # 声明无关联&#xA;&#x9;&#x9;大泥球(big ball of mud)                     # 已有纠缠的系统，隔离出来&#xA;解决方案空间&#xA;&#x9;通用语言&#xA;&#x9;&#x9;一个限界上下文一个通用语言&#xA;&#x9;&#x9;清晰(概念无二义性), 简洁                    # 如卖家和买家都叫用户，就是不清晰。如用type标记用户是卖家或买家，就是不简洁。所以直接用两个对象&#xA;&#x9;限界上下文                  # 条件的集合&#xA;&#x9;&#x9;目的&#xA;&#x9;&#x9;&#x9;确保术语含义明确&#xA;&#x9;&#x9;&#x9;切分规模, 易于保持领域纯洁&#xA;&#x9;&#x9;&#x9;设定进化框架而非模块，包含模块&#xA;&#x9;&#x9;考虑因素&#xA;&#x9;&#x9;&#x9;团队组织结构&#xA;&#x9;&#x9;&#x9;应用特定部分惯例、物理表现&#xA;&#x9;&#x9;挑战&#xA;&#x9;&#x9;&#x9;团队开发碎片化      # 写重复的代码，由于不知道或怕改错&#xA;&#x9;&#x9;&#x9;持续集成&#xA;&#x9;&#x9;&#x9;&#x9;早合并&#xA;&#x9;&#x9;&#x9;&#x9;自动构建测试    # 检测不一致&#xA;&#x9;&#x9;模块&#xA;&#x9;&#x9;&#x9;作用&#xA;&#x9;&#x9;&#x9;&#x9;降低模型规模复杂度&#xA;&#x9;&#x9;&#x9;&#x9;代码高内聚低耦合&#xA;&#x9;&#x9;&#x9;设计&#xA;&#x9;&#x9;&#x9;&#x9;通信性内聚(communicational cohesion)&#xA;&#x9;&#x9;&#x9;&#x9;功能性内聚(functional cohesion)&#xA;&#x9;&#x9;&#x9;&#x9;每模块统一接口&#xA;&#x9;&#x9;&#x9;&#x9;名称反映深层理解&#xA;&#x9;&#x9;&#x9;&#x9;灵活性，进化性&#xA;&#x9;上下文映射                  # 领域间集成关系&#xA;&#x9;&#x9;模式&#xA;&#x9;&#x9;&#x9;共享内核(shared kernel)                 # 为减少重复, 共享领域子集，多方测试&#xA;&#x9;&#x9;&#x9;客户-供应商(customer-supplier)          # 做反馈的需求, 需求测试, 自动化验收&#xA;&#x9;&#x9;&#x9;顺从者                                  # 供应商不做需求, 客户用适配器对接组件&#xA;&#x9;&#x9;&#x9;防腐层(anticorruption layer)            # 双向领域模型转换器, 保持内部模型纯洁&#xA;&#x9;&#x9;&#x9;&#x9;从前&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;原始数据(api, db)无模型无语义的处理&#xA;&#x9;&#x9;&#x9;&#x9;实现&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;对外多门面(facade)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;每个门面一个适配器(adapter)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;适配器间用转换器(translator)&#xA;&#x9;&#x9;&#x9;隔离通道(separate way)&#xA;&#x9;&#x9;&#x9;开放主机服务(open host service)         # 实现开放服务协议&#xA;&#x9;&#x9;&#x9;提炼                                    # 多次重构后还很大&#xA;&#x9;&#x9;&#x9;&#x9;实现&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;分离基本概念和普通概念, 提炼核心域和子域&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;子域&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;使用第三方服务&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;外包&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;修改已有模型&#xA;&#x9;六边形架构&#xA;&#x9;&#x9;领域模型简洁自治&#xA;&#x9;&#x9;对外适配器防腐, 保护限界上下文              # 如面向接口&#xA;&#x9;&#x9;&#x9;消息, 内存, 数据库&#xA;&#x9;&#x9;&#x9;soap, rest&#xA;&#x9;CQRS(command query responsibility segregationg)             # 修改只记事件(日志), 查询时计算&#xA;&#x9;&#x9;查询方式&#xA;&#x9;&#x9;&#x9;单数据库/读写分离，查询时计算事件&#xA;&#x9;&#x9;&#x9;读写分离, 读库异步计算事件保存冗余, 读库负载均衡&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;战术建模&#34;&gt;&#xA;  战术建模&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%88%98%e6%9c%af%e5%bb%ba%e6%a8%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;# 组成限界上下文&#xA;领域&#xA;&#x9;实体(entity)                # 标识和延续性, 有id, 持续变化。&#xA;&#x9;值对象(value object)        # 无id, 只有属性, 最好不可变(可共享)。尽量建模值对象。可包含实体引用或值对象。&#xA;&#x9;生命周期&#xA;&#x9;&#x9;聚合(aggregate)         # 定义对象所有权和边界&#xA;&#x9;&#x9;&#x9;简化&#xA;&#x9;&#x9;&#x9;&#x9;关联            # 可导航到的关联&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;1对1        # 对象引用&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;1对n        # 包含集合&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;n对n        # 删除关联，关系加约束或转换 &#xA;&#x9;&#x9;&#x9;目的&#xA;&#x9;&#x9;&#x9;&#x9;一致性&#xA;&#x9;&#x9;&#x9;&#x9;强化不变量&#xA;&#x9;&#x9;&#x9;实现&#xA;&#x9;&#x9;&#x9;&#x9;聚合根(root)    # 聚合根间是最终一致性&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;是个实体,有id&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;外部访问的唯一对象&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;向外传递副本&#xA;&#x9;&#x9;工厂(factory)           # 在领域中没有定义, 但程序需要&#xA;&#x9;&#x9;&#x9;目的&#xA;&#x9;&#x9;&#x9;&#x9;并非对象创建对象&#xA;&#x9;&#x9;&#x9;&#x9;对象创建存在自有知识&#xA;&#x9;&#x9;&#x9;&#x9;创建过程原子性&#xA;&#x9;&#x9;&#x9;&#x9;对已有持久化对象重建并修复&#xA;&#x9;&#x9;&#x9;问题&#xA;&#x9;&#x9;&#x9;&#x9;外部访问根内对象，需关联不必要的根实体&#xA;&#x9;&#x9;&#x9;实现&#xA;&#x9;&#x9;&#x9;&#x9;不用工厂&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;构造不复杂&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;不涉及其它对象&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;客户希望用策略创建&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;类是具体类型, 无层级&#xA;&#x9;&#x9;&#x9;&#x9;聚合根提供方法&#xA;&#x9;&#x9;&#x9;&#x9;单独工厂        # 违反了封装原则, 但保持了简单&#xA;&#x9;&#x9;资源库(repository)      # 内存假象&#xA;&#x9;&#x9;&#x9;目的&#xA;&#x9;&#x9;&#x9;&#x9;不关联根获取对象引用&#xA;&#x9;&#x9;&#x9;&#x9;不暴露细节, 会减少领域专注&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;防止代码扩散&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;减少变更修改&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;维护聚合封装性&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;容易的基础设施被滥用, 产生除聚合根外导航&#xA;&#x9;&#x9;&#x9;实现&#xA;&#x9;&#x9;&#x9;&#x9;封装所有获取对象逻辑&#xA;&#x9;&#x9;&#x9;&#x9;基础设施, 全局可访问&#xA;&#x9;&#x9;&#x9;&#x9;不同对象不同策略访问、存储      # 领域与基础设施解耦&#xA;&#x9;&#x9;&#x9;&#x9;接口是领域模型, 实现像基础设施&#xA;&#x9;&#x9;&#x9;&#x9;参数筛选或规约(specification)筛选(筛选器)&#xA;entity&#xA;&#x9;介绍&#xA;&#x9;&#x9;entity即状态&#xA;&#x9;&#x9;应用开发即处理entity的表现&#xA;&#x9;主从&#xA;&#x9;&#x9;主存储(可变)                    # 关键是选择主存储&#xA;&#x9;&#x9;&#x9;多派生一致性好保障&#xA;&#x9;&#x9;&#x9;派生表达业务的难易成度&#xA;&#x9;&#x9;只读派生(representation, 不可变)&#xA;&#x9;&#x9;&#x9;多份存储, 一致性&#xA;&#x9;&#x9;&#x9;派生, 合并, 转化&#xA;&#x9;类型&#xA;&#x9;&#x9;东西(可变)                      # 单据叠加成东西, 东西叠加成东西&#xA;&#x9;&#x9;单据(可变)                      # 事件叠加成单据&#xA;&#x9;&#x9;事件(event, 不可变)&#xA;&#x9;&#x9;命令(command, 不可变)&#xA;&#x9;&#x9;视图(view model, 不可变)&#xA;&#x9;&#x9;子集(subset, 不可变)&#xA;&#x9;&#x9;视图(aggregation, 不可变)&#xA;&#x9;&#x9;表单(可变)                      # 是主存储&#xA;&#x9;物理介质&#xA;&#x9;&#x9;OLTP(mysql)                     # 点查询&#xA;&#x9;&#x9;OLAP(clickHouse)                # 范围查询&#xA;&#x9;&#x9;queue(kafka)                    # 顺序读, 低延迟&#xA;&#x9;&#x9;业务服务                        # 业务逻辑, 像虚拟的表&#xA;&#x9;分组entity主存储(BC, bounded context)&#xA;&#x9;&#x9;目的&#xA;&#x9;&#x9;&#x9;分解&#xA;&#x9;&#x9;&#x9;&#x9;管理复杂度&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;系统&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;组织部门&#xA;&#x9;&#x9;&#x9;&#x9;实现内部一致性&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;概念, 数据&#xA;&#x9;&#x9;&#x9;对主存储进行受控的修改&#xA;&#x9;&#x9;边界entity                          # 用于集成，不一定是主存储&#xA;&#x9;&#x9;&#x9;形式&#xA;&#x9;&#x9;&#x9;&#x9;授权、binlog、工作流、视图数据、租户作为其它租户user&#xA;&#x9;&#x9;&#x9;&#x9;东西、单据、event&#xA;&#x9;&#x9;&#x9;介质&#xA;&#x9;&#x9;&#x9;&#x9;queue, 带权限db, rpc虚拟表&#xA;&#x9;&#x9;&#x9;触发&#xA;&#x9;&#x9;&#x9;&#x9;queue, ui, api&#xA;&#x9;&#x9;&#x9;&#x9;触发由worker托管, 输入是queue或rpc socket&#xA;&#x9;&#x9;粒度&#xA;&#x9;&#x9;&#x9;分entity&#xA;&#x9;&#x9;&#x9;分步骤&#xA;&#x9;&#x9;&#x9;分entity字段&#xA;&#x9;&#x9;&#x9;原则&#xA;&#x9;&#x9;&#x9;&#x9;BC尽可能少而大&#xA;&#x9;&#x9;关系&#xA;&#x9;&#x9;&#x9;时间错开&#xA;&#x9;&#x9;&#x9;&#x9;外键关系                    # BC挂载到BC, 如后台系统与计费系统的定价, 运营人员与服务系统的配置, 流程节点系统对流程的依赖&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rpc, 数据库, 数据复制&#xA;&#x9;&#x9;&#x9;&#x9;报表关系&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;时效性高&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;一般做复制              # 所以边界entity是数据变更event&#xA;&#x9;&#x9;&#x9;&#x9;触发关系                    # fire and forget&#xA;&#x9;&#x9;&#x9;&#x9;交棒关系&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;下游给上游command/event, 上游触发&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;上游实现降级            # 下游不可用时，安慰语&#xA;&#x9;&#x9;&#x9;时间同时&#xA;&#x9;&#x9;&#x9;&#x9;accountable/responsible关系                 # 负责人与实现人&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;原则&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;accountable尽量小&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;只调度&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;与responsible的边界entity是rpc虚拟表, 请求command, 返回event&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;补偿实现一致                    # 如超卖&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;responsible提供自己界面         # accountable不控制&#xA;&#x9;&#x9;&#x9;&#x9;抢资源关系&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;锁服务&#xA;服务(service)                   # 无法划分对象的动作, 无状态。按功能分组, 多对象的连接点&#xA;&#x9;可在application, domain, infrastructure&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;最终一致性建模&#34;&gt;&#xA;  最终一致性建模&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%80%e7%bb%88%e4%b8%80%e8%87%b4%e6%80%a7%e5%bb%ba%e6%a8%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;in-memory&#34;&gt;&#xA;  In-Memory&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#in-memory&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;聚合根在内存，同步最新状态&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;事件溯源event-sourcing&#34;&gt;&#xA;  事件溯源（Event Sourcing）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8b%e4%bb%b6%e6%ba%af%e6%ba%90event-sourcing&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;&#x9;没有CRUD，只有Append Event。数据不可变&#xA;&#x9;对象最新状态通过事件溯源获得&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;actor&#34;&gt;&#xA;  Actor&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#actor&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;通过Mailbox取代调用，保证消息线性处理&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;edaevent-driven-architecture&#34;&gt;&#xA;  EDA(Event-driven Architecture)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#edaevent-driven-architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;节点只处理逻辑，节点间Event通信&#xA;是最终一致性的架构&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;cqrs&#34;&gt;&#xA;  CQRS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cqrs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;介绍&#xA;&#x9;Command Query Responsibility Seperation&#xA;&#x9;CQ接口分离、代码分离，分别设计&#xA;概念&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;项目结构&#34;&gt;&#xA;  项目结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a1%b9%e7%9b%ae%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;用户接口(user interface)&#xA;应用(application)                   # 尽可能小。数据验证，事务。故事, 表达出操作的事情&#xA;    application service&#xA;    unit work&#xA;    presentation model&#xA;领域(domain)                        # 专注领域。准确定义业务对象&#xA;    aggregate, entity, value object&#xA;    domain service, domain event&#xA;基础设施(infrastructure)            # 辅助层&#xA;    repository&#xA;    global support&#xA;项目文件&#xA;    [ui]&#xA;        mall                            # 商城api&#xA;    [saleDomain]&#xA;        [application]&#xA;            mall.application            # 分模块，讲述故事&#xA;                CartService&#xA;                    GetCart()&#xA;                BuyService&#xA;                    Buy()&#xA;            mall.application.domainEventSubscribers         # 订阅domain事件&#xA;        [domain]&#xA;            mall.domain                 # 不大而全，要求刚好满足需求&#xA;                cartModule&#xA;                    entity&#xA;                        CartItem&#xA;                    aggregate&#xA;                        Cart&#xA;                valueObject&#xA;                    Product&#xA;                    SellingPriceCart&#xA;                IDomainServices&#xA;                IRemoteServices         # 访问远程资源接口&#xA;                    IUserService&#xA;                    ISellingPriceService&#xA;                IRepositories           # 仓储接口&#xA;                    ICartRepository&#xA;            mall.domain.events          # 领域事件, 用于实现最终一致性&#xA;            mall.domainService          # 操作domain的无状态方法&#xA;                ConfirmUserCartExistedDomainService&#xA;    [sellingPriceDomain]                # 与saleDomain合作关系, sale请求sellingPrice定价&#xA;        [appication]&#xA;            mall.application.SellingPrice&#xA;                dto&#xA;                    CalculatedCartDTO&#xA;                mapper&#xA;                    ValueObjectToDTO&#xA;        [domain]&#xA;    [infrastructure]&#xA;        mall.infrastructure             # 通用类库&#xA;            domainCore                  # mail.domain base方法&#xA;                AggregateRoot&#xA;                    Cart&#xA;                Entity&#xA;                    CartItem&#xA;                ValueObject&#xA;                    Product&#xA;                IUnitOfWork             # 仓储事务&#xA;            domainEventCore&#xA;                DomainEvent&#xA;                DomainEventBus&#xA;                DomainEventSubscriber&#xA;                IDomainEvent&#xA;                IDomainEventSubscriber&#xA;        mall.infrastructure.repositories                # 仓储&#xA;            CartSqlServerRepository&#xA;        mall.infrastructure.translators                 # 防腐层, 访问远程资源实现&#xA;            user&#xA;                UserAdapter             # 请求原始结果&#xA;                UserService&#xA;                UserTranslator          # 转换原始结果&#xA;模块结构&#xA;&#x9;api: controller&#xA;&#x9;biz: 特异业务&#xA;&#x9;&#x9;manager&#xA;&#x9;&#x9;converter&#xA;&#x9;core: 公用业务&#xA;&#x9;&#x9;model&#xA;&#x9;&#x9;&#x9;entity&#xA;&#x9;&#x9;&#x9;bo&#xA;&#x9;&#x9;service&#xA;&#x9;&#x9;&#x9;repository&#xA;&#x9;common&#xA;&#x9;&#x9;dal&#xA;&#x9;&#x9;&#x9;dataobject&#xA;&#x9;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;dao&#xA;&#x9;&#x9;&#x9;mapper&#xA;&#x9;&#x9;service&#xA;&#x9;&#x9;&#x9;facade&#xA;&#x9;&#x9;&#x9;&#x9;dto: facade和controller用&#xA;&#x9;&#x9;&#x9;&#x9;service: 服务间api&#xA;&#x9;&#x9;&#x9;&#x9;validate&#xA;&#x9;&#x9;&#x9;integration&#xA;&#x9;&#x9;&#x9;&#x9;service&#xA;&#x9;&#x9;shared&#xA;&#x9;&#x9;&#x9;dto: 项目内部公用&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>前端</title>
      <link>https://ukeate.com/docs/architect/project/frontend/</link>
      <pubDate>Wed, 10 Oct 2018 14:51:24 +0800</pubDate>
      <guid>https://ukeate.com/docs/architect/project/frontend/</guid>
      <description>&lt;h1 id=&#34;组件化layout&#34;&gt;&#xA;  组件化Layout&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%84%e4%bb%b6%e5%8c%96layout&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;layout service&#xA;&#x9;# 缓存layout到redis&#xA;&#x9;crud layout功能&#xA;layout对象&#xA;&#x9;index&#xA;&#x9;&#x9;# 缩略信息&#xA;&#x9;plugins&#xA;&#x9;&#x9;components&#xA;&#x9;&#x9;&#x9;table&#xA;&#x9;&#x9;layout&#xA;&#x9;&#x9;&#x9;# 组合方式&#xA;&#x9;&#x9;&#x9;水平，垂直，tab&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
